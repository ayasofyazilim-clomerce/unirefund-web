export type AbpLocalizationResources = {
  "DisplayName:Abp.Localization.DefaultLanguage": "Default language";
  "Description:Abp.Localization.DefaultLanguage": "The default language of the application.";
};
export type AbpValidationResources = {
  "'{0}' and '{1}' do not match.": "'{0}' and '{1}' do not match.";
  "The {0} field is not a valid credit card number.": "The {0} field is not a valid credit card number.";
  "{0} is not valid.": "{0} is not valid.";
  "The {0} field is not a valid e-mail address.": "The {0} field is not a valid e-mail address.";
  "The {0} field only accepts files with the following extensions: {1}": "The {0} field only accepts files with the following extensions: {1}";
  "The field {0} must be a string or array type with a maximum length of '{1}'.": "The field {0} must be a string or array type with a maximum length of '{1}'.";
  "The field {0} must be a string or array type with a minimum length of '{1}'.": "The field {0} must be a string or array type with a minimum length of '{1}'.";
  "The {0} field is not a valid phone number.": "The {0} field is not a valid phone number.";
  "The field {0} must be between {1} and {2}.": "The field {0} must be between {1} and {2}.";
  "The field {0} must match the regular expression '{1}'.": "The field {0} does not match the requested format.";
  "The {0} field is required.": "The {0} field is required.";
  "The field {0} must be a string with a maximum length of {1}.": "The field {0} must be a string with a maximum length of {1}.";
  "The field {0} must be a string with a minimum length of {2} and a maximum length of {1}.": "The field {0} must be a string with a minimum length of {2} and a maximum length of {1}.";
  "The {0} field is not a valid fully-qualified http, https, or ftp URL.": "The {0} field is not a valid fully-qualified http, https, or ftp URL.";
  "The field {0} is invalid.": "The field {0} is invalid.";
  "The value '{0}' is invalid.": "The value '{0}' is invalid.";
  "The field {0} must be a number.": "The field {0} must be a number.";
  "The field must be a number.": "The field must be a number.";
  "ThisFieldIsNotAValidCreditCardNumber.": "This field is not a valid credit card number.";
  "ThisFieldIsNotValid.": "This field is not valid.";
  "ThisFieldIsNotAValidEmailAddress.": "This field is not a valid e-mail address.";
  "ThisFieldOnlyAcceptsFilesWithTheFollowingExtensions:{0}": "This field only accepts files with the following extensions: {0}";
  "ThisFieldMustBeAStringOrArrayTypeWithAMaximumLengthOf{0}": "This field must be a string or array type with a maximum length of '{0}'.";
  "ThisFieldMustBeAStringOrArrayTypeWithAMinimumLengthOf{0}": "This field must be a string or array type with a minimum length of '{0}'.";
  "ThisFieldIsNotAValidPhoneNumber.": "This field is not a valid phone number.";
  "ThisFieldMustBeBetween{0}And{1}": "This field must be between {0} and {1}.";
  "ThisFieldMustBeGreaterThanOrEqual{0}": "This field must be greater than or equal to {0}.";
  "ThisFieldMustBeLessOrEqual{0}": "This field must be less than or equal to {0}.";
  "ThisFieldMustMatchTheRegularExpression{0}": "This field must match the regular expression '{0}'.";
  "ThisFieldIsRequired.": "This field is required.";
  "ThisFieldMustBeAStringWithAMaximumLengthOf{0}": "This field must be a string with a maximum length of {0}.";
  "ThisFieldMustBeAStringWithAMinimumLengthOf{1}AndAMaximumLengthOf{0}": "This field must be a string with a minimum length of {1} and a maximum length of {0}.";
  ThisFieldIsNotAValidFullyQualifiedHttpHttpsOrFtpUrl: "This field is not a valid fully-qualified http, https, or ftp URL.";
  "ThisFieldIsInvalid.": "This field is invalid.";
};
export type UniRefundResources = {
  "Menu:Home": "Home";
  Login: "Login";
  "Menu:Dashboard": "Dashboard";
};
export type AbpTimingResources = {
  "DisplayName:Abp.Timing.Timezone": "Timezone";
  "Description:Abp.Timing.Timezone": "Application time zone";
};
export type AbpMultiTenancyResources = {
  TenantNotFoundMessage: "Tenant not found!";
  TenantNotFoundDetails: "There is no tenant with the tenant id or name: {0}";
  TenantNotActiveMessage: "Tenant is not active!";
  TenantNotActiveDetails: "The tenant is not active with the tenant id or name: {0}";
};
export type AbpExceptionHandlingResources = {
  InternalServerErrorMessage: "An internal error occurred during your request!";
  ValidationErrorMessage: "Your request is not valid!";
  ValidationNarrativeErrorMessageTitle: "The following errors were detected during validation.";
  DefaultErrorMessage: "An error has occurred!";
  DefaultErrorMessageDetail: "Error detail not sent by server.";
  DefaultErrorMessage401: "You are not authenticated!";
  DefaultErrorMessage401Detail: "You should sign in to perform this operation.";
  DefaultErrorMessage403: "You are not authorized!";
  DefaultErrorMessage403Detail: "You are not allowed to perform this operation!";
  DefaultErrorMessage404: "Resource not found!";
  DefaultErrorMessage404Detail: "The resource requested could not be found on the server!";
  EntityNotFoundErrorMessage: "There is no entity {0} with id = {1}!";
  AbpDbConcurrencyErrorMessage: "The data you have submitted has already changed by another user/client. Please discard the changes you've done and try from the beginning.";
  Error: "Error";
  UnhandledException: "Unhandled exception!";
  "401Message": "Unauthorized";
  "403Message": "Forbidden";
  "404Message": "Page not found";
  "500Message": "Internal Server Error";
  "403MessageDetail": "You are not authorized to perform this operation!";
  "404MessageDetail": "Sorry, there's nothing at this address.";
};
export type AbpAuthorizationResources = {
  "Volo.Authorization:010001": "Authorization failed! Given policy has not granted.";
  "Volo.Authorization:010002": "Authorization failed! Given policy has not granted: {PolicyName}";
  "Volo.Authorization:010003": "Authorization failed! Given policy has not granted for given resource: {ResourceName}";
  "Volo.Authorization:010004": "Authorization failed! Given requirement has not granted for given resource: {ResourceName}";
  "Volo.Authorization:010005": "Authorization failed! Given requirements has not granted for given resource: {ResourceName}";
};
export type AbpDddApplicationContractsResources = {
  MaxResultCountExceededExceptionMessage: "{0} can not be more than {1}! Increase {2}.{3} on the server side to allow more results.";
};
export type AbpUiResources = {
  Languages: "Languages";
  AreYouSure: "Are you sure?";
  Cancel: "Cancel";
  Clear: "Clear";
  Yes: "Yes";
  No: "No";
  Ok: "Ok";
  Close: "Close";
  Save: "Save";
  SavingWithThreeDot: "Saving...";
  Actions: "Actions";
  Delete: "Delete";
  SavedSuccessfully: "Saved successfully";
  DeletedSuccessfully: "Deleted successfully";
  Edit: "Edit";
  Refresh: "Refresh";
  Language: "Language";
  LoadMore: "Load more";
  ProcessingWithThreeDot: "Processing...";
  LoadingWithThreeDot: "Loading...";
  Welcome: "Welcome";
  Login: "Login";
  Register: "Register";
  Logout: "Log out";
  Submit: "Submit";
  Back: "Back";
  PagerSearch: "Search";
  PagerNext: "Next";
  PagerPrevious: "Previous";
  PagerFirst: "First";
  PagerLast: "Last";
  PagerInfo: "Showing _START_ to _END_ of _TOTAL_ entries";
  "PagerInfo{0}{1}{2}": "Showing {0} to {1} of {2} entries";
  PagerInfoEmpty: "Showing 0 to 0 of 0 entries";
  PagerInfoFiltered: "(filtered from _MAX_ total entries)";
  NoDataAvailableInDatatable: "No data available";
  Total: "total";
  Selected: "selected";
  PagerShowMenuEntries: "Show _MENU_ entries";
  DatatableActionDropdownDefaultText: "Actions";
  ChangePassword: "Change password";
  PersonalInfo: "My profile";
  AreYouSureYouWantToCancelEditingWarningMessage: "You have unsaved changes.";
  GoHomePage: "Go to the homepage";
  GoBack: "Go back";
  Search: "Search";
  ItemWillBeDeletedMessageWithFormat: "{0} will be deleted!";
  ItemWillBeDeletedMessage: "This item will be deleted!";
  ManageYourAccount: "Manage your account";
  OthersGroup: "Other";
  Today: "Today";
  Apply: "Apply";
  InternetConnectionInfo: "The operation could not be performed. Your internet connection is not available at the moment.";
  CopiedToTheClipboard: "Copied to the clipboard";
  AddNew: "Add new";
  ProfilePicture: "Profile picture";
  Theme: "Theme";
  NotAssigned: "Not Assigned";
};
export type AbpUiNavigationResources = {
  "Menu:Administration": "Administration";
};
export type AbpGlobalFeatureResources = {
  "Volo.GlobalFeature:010001": "The '{ServiceName}' service needs to enable '{GlobalFeatureName}' feature.";
};
export type AbpFeatureResources = {
  "Volo.Feature:010001": "Feature is not enabled: {FeatureName}";
  "Volo.Feature:010002": "Required features are not enabled. All of these features must be enabled: {FeatureNames}";
  "Volo.Feature:010003": "Required features are not enabled. At least one of these features must be enabled: {FeatureNames}";
};
export type AbpUiMultiTenancyResources = {
  GivenTenantIsNotExist: "Given tenant doesn't exist: {0}";
  GivenTenantIsNotAvailable: "Given tenant isn't available: {0}";
  Tenant: "Tenant";
  Switch: "switch";
  Name: "Name";
  SwitchTenantHint: "Leave the name field blank to switch to the host side.";
  SwitchTenant: "Switch tenant";
  NotSelected: "Not selected";
};
export type AbpIdentityResources = {
  "Menu:IdentityManagement": "Identity management";
  Users: "Users";
  NewUser: "New user";
  UserName: "User name";
  Surname: "Surname";
  EmailAddress: "Email address";
  PhoneNumber: "Phone number";
  UserInformations: "User Information";
  "DisplayName:IsDefault": "Default";
  "DisplayName:IsStatic": "Static";
  "DisplayName:IsPublic": "Public";
  Roles: "Roles";
  Password: "Password";
  PersonalInfo: "My profile";
  PersonalSettings: "Personal settings";
  UserDeletionConfirmationMessage: "Are you sure you want to delete the user '{0}'?";
  RoleDeletionConfirmationMessage: "Are you sure you want to delete the role '{0}'?";
  "DisplayName:RoleName": "Role name";
  "DisplayName:UserName": "User name";
  "DisplayName:Name": "Name";
  "DisplayName:Surname": "Surname";
  "DisplayName:Password": "Password";
  "DisplayName:Email": "Email";
  "DisplayName:PhoneNumber": "Phone number";
  "DisplayName:TwoFactorEnabled": "Two-factor authentication enabled";
  "DisplayName:IsActive": "Active";
  "DisplayName:LockoutEnabled": "Account lockout";
  NewRole: "New role";
  RoleName: "Role name";
  CreationTime: "Creation time";
  Permissions: "Permissions";
  "DisplayName:CurrentPassword": "Current password";
  "DisplayName:NewPassword": "New password";
  "DisplayName:NewPasswordConfirm": "Confirm new password";
  PasswordChangedMessage: "Your password has been changed successfully.";
  PersonalSettingsSavedMessage: "Your personal settings has been saved successfully.";
  "Volo.Abp.Identity:DefaultError": "An unknown failure has occurred.";
  "Volo.Abp.Identity:ConcurrencyFailure": "Optimistic concurrency check has been failed. The entity you're working on has modified by another user. Please discard your changes and try again.";
  "Volo.Abp.Identity:DuplicateEmail": "Email '{0}' is already taken.";
  "Volo.Abp.Identity:DuplicateRoleName": "Role name '{0}' is already taken.";
  "Volo.Abp.Identity:DuplicateUserName": "Username '{0}' is already taken.";
  "Volo.Abp.Identity:InvalidEmail": "Email '{0}' is invalid.";
  "Volo.Abp.Identity:InvalidPasswordHasherCompatibilityMode": "The provided PasswordHasherCompatibilityMode is invalid.";
  "Volo.Abp.Identity:InvalidPasswordHasherIterationCount": "The iteration count must be a positive integer.";
  "Volo.Abp.Identity:InvalidRoleName": "Role name '{0}' is invalid.";
  "Volo.Abp.Identity:InvalidToken": "Invalid token.";
  "Volo.Abp.Identity:InvalidUserName": "Username '{0}' is invalid, can only contain letters or digits.";
  InvalidUserName: "Username '{0}' is invalid.";
  "Volo.Abp.Identity:LoginAlreadyAssociated": "A user with this login already exists.";
  "Volo.Abp.Identity:PasswordMismatch": "Incorrect password.";
  "Volo.Abp.Identity:PasswordRequiresDigit": "Passwords must have at least one digit ('0'-'9').";
  "Volo.Abp.Identity:PasswordRequiresLower": "Passwords must have at least one lowercase ('a'-'z').";
  "Volo.Abp.Identity:PasswordRequiresNonAlphanumeric": "Passwords must have at least one non alphanumeric character.";
  "Volo.Abp.Identity:PasswordRequiresUpper": "Passwords must have at least one uppercase ('A'-'Z').";
  "Volo.Abp.Identity:PasswordTooShort": "Passwords must be at least {0} characters.";
  "Volo.Abp.Identity:PasswordRequiresUniqueChars": "Passwords must use at least {0} different characters.";
  "Volo.Abp.Identity:RoleNotFound": "Role {0} does not exist.";
  "Volo.Abp.Identity:UserAlreadyHasPassword": "User already has a password set.";
  "Volo.Abp.Identity:UserAlreadyInRole": "User already in role '{0}'.";
  "Volo.Abp.Identity:UserLockedOut": "User is locked out.";
  "Volo.Abp.Identity:UserLockoutNotEnabled": "Lockout is not enabled for this user.";
  "Volo.Abp.Identity:UserNameNotFound": "User {0} does not exist.";
  "Volo.Abp.Identity:UserNotInRole": "User is not in role '{0}'.";
  "Volo.Abp.Identity:PasswordConfirmationFailed": "Password does not match the confirm password.";
  "Volo.Abp.Identity:NullSecurityStamp": "User security stamp cannot be null.";
  "Volo.Abp.Identity:RecoveryCodeRedemptionFailed": "Recovery code redemption failed.";
  "Volo.Abp.Identity:010001": "You can not delete your own account!";
  "Volo.Abp.Identity:010002": "Can not set more than {MaxUserMembershipCount} organization unit for a user!";
  "Volo.Abp.Identity:010003": "Can not change password of an externally logged in user!";
  "Volo.Abp.Identity:010004": "There is already an organization unit with name {0}. Two units with same name can not be created in same level.";
  "Volo.Abp.Identity:010005": "Static roles can not be renamed.";
  "Volo.Abp.Identity:010006": "Static roles can not be deleted.";
  "Volo.Abp.Identity:010007": "You can't change your two factor setting.";
  "Volo.Abp.Identity:010008": "It's not allowed to change two factor setting.";
  "Volo.Abp.Identity:010009": "You can not delegate yourself.";
  "Volo.Abp.Identity:010021": "Name exist: '{0}'.";
  "Identity.OrganizationUnit.MaxUserMembershipCount": "Maximum allowed organization unit membership count for a user";
  ThisUserIsNotActiveMessage: "This user is not active.";
  "Permission:IdentityManagement": "Identity management";
  "Permission:RoleManagement": "Role management";
  "Permission:Create": "Create";
  "Permission:Edit": "Edit";
  "Permission:Delete": "Delete";
  "Permission:ChangePermissions": "Change permissions";
  "Permission:ManageRoles": "Managing roles";
  "Permission:UserManagement": "User management";
  "Permission:UserLookup": "User lookup";
  "DisplayName:Abp.Identity.Password.RequiredLength": "Required length";
  "DisplayName:Abp.Identity.Password.RequiredUniqueChars": "Required unique characters number";
  "DisplayName:Abp.Identity.Password.RequireNonAlphanumeric": "Required non-alphanumeric character";
  "DisplayName:Abp.Identity.Password.RequireLowercase": "Required lower case character";
  "DisplayName:Abp.Identity.Password.RequireUppercase": "Required upper case character";
  "DisplayName:Abp.Identity.Password.RequireDigit": "Required digit";
  "DisplayName:Abp.Identity.Password.ForceUsersToPeriodicallyChangePassword": "Force users to periodically change password";
  "DisplayName:Abp.Identity.Password.PasswordChangePeriodDays": "Password change period(days)";
  "DisplayName:Abp.Identity.Lockout.AllowedForNewUsers": "Enabled for new users";
  "DisplayName:Abp.Identity.Lockout.LockoutDuration": "Lockout duration(seconds)";
  "DisplayName:Abp.Identity.Lockout.MaxFailedAccessAttempts": "Max failed access attempts";
  "DisplayName:Abp.Identity.SignIn.RequireConfirmedEmail": "Require confirmed email";
  "DisplayName:Abp.Identity.SignIn.EnablePhoneNumberConfirmation": "Allow users to confirm their phone number";
  "DisplayName:Abp.Identity.SignIn.RequireConfirmedPhoneNumber": "Require confirmed phone number";
  "DisplayName:Abp.Identity.User.IsUserNameUpdateEnabled": "Allow users to change their usernames";
  "DisplayName:Abp.Identity.User.IsEmailUpdateEnabled": "Allow users to change their email addresses";
  "Description:Abp.Identity.Password.RequiredLength": "The minimum length a password must be.";
  "Description:Abp.Identity.Password.RequiredUniqueChars": "The minimum number of unique characters which a password must contain.";
  "Description:Abp.Identity.Password.RequireNonAlphanumeric": "If passwords must contain a non-alphanumeric character.";
  "Description:Abp.Identity.Password.RequireLowercase": "If passwords must contain a lower case ASCII character.";
  "Description:Abp.Identity.Password.RequireUppercase": "If passwords must contain a upper case ASCII character.";
  "Description:Abp.Identity.Password.RequireDigit": "If passwords must contain a digit.";
  "Description:Abp.Identity.Password.ForceUsersToPeriodicallyChangePassword": "Whether users are forced to periodically change their password.";
  "Description:Abp.Identity.Password.PasswordChangePeriodDays": "The number of days a user's password is valid for.";
  "Description:Abp.Identity.Lockout.AllowedForNewUsers": "Whether a new user can be locked out.";
  "Description:Abp.Identity.Lockout.LockoutDuration": "The duration a user is locked out for when a lockout occurs.";
  "Description:Abp.Identity.Lockout.MaxFailedAccessAttempts": "The number of failed access attempts allowed before a user is locked out, assuming lock out is enabled.";
  "Description:Abp.Identity.SignIn.RequireConfirmedEmail": "Whether a confirmed email address is required to sign in.";
  "Description:Abp.Identity.SignIn.EnablePhoneNumberConfirmation": "Whether the phoneNumber can be confirmed by the user.";
  "Description:Abp.Identity.SignIn.RequireConfirmedPhoneNumber": "Whether a confirmed telephone number is required to sign in.";
  "Description:Abp.Identity.User.IsUserNameUpdateEnabled": "Whether the username can be updated by the user.";
  "Description:Abp.Identity.User.IsEmailUpdateEnabled": "Whether the email can be updated by the user.";
  Details: "Details";
  CreatedBy: "Created by";
  ModifiedBy: "Modified by";
  ModificationTime: "Modification time";
  PasswordUpdateTime: "Password update time";
  LockoutEndTime: "Lockout end time";
  FailedAccessCount: "Failed access count";
  "Feature:IdentityGroup": "Identity";
  "Feature:TwoFactor": "Two factor behaviour";
  "Feature:TwoFactorDescription": "Disabled: No one can set two-factor, Required: All users must set two-factor, Optional: Users can set two-factor if they wish.";
  "Feature:TwoFactor.Optional": "Optional";
  "Feature:TwoFactor.Disabled": "Disabled";
  "Feature:TwoFactor.Forced": "Forced";
  "Feature:EnableLdapLogin": "LDAP login";
  "Feature:EnableLdapLoginDescription": "LDAP login";
  "Feature:EnableOAuthLogin": "OAuth login";
  "Feature:EnableOAuthLoginDescription": "OAuth login";
  "DisplayName:Abp.Identity.TwoFactorBehaviour": "Two factor behaviour";
  "Description:Abp.Identity.TwoFactorBehaviour": "Two factor behaviour";
  "DisplayName:Abp.Identity.UsersCanChange": "Allow users to change their Two Factor.";
  "Description:Abp.Identity.UsersCanChange": "Allow users to change their Two Factor.";
  "DisplayName:Abp.Identity.EnableLdapLogin": "Ldap Login";
  "Description:Abp.Identity.EnableLdapLogin": "Enable Ldap login";
  "DisplayName:Abp.Identity.EnableOAuthLogin": "OAuth login";
  "Description:Abp.Identity.EnableOAuthLogin": "Enable OAuth login";
  "DisplayName:Abp.Identity.Authority": "Authority";
  "Description:Abp.Identity.Authority": "Authority";
  "DisplayName:Abp.Identity.ClientId": "Client Id";
  "Description:Abp.Identity.ClientId": "Client Id";
  "DisplayName:Abp.Identity.ClientSecret": "Client secret";
  "Description:Abp.Identity.ClientSecret": "Client secret";
  "DisplayName:Abp.Identity.Scope": "Scope";
  "Description:Abp.Identity.Scope": "Scope";
  "DisplayName:Abp.Identity.RequireHttpsMetadata": "Require Https Metadata";
  "Description:Abp.Identity.RequireHttpsMetadata": "Require Https Metadata";
  "DisplayName:Abp.Identity.ValidateEndpoints": "Validate Endpoints";
  "Description:Abp.Identity.ValidateEndpoints": "Validate Endpoints";
  "DisplayName:Abp.Identity.ValidateIssuerName": "Validate Issuer Name";
  "Description:Abp.Identity.ValidateIssuerName": "Validate Issuer Name";
  "Feature:MaximumUserCount": "Maximum user count";
  "Feature:MaximumUserCountDescription": "Limits the number of users in the public registration and admin user creation screens. For unlimited users enter 0.";
  "Volo.Abp.Identity:010015": "Reached maximum allowed user count! This tenant is allowed to have a maximum of {MaxUserCount} users.";
  LdapPasswordPlaceholder: "Enter to update password";
  LdapLoginSettings: "Ldap Login Settings";
  OAuthLoginSettings: "OAuth Login Settings";
  "Menu:Identity:Ldap": "Ldap Account";
  IdentitySettingsLdap: "Ldap";
  IdentitySettingsOAuth: "OAuth";
  IdentitySettingsGeneral: "General";
  IdentitySettingsSessions: "Sessions";
  "DisplayName:Abp.Identity.PreventConcurrentLogin": "Prevent concurrent login";
  "Description:Abp.Identity.PreventConcurrentLogin": "Allow users to log in simultaneously from any platform or restrict them from having multiple sessions across different clients.";
  "Enum:IdentityProPreventConcurrentLoginBehaviour.Disabled": "Disabled";
  "Enum:IdentityProPreventConcurrentLoginBehaviour.LogoutFromSameTypeDevices": "Logout from same type devices";
  "Enum:IdentityProPreventConcurrentLoginBehaviour.LogoutFromAllDevices": "Logout from all devices";
  "Description:IdentityProPreventConcurrentLoginBehaviour.Disabled": "Users can stay logged in across multiple platforms.";
  "Description:IdentityProPreventConcurrentLoginBehaviour.LogoutFromSameTypeDevices": "Users can keep their sessions active only on different platforms. Only the most recent session is allowed on the same platform. For example, users cannot have 2 different web browser sessions.";
  "Description:IdentityProPreventConcurrentLoginBehaviour.LogoutFromAllDevices": "The system denies concurrent logins; therefore, users can only have 1 active session, which is the most recent one.";
  ClaimValueCanNotBeBlank: "Claim value can not be blank!";
  ClaimValue: "Value";
  Date: "Date";
  ThereIsNoUsersCurrentlyInThisRole: "There is no users currently in this role.";
  UserCount: "User Count";
  ThereIsNoUsersCurrentlyInThisOrganizationUnit: "There is no users currently in this organization unit.";
  ClaimValueIsInvalid: "Claim value '{0}' is invalid.";
  "Permission:ClaimManagement": "Claim management";
  "Permission:ViewChangeHistory": "View change history";
  "Permission:Impersonation": "Impersonation";
  "Permission:SettingManagement": "Setting management";
  "Permission:OrganizationUnitManagement": "Organization unit management";
  "Permission:ManageOU": "Managing organization tree";
  "Permission:ManageUsers": "Managing users";
  "Permission:SecurityLogs": "Security logs";
  "Permission:Import": "Import";
  "Menu:SecurityLogs": "Security logs";
  Lock: "Lock";
  Unlock: "Unlock";
  "UserLockoutNotEnabled{0}": "User '{0}' lockout is not enabled!";
  TwoFactor: "Two factor";
  HideShow: "Hide / Show";
  Name: "Name";
  UserInformation: "User information";
  ClaimTypes: "Claim types";
  "Roles{0}": "Roles ({0})";
  Members: "Members";
  OrganizationUnits: "Organization units";
  "OrganizationUnits{0}": "Org. units ({0})";
  "OrganizationUnit:Parent{0}": "Parent: {0}";
  "OrganizationUnit:Root": "Root unit";
  Type: "Type";
  Claims: "Claims";
  NewClaimType: "New claim type";
  ValueType: "Value type";
  Description: "Description";
  Required: "Required";
  Regex: "Regex";
  RegexDescription: "Regex description";
  RegexDescriptionFormText: "Use localization key";
  IsStatic: "Is Static";
  ClaimTypeDeletionConfirmationMessage: "Are you sure you want to delete the claim type '{0}'?";
  ChooseAnActionForRole: "There are {0} users assigned to the role you are trying to delete. Please choose an action for these users:";
  UnassignTheRoleFromTheUsers: "Unassign the role from the users";
  AssignUsersToOtherRole: "Assign users to another role";
  SelectAnRoleToAssign: "Select a role to assign";
  MoveAllUsers: "Move all users";
  MoveAllUsersWithRoleTo: "Move all users with <b>{0}</b> role to:";
  UnassignRole: "Unassign role";
  OrganizationUnitDeletionConfirmationMessage: "Are you sure you want to delete the organization unit '{0}'?";
  ChooseAnActionForOrganizationUnit: "There are {0} users assigned to the organization unit you are trying to delete. Please choose an action for these users:";
  UnassignTheOrganizationUnitFromTheUsers: "Unassign the organization unit from the users";
  AssignUsersToOtherOrganizationUnit: "Assign users to another organization unit";
  SelectAnOrganizationUnitToAssign: "Select an organization unit to assign";
  MoveAllUsersWithOrganizationUnitTo: "Move all users with <b>{0}</b> organization unit to:";
  UnassignOrganizationUnit: "Unassign organization unit";
  OrganizationUnitMoveSameParentMessage: "Can not move to the same parent!";
  SelectUsers: "Select users";
  SelectRoles: "Select roles";
  "DisplayName:AccessFailedCount": "Access failed count";
  "DisplayName:EmailConfirmed": "Email confirmed";
  "DisplayName:EmailAddress": "Email address";
  "DisplayName:PhoneNumberConfirmed": "Phone number confirmed";
  "DisplayName:ShouldChangePasswordOnNextLogin": "Force password change";
  "Description:ShouldChangePasswordOnNextLogin": "User must change the password at next login";
  UserMustChangePasswordAtNextLogin: "User must change the password at next login";
  "Description:LockoutEnabled": "Lock account after failed login attempts";
  "DisplayName:SendConfirmationEmail": "Send confirmation email";
  SelectAnOrganizationUnitToSeeMembers: "Select an organization unit to see members";
  SelectAnOrganizationUnitToSeeRoles: "Select an organization unit to see roles";
  RemoveUserFromOuWarningMessage: "Are you sure to you want to remove the user {0} from organization unit {1}?";
  RemoveRoleFromOuWarningMessage: "Are you sure to you want to remove the role {0} from organization unit {1}?";
  OrganizationTree: "Organization tree";
  AddRootUnit: "Add root unit";
  AddSubUnit: "Add sub-unit";
  AddRole: "Add role";
  AddMember: "Add member";
  LastModificationTime: "Last modification time";
  GenerateRandomPasswordTooltip: "Generate Random Password";
  PasswordStrengthSettings: "Password strength settings";
  PasswordRenewingSettings: "Password renewing settings";
  SetPassword: "Set password";
  PasswordsAreNotSame: "The given passwords are not equal.";
  UserNotFound: "User is not exist";
  LockoutSettings: "Lockout settings";
  SignInSettings: "Sign in settings";
  PasswordSettings: "Password settings";
  UserSettings: "User settings";
  "DisplayName:LockoutEnd": "Lockout end date";
  ThisUserIsLockedOutMessage: "This user is locked out. To unlock, please click Actions and then Unlock.";
  UserUnlocked: "User unlocked.";
  NotActive: "Not active";
  AddClaim: "Add claim";
  ClaimAlreadyExist: "The claim already exists";
  ChangeHistory: "Change history";
  LoginWithThisUser: "Log in with this user";
  NewOrganizationUnit: "New organization unit";
  DisplayName: "Display name";
  OrganizationUnitMoveConfirmMessage: "Are you sure you want to move '{0}' under '{1}'?";
  NoOrganizationUnits: "No organization units!";
  OrganizationUnitDuplicateDisplayNameWarning: "The organization display name already exists. Please write a different one.";
  SecurityLogs: "Security logs";
  "SecurityLogs:StartTime": "Start time";
  "SecurityLogs:EndTime": "End time";
  "SecurityLogs:Application": "Application";
  "SecurityLogs:ApplicationDescription": "Application name";
  "SecurityLogs:Identity": "Identity";
  "SecurityLogs:IdentityDescription": "Source of the logs. eg: Identity, IdentityExternal, IdentityServer, OpenIddict";
  "SecurityLogs:Action": "Action";
  "SecurityLogs:ActionDescription": "Security action. eg:LoginSucceeded, LoginFailed, Logout";
  "SecurityLogs:UserName": "Username";
  "SecurityLogs:Client": "Client";
  "SecurityLogs:CorrelationId": "Correlation Id";
  "SecurityLogs:Date": "Date";
  "SecurityLogs:IpAddress": "Ip Address";
  "SecurityLogs:Browser": "Browser";
  InvalidLinkToken: "Invalid link token";
  SelectedOrganizationUnit: "Selected organization unit";
  Move: "Move";
  MoveOrganizationUnit: "Move: {0}";
  SeeAdvancedFilters: "Advanced filters";
  Role: "Role";
  OrganizationUnit: "Organization unit";
  UserNameOrEmailAddress: "User name or email address";
  Provider: "Provider";
  NoExternalLoginProviderAvailable: "No external login provider available";
  ExternalUser: "External user";
  "Volo.Abp.Identity:010010": "Invalid external login provider";
  "Volo.Abp.Identity:010011": "External login provider authenticate failed";
  "Volo.Abp.Identity:010012": "Local user already exists";
  Import: "Import";
  True: "True";
  False: "False";
  Tenant: "Tenant";
  CreationStartDate: "Creation start date";
  CreationEndDate: "Creation end date";
  CreationDate: "Creation date";
  ModificationStartDate: "Modification start date";
  ModificationEndDate: "Modification end date";
  ModificationDate: "Modification date";
  EmailConfirmed: "Email confirmed";
  IsExternal: "External";
  External: "External";
  ViewDetails: "View details";
  "Permission:ViewDetails": "View details";
  Dash: "-";
  Export: "Export";
  ToExcel: "To Excel";
  ToCSV: "To CSV";
  UploadFile: "Upload file";
  ChooseFile: "Choose file";
  Upload: "Upload";
  ClickHereToDownloadSampleImportFile: "Click here to download sample import file";
  PleaseSelectFile: "Please Select File";
  DownloadTemplateFile: "Download template file";
  ImportSuccessMessage: "Import completed successfully.";
  ImportFailedMessage: "{1} users failed and {0} successful with the import. Do you want to download non-imported users?";
  "Permission:Export": "Export";
  "Volo.Abp.Identity:010013": "No user found in the file.";
  FromExcel: "From Excel";
  FromCSV: "From CSV";
  Active: "Active";
  PleaseSelectAFile: "Please select a file.";
  "Volo.Abp.Identity:010014": "Invalid import file format.";
  AuthorityDelegation: "Authority delegation";
  DelegateNewUser: "Delegate new user";
  DelegatedUsers: "Delegated users";
  MyDelegatedUsers: "My delegated users";
  DelegationDateRange: "Delegation date range";
  StartTime: "Start time";
  EndTime: "End time";
  Status: "Status";
  StatusActive: "Active";
  StatusExpired: "Expired";
  StatusFuture: "Future";
  "{0}IsStaticRoleCanNotBeRenamed": "{0} role is a static role can not be renamed";
  General: "General";
  "Permission:Sessions": "Sessions";
  Sessions: "Sessions";
  "Session:SessionId": "Session id";
  "Session:Current": "Current session";
  "Session:Device": "Device";
  "Session:DeviceInfo": "Device info";
  "Session:UserInfo": "User info";
  "Session:ClientId": "Client id";
  "Session:IpAddresses": "IP addresses";
  "Session:SignedIn": "Signed in date";
  "Session:LastAccessed": "Last access date";
  "Session:Detail": "Detail";
  "Session:Revoke": "Revoke";
  SessionRevokeConfirmationMessage: "Are you sure you want to revoke the session?";
};
export type AbpLdapResources = {
  "DisplayName:Abp.Ldap.Ldaps": "LDAP over SSL";
  "Description:Abp.Ldap.Ldaps": "LDAP over SSL";
  "DisplayName:Abp.Ldap.ServerHost": "Server host";
  "Description:Abp.Ldap.ServerHost": "Server host";
  "DisplayName:Abp.Ldap.ServerPort": "Server port";
  "Description:Abp.Ldap.ServerPort": "Server port";
  "DisplayName:Abp.Ldap.BaseDc": "Base domain component";
  "Description:Abp.Ldap.BaseDc": "Base domain component";
  "DisplayName:Abp.Ldap.Domain": "Domain";
  "Description:Abp.Ldap.Domain": "Domain";
  "DisplayName:Abp.Ldap.UserName": "Username";
  "Description:Abp.Ldap.UserName": "Username";
  "DisplayName:Abp.Ldap.Password": "Password";
  "Description:Abp.Ldap.Password": "Password";
};
export type AbpPermissionManagementResources = {
  Permissions: "Permissions";
  OnlyProviderPermissons: "Only this provider";
  All: "All";
  SelectAllInAllTabs: "Grant all permissions";
  SelectAllInThisTab: "Select all";
  SaveWithoutAnyPermissionsWarningMessage: "Are you sure you want to save without any permissions?";
};
export type AbpAccountResources = {
  "Volo.Account:InvalidEmailAddress": "Can not find the given email address:{0}";
  "Volo.Account:SelfRegistrationDisabled": "Self registration is disabled!";
  "Volo.Account:PhoneNumberEmpty": "Phone number is empty!";
  "Volo.Account:PhoneNumberConfirmationDisabled": "Phone number confirmation is disabled!";
  "Volo.Account:InvalidUserToken": "Invalid user token!";
  "Volo.Account:UnsupportedTwoFactorProvider": "Unsupported Two factor provider!";
  "Volo.Account:ImpersonateTenantOnlyAvailableForHost": "Impersonate tenant only available for host!";
  "Volo.Account:RequirePermissionToImpersonateTenant": "Require {PermissionName} permission to impersonate tenant!";
  "Volo.Account:ThereIsNoUserWithUserName": "There is no user with username: {UserName}!";
  "Volo.Account:YouCanNotImpersonateYourself": "You can't impersonate yourself!";
  "Volo.Account:NestedImpersonationIsNotAllowed": "Nested impersonation is not allowed!";
  "Volo.Account:RequirePermissionToImpersonateUser": "Require {PermissionName} permission to impersonate user!";
  "Volo.Account:ThereIsNoUserWithId": "There is no user with id:{UserId}!";
  "Volo.Account:InvalidAccessToken": "Invalid access_token!";
  "Volo.Account:InvalidTenantIdOrUserId": "Invalid TenantId or UserId!";
  "Volo.Account:InvalidUserDelegationId": "Invalid UserDelegationId!";
  "Volo.Account:DelegatedImpersonationIsDisabled": "Delegated impersonation is disabled!";
  "Volo.Account:UserDelegationIsNotAvailableForImpersonatedUsers": "User delegation is not available for impersonated users!";
  "Volo.Account:ImpersonateError": "Impersonate error!";
  "Volo.Account:StartTimeMustBeLessThanEndTime": "Start time must be less than end time!";
  DelegatedImpersonation: "Delegated impersonation";
  BackToImpersonator: "Back to my account";
  SwitchToUser: "Switch to user";
  ExpiresAt: "Expires at";
  AuthorityDelegation: "Authority delegation";
  DelegateNewUser: "Delegate new user";
  DelegatedUsers: "Delegated users";
  MyDelegatedUsers: "My delegated users";
  DelegationDateRange: "Delegation date range";
  AreYouSure: "Are you sure?";
  StartTime: "Start time";
  EndTime: "End time";
  Status: "Status";
  StatusActive: "Active";
  StatusExpired: "Expired";
  StatusFuture: "Future";
  DeleteUserDelegationConfirmationMessage: "Are you sure you want to delete this delegation '{0}'?";
  "AuthorityDelegation:PleaseSelectUser": "Please select a user";
  "AuthorityDelegation:PleaseSelectDelegationDateRange": "Please select a delegation date range";
  PasswordReset: "Password reset";
  PasswordResetInfoInEmail: "We received an account recovery request! If you initiated this request, click the following link to reset your password.";
  ResetMyPassword: "Reset my password";
  NotAMemberYet: "Not a member yet?";
  OrSignInWith: "Or sign in with";
  EmailConfirmation: "Email confirmation";
  EmailConfirmationInfoInEmail: "Please confirm your email address by clicking the following link.";
  ConfirmMyEmail: "Confirm my email address";
  UserName: "User name";
  EmailAddress: "Email address";
  UserNameOrEmailAddress: "User name or email address";
  Password: "Password";
  RememberMe: "Remember me";
  SelectedProvider: "Selected provider";
  UseAnotherServiceToLogin: "Use another service to log in";
  UserLockedOut: "Locked Out!";
  UserLockedOutMessage: "Your account has been locked by the admin or due to invalid login attempts. Please try again later. Contact your system administrator if you think this is a mistake.";
  InvalidUserNameOrPassword: "Invalid username or password!";
  LoginIsNotAllowed: "You are not allowed to login! Your account is inactive or needs to confirm your email/phone number.";
  SelfRegistrationDisabledMessage: "Self user registration is disabled for this application. Contact to the application administrator to register a new user.";
  VerifySecurityCodeNotLoggedInErrorMessage: "You should be login first, in order to verify yourself! Probably, your login has been timeout. Please go to the login page and re-try it.";
  InvalidSecurityCode: "Invalid security code!";
  EmailSecurityCodeBody: "Your security code is: {0}";
  EmailSecurityCodeSubject: "Security Code";
  VerifySecurityCode_Information: "Please enter the verification code sent to you.";
  SendSecurityCode_Information: "You should verify yourself to login. Please select a verification type. A code will be sent based on the selected verification type.";
  ForgotPassword: "Forgot password?";
  SendPasswordResetLink_Information: "A password reset link will be sent to your email to reset your password. If you don't get an email within a few minutes, please re-try.";
  PasswordResetMailSentMessage: "Account recovery email sent to your e-mail address. If you don't see this email in your inbox within 15 minutes, look for it in your junk mail folder. If you find it there, please mark it as -Not Junk-. ";
  PreventEmailEnumerationPasswordResetMailSentMessage: "If the provided e-mail address is registered in the system, we will send a password reset link. If you don't get an email within a few minutes, please check your spam box or try again later.";
  ResetPassword: "Reset Password";
  ConfirmPassword: "Confirm (repeat) the password";
  ResetPassword_Information: "Please enter your new password.";
  YourPasswordIsSuccessfullyReset: "Your password is successfully reset.";
  YourEmailAddressIsSuccessfullyConfirmed: "Your email address has been successfully confirmed.";
  MailSendingFailed: "Mail sending failed, Please check your email configuration and try again.";
  GoToTheHomePage: "Go to the home page";
  TwoFactorVerification: "Two factor verification";
  BackToLogin: "Back to login";
  AlreadyRegistered: "Already registered?";
  "Permission:Account": "Account";
  "Permission:SettingManagement": "Setting management";
  TwoFactorAuthentication: "Two Factor Authentication";
  "DisplayName:IsSelfRegistrationEnabled": "Enable self registration";
  "Description:IsSelfRegistrationEnabled": "Users can create accounts themselves.";
  "DisplayName:IsRememberBrowserEnabled": "Remember browser";
  "DisplayName:PreventEmailEnumeration": "Prevent email enumeration";
  "Description:PreventEmailEnumeration": "The 'Forgot my password' screen will not return whether the given email is registered in the system or not.";
  "Menu:Account": "Account";
  "Menu:Account.ExternalProvider": "Account external provider";
  AccountSettingsGeneral: "General";
  AccountSettingsTwoFactor: "Two factor";
  TwoFactorHasBeenDisabled: "Two factor has been disabled.";
  "DisplayName:CurrentPassword": "Current password";
  "DisplayName:NewPassword": "New password";
  "DisplayName:NewPasswordConfirm": "Confirm new password";
  PasswordChangedMessage: "Your password has been changed successfully.";
  "DisplayName:UserName": "User name";
  "DisplayName:Email": "Email";
  "DisplayName:Name": "Name";
  "DisplayName:Surname": "Surname";
  "DisplayName:Password": "Password";
  "DisplayName:EmailAddress": "Email address";
  "DisplayName:PhoneNumber": "Phone number";
  "DisplayName:Timezone": "Time zone";
  PersonalSettings: "Personal settings";
  PersonalSettingsSaved: "Personal settings saved";
  PersonalSettingsChangedConfirmationModalTitle: "Personal info changed";
  PersonalSettingsChangedConfirmationModalDescription: "If you want to apply these changes, you have to login. Do you want to log out?";
  PasswordChanged: "Password changed";
  TwoFactorChanged: "Two factor settings saved";
  "DisplayName:TwoFactorEnabled": "Two factor authentication enabled";
  TwoFactorEnabledInfo: "Two factor will be disabled if you remove all two factor providers.";
  YouHaveToEnableAtLeastOneTwoFactorProvider: "You have to enable at least one two factor provider to enable two factor!";
  NewPasswordConfirmFailed: "Please confirm the new password.";
  NewPasswordSameAsOld: "New password must be different from the old one.";
  Manage: "Manage";
  MyAccount: "My account";
  UserInformation: "User information";
  "DisplayName:EnableLocalLogin": "Authenticate with a local account";
  "Description:EnableLocalLogin": "Indicates if Server will allow users to authenticate with a local account.";
  "Feature:AccountGroup": "Account";
  DoYouWantToVerifyPhoneNumberMessage: "You've changed your phone number information. Would you like to verify it now?";
  InvalidPhoneConfirmationToken: "Verify code is invalid!";
  ConfirmYourPhoneNumber: "Verify your phone number";
  Verify: "Verify";
  Verified: "Verified";
  NotVerified: "Not verified";
  FirstlySubmitToVerify: "Firstly save your new information, then you can verify.";
  EmailConfirmationSentMessage: "A verification link has been sent to your email ({0}).";
  ConfirmationTokenSentMessage: "A verification code has been sent to your phone number.";
  PhoneConfirmationToken: "Please enter the code below to verify your phone number:";
  PhoneConfirmationSms: "Hi {0}! Here is your verification code: {1}";
  ConfirmUser: "Confirm your email/phone number";
  PhoneNumberEmptyHelpText: "You don't have a phone number, Verify will set it.";
  "TextTemplate:Abp.Account.Layout": "Account email layout";
  "TextTemplate:Abp.Account.PasswordResetLink": "Password reset email";
  "TextTemplate:Abp.Account.EmailConfirmationLink": "Email confirmation email";
  "TextTemplate:Abp.Account.EmailSecurityCode": "Email security code";
  LoggedOutTitle: "Signed Out";
  LoggedOutText: "You have been signed out and you will be redirected soon.";
  ReturnToText: "Click here to return to the application";
  MySecurityLogs: "Security logs";
  "MySecurityLogs:StartTime": "Start time";
  "MySecurityLogs:EndTime": "End time";
  "MySecurityLogs:Application": "Application";
  "MySecurityLogs:Identity": "Identity";
  "MySecurityLogs:Action": "Action";
  "MySecurityLogs:Client": "Client";
  "MySecurityLogs:Time": "Time";
  "MySecurityLogs:CorrelationId": "CorrelationId";
  "MySecurityLogs:IpAddress": "Ip address";
  "MySecurityLogs:Browser": "Browser";
  LoginToTheApplication: "Login to the application";
  RememberBrowser: "Remember this browser";
  Code: "Code";
  ProfilePicture: "Profile picture";
  MoveCursorOnExamples: "Move your cursor on images to see rounded style.";
  ProfilePictureWillBeChanged: "Your profile picture will be changed.";
  CurrentProfilePicture: "Current profile picture";
  ChangeProfilePicture: "Change profile picture";
  SelectNewImage: "Select new image";
  "DisplayName:UseGravatar": "Use Gravatar";
  "Description:UseGravatar": "Use Gravatar service for your profile picture.";
  SaveChanges: "Save changes";
  UploadFile: "Upload file";
  UseDefault: "Use default avatar";
  UseGravatarConfirm: "You will be using Gravatar as your profile picture.";
  NoProfilePictureConfirm: "You will use default avatar as your profile picture.";
  PPUploadConfirm: "You will use your selected image as your profile picture.";
  PleaseSelectImage: "Please select an image";
  UploadFailedMessage: "Upload failed!";
  "AccountPro:0001": "You must upload an image!";
  "ProfileTab:Picture": "Profile picture";
  "ProfileTab:Password": "Change password";
  "ProfileTab:PersonalInfo": "Personal info";
  "ProfileTab:TwoFactor": "Two factor authentication";
  "ProfileTab:AuthenticatorApp": "Authenticator app";
  "DisplayName:UseCaptchaOnLogin": "Use security image question (captcha) on login.";
  "Description:UseCaptchaOnLogin": "Use security image question (captcha) on login.";
  "DisplayName:UseCaptchaOnRegistration": "Use security image question (captcha) on registration.";
  "Description:UseCaptchaOnRegistration": "Use security image question (captcha) on registration.";
  Captcha: "Captcha";
  "DisplayName:VerifyBaseUrl": "Verify base url";
  "DisplayName:SiteKey": "Site key";
  "DisplayName:SiteSecret": "Site secret";
  "DisplayName:Version": "Version";
  "DisplayName:Score": "Score";
  InvalidSiteKeyOrSiteSecret: "Invalid site key or site secret";
  CaptchaCanNotBeEmpty: "Please check the reCAPTCHA box";
  IncorrectCaptchaAnswer: "Incorrect captcha answer";
  ScoreBelowThreshold: "Verification failed, score below threshold";
  SetNullWillUseGlobalSettings: "Leave as empty to use the defaults";
  ReturnToApplication: "Return to application";
  AccountExternalProviderSettings: "External provider";
  ExternalProviderUseHostSettings: "Use host settings";
  ExternalProviderEnabled: "Enabled";
  LinkedAccounts: "Linked accounts";
  LoginAsThisAccount: "Login as this account";
  DeleteLinkAccountConfirmationMessage: "Are you sure to delete the link account '{0}'?";
  NewLinkAccount: "New link account";
  NewLinkAccountWarning: "You'll be logged out from the current account and logging in with another account. Once you do it, two accounts will be linked.";
  TenantAndUserName: "User name";
  DirectlyLinked: "Directly linked";
  BackToMyAccount: "Back to: {0}";
  LinkLogged: "Accounts are linked";
  StayWithCurrentAccount: "Stay with the current account";
  ReturnToPreviousAccount: "Return to {0} account";
  TheTargetAccountIsNotLinkedToYou: "The target account is not linked to you!";
  LinkAccountWarning: 'Please note that you are linking to other accounts, <a href="{0}">Click here</a> to cancel the link login!';
  SavedSuccessfully: "Saved successfully";
  AccessDenied: "Access denied!";
  AccessDeniedMessage: "You do not have access to this resource.";
  RequestingYourPermission: "is requesting your permission";
  UncheckThePermissionsYouDoNotWishToGrant: "Uncheck the permissions you do not wish to grant.";
  ConsentPersonalInformation: "Personal information";
  ConsentApplicationAccess: "Application access";
  ScopeRequired: "required";
  RememberConsent: "Remember my decision";
  UserDecisionYes: "Yes, allow";
  UserDecisionNo: "No, do not allow";
  DeviceAuthorization: "Device authorization";
  UserCode: "User code";
  UserCodeInvalid: "UserCode invalid!";
  DeviceAuthorizationSuccessfully: "Success!";
  DeviceAuthorizationSuccessfullyInfo: "You have successfully authorized the device";
  LocalLoginIsNotEnabled: "Local login is not enabled!";
  SignIn: "Sign in";
  SignOut: "Sign out";
  Date: "Date";
  ResetAuthenticator: "Reset authenticator";
  ResetAuthenticator_Information: "If you would like to change your authenticator app, you can reset it here.";
  ResetAuthenticatorWarningMessage: "Reset your authenticator key your authenticator app will not work until you reconfigure it.";
  UseTwoFactorAuthenticatorApp_Information: "Open your two factor authentication app and do one of the following actions:";
  UseTwoFactorAuthenticatorApp_Code: "Your two-factor authentication application will generate a code, enter this code in the box below and confirm.";
  RecoveryCode: "Recovery code";
  RecoveryCodes: "Recovery codes";
  RecoveryCodes_Information: "Put these codes in a safe place. If you lose your device and don't have the recovery codes you will lose access to your account.";
  CopyToClipboard: "Copy to clipboard";
  PrintCodes: "Print codes";
  LoginWithRecoveryCode: "Login with recovery code";
  LoginWithRecoveryCode_Information: " You have requested to log in with a recovery code. 'Remember me' will not be enabled for this login until you provide an authenticator app code or disable 2FA and log in again.";
  LoginWithRecoveryCode_URL: "Don't have access to your authenticator device? You can log in with a recovery code";
  UseQrCode: "Use the QR Code";
  ManuallyEnterCode: "Or manually enter the code";
  TwoFactorAuthenticationProviders: "Two-Factor authentication providers";
  AuthenticatorApp: "Authenticator app";
  VerifyTheAuthenticator: "Verify the authenticator";
  Step: "Step {0}";
  NextStep: "Next step";
  Done: "Done";
  ShowPassword: "Show password";
  HidePassword: "Hide password";
  CapsLockOn: "Caps lock on";
  TakePhoto: "Take photo";
  ChoosePhoto: "Choose photo";
  Strength: "Strength";
  Weak: "Weak!";
  Fair: "Fair.";
  Normal: "Normal.";
  Good: "Good.";
  Strong: "Strong!";
  "Authentication:YouAreLoggedOut": "You are logged out.";
  OrRegisterWith: "Or register with";
  RegisterText: 'By clicking Register button, you agree to our <a href="/Account/TermsConditions" target="_blank" class="text-decoration-none" rel="noopener">Terms & Conditions</a> and <a href="/Account/Privacy" target="_blank" class="text-decoration-none" rel="noopener">Privacy Policy</a>.';
};
export type AbpEmailingResources = {
  "DisplayName:Abp.Mailing.DefaultFromAddress": "Default from address";
  "DisplayName:Abp.Mailing.DefaultFromDisplayName": "Default from display name";
  "DisplayName:Abp.Mailing.Smtp.Host": "Host";
  "DisplayName:Abp.Mailing.Smtp.Port": "Port";
  "DisplayName:Abp.Mailing.Smtp.UserName": "User name";
  "DisplayName:Abp.Mailing.Smtp.Password": "Password";
  "DisplayName:Abp.Mailing.Smtp.Domain": "Domain";
  "DisplayName:Abp.Mailing.Smtp.EnableSsl": "Enable SSL";
  "DisplayName:Abp.Mailing.Smtp.UseDefaultCredentials": "Use default credentials";
  "Description:Abp.Mailing.DefaultFromAddress": "The default from address";
  "Description:Abp.Mailing.DefaultFromDisplayName": "The default from display name";
  "Description:Abp.Mailing.Smtp.Host": "The name or IP address of the host used for SMTP transactions.";
  "Description:Abp.Mailing.Smtp.Port": "The port used for SMTP transactions.";
  "Description:Abp.Mailing.Smtp.UserName": "User name associated with the credentials.";
  "Description:Abp.Mailing.Smtp.Password": "The password for the user name associated with the credentials.";
  "Description:Abp.Mailing.Smtp.Domain": "The domain or computer name that verifies the credentials.";
  "Description:Abp.Mailing.Smtp.EnableSsl": "Whether the SmtpClient uses Secure Sockets Layer (SSL) to encrypt the connection.";
  "Description:Abp.Mailing.Smtp.UseDefaultCredentials": "Whether the DefaultCredentials are sent with requests.";
  "TextTemplate:StandardEmailTemplates.Layout": "Default email layout template";
  "TextTemplate:StandardEmailTemplates.Message": "Simple message template for emails";
};
export type AbpFeatureManagementResources = {
  Features: "Features";
  NoFeatureFoundMessage: "There isn't any available feature.";
  ManageHostFeatures: "Manage host features";
  ManageHostFeaturesText: "You can manage the host side features by clicking the following button.";
  "Permission:FeatureManagement": "Feature management";
  "Permission:FeatureManagement.ManageHostFeatures": "Manage host features";
  "Volo.Abp.FeatureManagement:InvalidFeatureValue": "{0} feature value is not valid!";
  "Menu:FeatureManagement": "Feature management";
  ResetToDefault: "Reset to default";
  ResetedToDefault: "Reseted to default";
  AreYouSure: "Are you sure?";
  AreYouSureToResetToDefault: "Are you sure to reset to default?";
};
export type PaymentResources = {
  Delete: "Delete";
  "DisplayName:Code": "Code";
  "DisplayName:CreationTime": "Creation time";
  "DisplayName:Count": "Count";
  "DisplayName:Currency": "Currency";
  "DisplayName:ExternalId": "External Id";
  "DisplayName:FailReason": "Fail Reason";
  "DisplayName:Gateway": "Gateway";
  "DisplayName:Name": "Name";
  "DisplayName:PaymentType": "Payment type";
  "DisplayName:State": "State";
  "DisplayName:TotalPrice": "Total price";
  "DisplayName:UnitPrice": "Unit price";
  "DisplayName:ExternalSubscriptionId": "External Subscription Id";
  Edit: "Edit";
  "Enum:PaymentRequestState:0": "Waiting";
  "Enum:PaymentRequestState:1": "Completed";
  "Enum:PaymentRequestState:2": "Failed";
  "Enum:PaymentRequestState:3": "Refunded";
  GatewayPlanDeletionConfirmationMessage: "The gateway plan will be deleted. Are you sure?";
  GatewayPlans: "Manage gateway plans";
  "Menu:PaymentManagement": "Payment";
  "Menu:PaymentRequests": "Payment requests";
  "Menu:Plans": "Payment plans";
  NewGatewayPlan: "New gateway plan";
  NewPlan: "New plan";
  "Payment:Request:0001": "Can't update existing External Plan Id";
  "PaymentRequests:Search": "Search";
  "PaymentRequests:CreationDateMax": "Fecha de creación máx.";
  "PaymentRequests:CreationDateMin": "Fecha de creación Min";
  "PaymentRequests:PaymentType": "Payment type";
  "PaymentRequests:Status": "Status";
  paypal: "PayPal";
  payu: "PayU";
  PayWithGateway: "Pay with {0}";
  "Permission:Payment": "Payment";
  "Permission:PaymentGatewayPlanManagement": "Payment gateway plan management";
  "Permission:PaymentGatewayPlanManagement.Create": "Create";
  "Permission:PaymentGatewayPlanManagement.Delete": "Delete";
  "Permission:PaymentGatewayPlanManagement.Update": "Update";
  "Permission:PaymentPlanManagement": "Payment plan management";
  "Permission:PaymentPlanManagement.Create": "Create";
  "Permission:PaymentPlanManagement.Delete": "Delete";
  "Permission:PaymentPlanManagement.Update": "Update";
  "Permission:PaymentRequests": "Payment requests";
  PlanDeletionConfirmationMessage: "The plan will be deleted. Are you sure?";
  Plans: "Plans";
  Products: "Products";
  Search: "Search";
  stripe: "Stripe";
  "two-checkout": "2Checkout";
  "Iyzico:NOT_SUFFICIENT_FUNDS": "You have not sufficient funds.";
  "Iyzico:DO_NOT_HONOUR": "Operation not approved.";
  "Iyzico:INVALID_TRANSACTION": "Invalid transaction.";
  "Iyzico:LOST_CARD": "The card has been marked as lost.";
  "Iyzico:STOLEN_CARD": "The card has been marked as stolen.";
  "Iyzico:EXPIRED_CARD": "The card has been expired.";
  "Iyzico:INVALID_CVC2": "Invalid CVC2.";
  "Iyzico:NOT_PERMITTED_TO_CARDHOLDER": "Operation not permitted to card holder.";
  "Iyzico:NOT_PERMITTED_TO_TERMINAL": "Operation not permitted to terminal.";
  "Iyzico:FRAUD_SUSPECT": "A fraud suspect has been identified.";
  "Iyzico:RESTRICTED_BY_LAW": "Your card is closed to e-commerce transactions. Please contact with your bank. ";
  "Iyzico:CARD_NOT_PERMITTED": "The card did not allow the transaction.";
  "Iyzico:UNKNOWN": "An error occurred while processing payment.";
  "Iyzico:INVALID_CVC2_LENGTH": "Invalid CVC2 length";
  "Iyzico:REFER_TO_CARD_ISSUER": "Need to receive approval by bank.";
  "Iyzico:INVALID_MERCHANT_OR_SP": "Invalid bank merchant category";
  "Iyzico:BLOCKED_CARD": "The card has been identified as blocked.";
  "Iyzico:INVALID_CAVV": "Invalid CAVV.";
  "Iyzico:INVALID_ECI": "Invalid ECI.";
  "Iyzico:BIN_NOT_FOUND": "Bin is not found.";
  "Iyzico:COMMUNICATION_OR_SYSTEM_ERROR": "Communication or system error has been occured.";
  "Iyzico:INVALID_CARD_NUMBER": "The card number is invalid.";
  "Iyzico:NO_SUCH_ISSUER": "Issuer could not found for the card.";
  "Iyzico:DEBIT_CARDS_REQUIRES_3DS": "Debit cards require 3D-Secure.";
  "Iyzico:REQUEST_TIMEOUT": "Request timeout.";
  "Iyzico:NOT_PERMITTED_TO_INSTALLMENT": "Installment option not allowed for the terminal.";
  "Iyzico:REQUIRES_DAY_END": "Requires day end";
  "Iyzico:RESTRICTED_CARD": "The card has been identified as restricted.";
  "Iyzico:EXCEEDS_ALLOWABLE_PIN_TRIES": "Max PIN tries exceeded.";
  "Iyzico:INVALID_PIN": "Invalid PIN.";
  "Iyzico:ISSUER_OR_SWITCH_INOPERATIVE": "Bank or terminal is not processing the operation.";
  "Iyzico:INVALID_EXPIRE_YEAR_MONTH": "Expiration year or month is invalid.";
  "Iyzico:INVALID_AMOUNT": "Invalid amount";
  "Iyzico:REFUND_NOT_ALLOWED_FOR_THIS_DEBIT_CARD": "There is not enough balance on the card. ";
  "Iyzico:APPROVED_COMPLETED": "This transaction has been already approved. ";
  "Iyzico:INVALID_CHARS_IN_EMAIL": "Email is not in valid format.";
  "Iyzico:CVC2_MAX_ATTEMPT": "Max CVC2 tries exceeded.";
  "Iyzico:DEBIT_CARDS_INSTALLMENT_NOT_ALLOWED": "Installments not allowed with debit cards. ";
  "Iyzico:DECLINED": "Payment not received.";
  "Iyzico:NOT_PERMITTED_TO_FOREIGN_CARD": "Terminal is closed to foreign/international cards.";
  "Iyzico:EXCEEDS_WITHDRAWAL_AMOUNT_LIMIT": "Withdrawal limit exceeded.";
  "Iyzico:REQUEST_BLOCKED_BY_BANK": "The request has been blocked by bank.";
  "Iyzico:SALES_AMOUNT_LESS_THAN_AWARD": "The sales amount cannot be lower than the award points.";
  "Iyzico:INVALID_CARD_TYPE": "Invalid card type.";
  "Iyzico:NOT_SUFFICIENT_AWARD": "Insufficient award points.";
  "Iyzico:AMEX_CAN_USE_ONLY_MR": "American Express (AMEX) card error.";
  PriceSubscriptionTooltip: "Subscription pricing is managed by payment gateway.";
  "PaymentType:OneTime": "One time";
  "PaymentType:Subscription": "Subscription";
};
export type SaasResources = {
  "Volo.Saas:DuplicateTenantName": "Tenant name already exists: {Name}";
  "Volo.Saas:DuplicateEditionDisplayName": "Edition display name already exists: {Name}";
  "Menu:Saas": "Saas";
  Tenants: "Tenants";
  NewTenant: "New tenant";
  EditTenant: "Edit tenant";
  TenantBaseInfo: "Base info";
  TenantName: "Tenant name";
  "DisplayName:TenantName": "Tenant name";
  TenantCount: "Tenant count";
  TenantDeletionConfirmationMessage: "Tenant '{0}' will be deleted. Do you confirm that?";
  EditionDeletionConfirmationMessage: "Edition '{0}' will be deleted. Do you confirm that?";
  ChooseAnAction: "There are {0} tenants assigned to the edition you are trying to delete. Please choose an action for these tenants:";
  UnassignTheEditionFromTheTenants: "Unassign the edition from the tenants";
  AssignTenantsToOtherEdition: "Assign tenants to other edition";
  SelectAnEditionToAssign: "Select an edition to assign";
  MoveAllTenants: "Move all tenants";
  ThereIsNoTenantsCurrentlyInThisEdition: "This edition has no tenants.";
  MoveAllTenantsWithEditionTo: "Move all tenants with <b>{0}</b> edition to:";
  UnassignEdition: "Unassign edition";
  ConnectionStrings: "Database connection strings";
  AddDatabaseConnectionString: "Add";
  "DisplayName:Default": "Default connection string";
  "DisplayName:DatabaseName": "Module";
  "DisplayName:ConnectionString": "Database connection string";
  "DisplayName:UseSharedDatabase": "Use the shared database";
  "DisplayName:UseSpecificDatabase": "Use module specific database connection string";
  "DisplayName:EditionId": "Edition";
  Edition: "Edition";
  Editions: "Editions";
  EditionEndDateUtc: "Edition expiration date (UTC)";
  NewEdition: "New edition";
  EditionName: "Edition name";
  Name: "Name";
  LatestTenants: "Latest tenants";
  EditionUsageStatistics: "Edition usage statistics";
  "DisplayName:AdminEmailAddress": "Tenant admin's email address";
  "DisplayName:AdminEmailAddressFormText": "Tenant's email cannot be changed after creation";
  "DisplayName:AdminPassword": "Tenant admin's password";
  "DisplayName:ActivationState": "Tenant activation state";
  "DisplayName:ActivationEndDate": "Tenant activation end date";
  "DisplayName:ExpirationDate": "Edition expiration date";
  ActivationState: "Activation state";
  "Enum:TenantActivationState.Active": "Active";
  "Enum:TenantActivationState.ActiveWithLimitedTime": "Active with limited time";
  "Enum:TenantActivationState.Passive": "Passive";
  ChangeHistory: "Change history";
  SetPassword: "Set password";
  LoginWithThisTenant: "Login with this tenant";
  ApplyDatabaseMigrations: "Apply database migrations";
  DatabaseMigrationQueuedAndWillBeApplied: "Database migration has been queued and will be applied soon.";
  "Saas:Edition:0001": "Edition doesn't have a plan!";
  "Saas:Edition:0002": "Unable to delete {EditionName}, It is in use by tenants.";
  PlanId: "Plan";
  PlanName: "Plan";
  SeeAdvancedFilters: "Advanced filters";
  ValidConnectionString: "The connection string is valid";
  InvalidConnectionString: "The connection string is not valid";
  CheckConnectionString: "Test";
  NoDataAvailable: "No data available";
  GenerateRandomPasswordTooltip: "Generate a random password or use your own";
  Password: "Password";
  UserName: "User name";
  UserNameTooltip: "Enter the user name you want to change for the tenant";
  GeneratePassword: "Generate password";
  EditionEndDateToolTip: "This date is managed by the external payment provider. It will be set automatically after payment and will be updated after each recurring payment.";
  Dash: "-";
  "Permission:Saas": "Saas";
  "Permission:TenantManagement": "Tenant management";
  "Permission:EditionManagement": "Edition management";
  "Permission:Create": "Create";
  "Permission:Edit": "Edit";
  "Permission:Delete": "Delete";
  "Permission:ManageConnectionStrings": "Manage connection strings";
  "Permission:SetPassword": "Set password";
  "Permission:ManageFeatures": "Manage features";
  "Permission:ViewChangeHistory": "View change history";
  "Permission:Impersonation": "Impersonation";
  CheckYourProviderDashboard: "Check your payment provider's dashboard to cancel this subscription.";
};
export type SaasServiceResources = {
  "Permission:SaasService": "Saas service";
  "Permission:CustomTenants": "CustomTenants";
  "Permission:Create": "Create";
};
export type AbpSettingManagementResources = {
  Settings: "Settings";
  SavedSuccessfully: "Saved successfully";
  "Permission:SettingManagement": "Setting management";
  "Permission:Emailing": "Emailing";
  "Permission:EmailingTest": "Emailing test";
  "Permission:TimeZone": "Time zone";
  SendTestEmail: "Send test email";
  SenderEmailAddress: "Sender email address";
  TargetEmailAddress: "Target email address";
  Subject: "Subject";
  Body: "Body";
  TestEmailSubject: "Test email {0}";
  TestEmailBody: "Test email body message here";
  SuccessfullySent: "Successfully sent";
  Send: "Send";
  "Menu:Emailing": "Emailing";
  "Menu:TimeZone": "Time Zone";
  "DisplayName:Timezone": "Time zone";
  TimezoneHelpText: "This setting is used for application-wide or tenant-based.";
  SmtpHost: "Host";
  SmtpPort: "Port";
  SmtpUserName: "User name";
  SmtpPassword: "Password";
  SmtpDomain: "Domain";
  SmtpEnableSsl: "Enable ssl";
  SmtpUseDefaultCredentials: "Use default credentials";
  DefaultFromAddress: "Default from address";
  DefaultFromDisplayName: "Default from display name";
  "Feature:SettingManagementGroup": "Setting management";
  "Feature:SettingManagementEnable": "Enable setting management";
  "Feature:SettingManagementEnableDescription": "Enable setting management system in the application.";
  "Feature:AllowChangingEmailSettings": "Allow changing email settings.";
  "Feature:AllowChangingEmailSettingsDescription": "Allow changing email settings.";
};
export type AbpAuditLoggingResources = {
  "Permission:AuditLogging": "Audit logging";
  "Permission:AuditLogs": "Audit logs";
  "Menu:AuditLogging": "Audit logs";
  AuditLogs: "Audit logs";
  HttpStatus: "HTTP status";
  HttpMethod: "HTTP method";
  HttpMethodFilter: "HTTP method filter";
  HttpRequest: "HTTP Request";
  User: "User";
  UserNameFilter: "User filter";
  HasException: "Has exception";
  IpAddress: "IP address";
  Time: "Time";
  Date: "Date";
  Duration: "Duration";
  Detail: "Detail";
  Overall: "Overall";
  Actions: "Actions";
  ClientIpAddress: "Client IP Address";
  ClientName: "Client Name";
  BrowserInfo: "Browser Info";
  Url: "URL";
  UserName: "User name";
  TenantImpersonator: "Tenant Impersonator";
  UserImpersonator: "User Impersonator";
  UrlFilter: "URL filter";
  Exceptions: "Exceptions";
  Comments: "Comments";
  HttpStatusCode: "HTTP status code";
  HttpStatusCodeFilter: "HTTP status code filter";
  ServiceName: "Service";
  MethodName: "Method";
  CorrelationId: "Correlation Id";
  ApplicationName: "Application name";
  ExecutionDuration: "Duration";
  ExtraProperties: "Extra properties";
  MaxDuration: "Max. duration";
  MinDuration: "Min. duration";
  MinMaxDuration: "Duration (Min. - Max.)";
  "{0}Milliseconds": "{0} milliseconds";
  ExecutionTime: "Time";
  Parameters: "Parameters";
  EntityTypeFullName: "Entity Type Full Name";
  Entity: "Entity";
  ChangeType: "Change type";
  ChangeTime: "Time";
  NewValue: "New value";
  OriginalValue: "Original value";
  PropertyName: "Property name";
  PropertyTypeFullName: "Property Type Full Name";
  Yes: "Yes";
  No: "No";
  Changes: "Changes";
  AverageExecutionDurationInLogsPerDay: "Average execution duration";
  AverageExecutionDurationInMilliseconds: "Average execution duration in milliseconds";
  ErrorRateInLogs: "Error rate in logs";
  Success: "Success";
  Fault: "Fault";
  NoChanges: "No change(s)";
  EntityChanges: "Entity changes";
  EntityId: "Entity Id";
  EntityChangeStartTime: "Min change date";
  EntityChangeEndTime: "Max change date";
  EntityHistory: "Entity history";
  DaysAgoTitle: "{0} {1}.";
  DaysAgoWithUserTitle: "{0} {1} by {2}.";
  Created: "Created";
  Updated: "Updated";
  Deleted: "Deleted";
  ChangeHistory: "Change history";
  FullChangeHistory: "Full change history";
  ChangeDetails: "Change details";
  DurationMs: "Duration (ms)";
  StartDate: "Start date";
  EndDate: "End date";
  "Feature:AuditLoggingGroup": "Audit logging";
  "Feature:AuditLoggingEnable": "Enable audit logging page";
  "Feature:AuditLoggingEnableDescription": "Enable audit logging page in the application.";
  "Feature:AuditLoggingSettingManagementEnable": "Enable audit log setting management";
  "Feature:AuditLoggingSettingManagementEnableDescription": "Enable the configuration of the audit log setting management within the application.";
  InvalidAuditLogDeletionSettings: "Invalid audit log deletion settings. If deletion is enable, the period should be greater than 0 days.";
  AuditLogSettingsGeneral: "General";
  AuditLogSettingsGlobal: "Global";
  "DisplayName:IsPeriodicDeleterEnabled": "Enable clean up service system wide";
  "Description:IsPeriodicDeleterEnabled": "If this option is disabled the periodic deleter won't work. Audit logs won't be deleted automatically.";
  "DisplayName:GlobalIsExpiredDeleterEnabled": "Enable clean up service for all tenants and host";
  "Description:GlobalIsExpiredDeleterEnabled": "If this option is enabled all the tenants and the host expired items will be deleted automatically unless it has a specific setting.";
  "DisplayName:IsExpiredDeleterEnabled": "Enable clean up service";
  "Description:IsExpiredDeleterEnabled": "If this option is enabled the expired items will be deleted automatically.";
  "DisplayName:ExpiredDeleterPeriod": "Expired item deletion period";
  "Description:ExpiredDeleterPeriod": "Set the number of days after which expired items will be automatically deleted.";
  ExpiredDeleterPeriodUnit: "day(s)";
  AuditLogsBeforeXWillBeDeleted: "Audit logs before {0} will be deleted.";
};
export type LanguageManagementResources = {
  LanguageManagement: "Language Management";
  Languages: "Languages";
  OnlyEmptyValues: "Only empty values";
  All: "All";
  BaseValue: "Base value";
  LanguageTexts: "Language texts";
  BaseCultureName: "Base culture name";
  BaseCultureValue: "Base culture value";
  TargetCultureValue: "Target culture value";
  TargetCultureName: "Target culture name";
  CultureName: "Culture name";
  UiCultureName: "UI culture name";
  ResourceName: "Resource name";
  RestoreToDefault: "Restore to default";
  SaveAndNext: "Save And Next";
  TargetValue: "Target value";
  Value: "Value";
  Key: "Key";
  Edit: "Edit";
  CreateNewLanguage: "Create new language";
  Delete: "Delete";
  DisplayName: "Display name";
  IsEnabled: "Enabled";
  SetAsDefaultLanguage: "Set as default language";
  DefaultLanguage: "Default language";
  "Menu:Languages": "Language management";
  LanguageDeletionConfirmationMessage: "'{0}' language will be deleted. Do you confirm that?";
  DefaultLanguageDeletionConfirmationMessage: "Default language '{0}' will be deleted. Do you confirm that?";
  Filter: "Filter";
  "Feature:LanguageManagementGroup": "Language management";
  "Feature:LanguageManagementEnable": "Enable language management";
  "Feature:LanguageManagementEnableDescription": "Enable language management system in the application.";
  "Volo.Abp.LanguageManagement:010001": "Culture name {CultureName} already exists.";
  NewLanguageMightRequireRestartInformation: "The web application may need to be restarted for the new language to be fully applied.";
  LanguageDisplayNameInfoText: "if the display name is not specified then the culture name will be used instead";
  "Permission:LanguageManagement": "Language management";
  "Permission:LanguageTexts": "Language texts";
  "Permission:LanguageTextsEdit": "Edit language texts";
  "Permission:Languages": "Languages";
  "Permission:LanguagesEdit": "Edit language";
  "Permission:LanguagesCreate": "Create language";
  "Permission:LanguagesChangeDefault": "Change default language";
  "Permission:LanguagesDelete": "Delete language";
};
export type TextTemplateManagementResources = {
  "Menu:TextTemplates": "Text templates";
  "Menu:TextTemplates:TemplateDefinitions": "Template definitions";
  "Permission:TextTemplateManagement": "Text template management";
  "Permission:TextTemplates": "Text templates";
  "Permission:EditContents": "Edit contents";
  TemplateContents: "Template contents";
  Name: "Name";
  Layout: "Layout";
  IsLayout: "Is Layout";
  LocalizationResource: "Localization resource";
  DefaultCultureName: "Default culture name";
  Contents: "Contents";
  SeeContents: "See contents";
  EditContents: "Edit contents";
  BaseCultureName: "Reference culture name";
  TargetCultureName: "Target culture name";
  BaseContent: "Reference content";
  TargetContent: "Target content";
  SaveContent: "Save content";
  RestoreToDefault: "Restore to default";
  RestoreToDefaultMessage: "Are you sure? This action will convert the content to the default value.";
  IsInlineLocalized: "Inline localized";
  Success: "Success";
  TemplateContentUpdated: "Template content updated successfully.";
  TemplateContentRestoredToDefault: "Template content restored to the default value.";
  TemplateContent: "Template content";
  InlineContentDescription: 'This template uses inline localization. You can use the <b>L</b> function to localize a text, like <b>{{L "Hello"}}</b>. If you still want to define a completely new template for a culture, use the "Customize per culture" button. <br /> To get more information about syntax and other details, please check the <a href="https://docs.abp.io/en/abp/latest/Text-Templating" target="_blank">Text Templates documentation</a>.';
  CustomizePerCulture: "Customize per culture";
  DisplayName: "Display name";
  Search: "Search";
  ReturnToTemplates: "Return to templates";
  "Feature:TextManagementGroup": "Text template management";
  "Feature:TextManagementEnable": "Enable text template management";
  "Feature:TextManagementEnableDescription": "Enable text management system in the application.";
};
export type AbpGdprResources = {
  "Volo.Abp.Gdpr:010001": "You have previously requested to download personal data. Once the given request time period has passed, you can create a new one.";
  "Volo.Abp.Gdpr:010002": "Your personal data is still being prepared. You can download it at {GdprDataReadyTime}.";
  PersonalData: "Personal Data";
  "Menu:PersonalData": "Personal data";
  PersonalDataDescription: "Your account contains the personal data that you have given us. This page allows you to download or delete that data.";
  RequestPersonalData: "Request Personal Data";
  DeletePersonalData: "Delete Personal Data";
  CreationTime: "Creation Time";
  Action: "Action";
  Preparing: "Preparing";
  Download: "Download";
  ReadyTime: "Ready Time";
  DeletePersonalDataWarning: "Deleting this data will remove your account and you will no longer log in to the application! Are you sure you want to proceed?";
  PersonalDataDeleteRequestReceived: "Your personal data delete request is being processed... At the end of the data deletion process, your account will be deleted and you will no longer be able to use it.";
  PersonalDataPrepareRequestReceived: "Your personal data request is being processed. You can download it from this page, once it's ready!";
  NoDataAvailable: "No data is available.";
  Accept: "Accept";
  CookiePolicy: "Cookie Policy";
  PrivacyPolicy: "Privacy Policy";
  ThisWebsiteUsesCookie: "This website uses cookies to ensure you get the best experience on the website.";
  CookieConsentAgreePolicies: "If you continue to browse, then you agree to our {0} and {1}.";
  CookieConsentAgreePolicy: "If you continue to browse, then you agree to our {0}.";
  CanNotGetDownloadToken: "You can't get a download token for this request!";
};
export type AdministrationServiceResources = {
  "Permission:Dashboard": "Dashboard";
  CountrySettings: "Country Settings";
  "CountryManagement.InputExample.DisplayName": "Input Example";
  "CountryManagement.InputExample.NumericInputExample.DisplayName": "Numeric Input";
  "CountryManagement.InputExample.NumericInputExample.SubItemExample.DisplayName": "Sub Item Example";
  "CountryManagement.InputExample.StringInputExample.DisplayName": "String Input";
  "CountryManagement.InputExample.ToggleInputExample.DisplayName": "Toggle Input";
  "CountryManagement.InputExample.SelectableInputExample.DisplayName": "Selectable Input";
  "CountryManagement.InputExample.SelectableInputExample.ValueType.Item0.DisplayText.Name.Optional": "Optional";
  "CountryManagement.InputExample.SelectableInputExample.ValueType.Item1.DisplayText.Name.Disabled": "Disabled";
  "CountryManagement.InputExample.SelectableInputExample.ValueType.Item2.DisplayText.Name.Forced": "Forced";
  "CountryManagement.IssuingFieldManagement.DisplayName": "Issuing Field Management";
  "CountryManagement.IssuingFieldManagement.CountryOfResidence.DisplayName": "Country Of Residence";
  "CountryManagement.IssuingFieldManagement.CountryOfResidence.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.DateOfBirth.DisplayName": "Date Of Birth";
  "CountryManagement.IssuingFieldManagement.DateOfBirth.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.DateOfBirth.MinimumTravellerAge.DisplayName": "Minimum Traveller Age";
  "CountryManagement.IssuingFieldManagement.Factura.DisplayName": "Factura";
  "CountryManagement.IssuingFieldManagement.Factura.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.FormAlertAmount.DisplayName": "Form Alert Amount";
  "CountryManagement.IssuingFieldManagement.FormAlertFactor.DisplayName": "Form Alert Factor";
  "CountryManagement.IssuingFieldManagement.FormRefillFactor.DisplayName": "Form Refill Factor";
  "CountryManagement.IssuingFieldManagement.IsMinSalesAmountNetto.DisplayName": "Is Min Sales Amount Netto";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.DisplayName": "Issued Form Validity Term";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.StartingNextMonth.DisplayName": "Starting Next Month";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.TimeRange.DisplayName": "Time Range";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.TimeRange.ValueType.Item0.DisplayText.Name.Days": "Days";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.TimeRange.ValueType.Item1.DisplayText.Name.Months": "Months";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.Value.DisplayName": "Value";
  "CountryManagement.IssuingFieldManagement.MaxNumberOfFactura.DisplayName": "Max Number Of Factura";
  "CountryManagement.IssuingFieldManagement.MinimumSalesAmount.DisplayName": "Minimum Sales Amount";
  "CountryManagement.IssuingFieldManagement.MinimumSalesAmount.PerFactura.DisplayName": "Per Factura";
  "CountryManagement.IssuingFieldManagement.MinimumSalesAmount.PerVAT.DisplayName": "Per VAT";
  "CountryManagement.IssuingFieldManagement.Name.DisplayName": "Name";
  "CountryManagement.IssuingFieldManagement.Name.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.Nationality.DisplayName": "Nationality";
  "CountryManagement.IssuingFieldManagement.Nationality.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.Packages.DisplayName": "Packages";
  "CountryManagement.IssuingFieldManagement.Passport.DisplayName": "Passport";
  "CountryManagement.IssuingFieldManagement.Passport.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.PhoneNumber.DisplayName": "Phone Number";
  "CountryManagement.IssuingFieldManagement.PhoneNumber.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.ReceiptDate.DisplayName": "Receipt Date";
  "CountryManagement.IssuingFieldManagement.ReceiptDate.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.ReceiptDate.ValidityDays.DisplayName": "Validity Days";
  "CountryManagement.IssuingFieldManagement.Sticker.DisplayName": "Sticker";
  "CountryManagement.IssuingFieldManagement.Sticker.MakeMandatory.DisplayName": "Make Mandatory";
  "CountryManagement.IssuingFieldManagement.UniRefundVoucher.DisplayName": "UniRefund Voucher";
  "CountryManagement.IssuingFieldManagement.VATValidation.DisplayName": "VAT Validation";
  "CountryManagement.IssuingFieldManagement.VATValidationMaxDifference.DisplayName": "VAT Validation Max Difference";
  "CountryManagement.Contracts.DisplayName": "Contracts";
  "CountryManagement.Contracts.TRNMoveWithAllUnclaimedTags.DisplayName": "TRN Move With All Unclaimed Tags";
  "CountryManagement.Services.DisplayName": "Services";
  "CountryManagement.Services.Exchange.DisplayName": "Exchange";
  "CountryManagement.Services.TourGuide.DisplayName": "Tour Guide";
  "CountryManagement.Services.EligibilityService.DisplayName": "Eligibility Service";
  "CountryManagement.Services.EligibilityService.EligibilityCheckResultValidityHours.DisplayName": "Eligibility Check Result Validity Hours";
  "CountryManagement.Services.AllowEligibilityComplaint.DisplayName": "AllowEligibilityComplaint";
  "CountryManagement.Invoicing.DirectDebit.DisplayName": "Direct Debit";
  "CountryManagement.Invoicing.DisplayName": "Invoicing";
  "CountryManagement.Invoicing.InvoiceSaleType.DisplayName": "Invoice Sale Type";
  "CountryManagement.Invoicing.InvoicingExported.DisplayName": "Invoicing Exported";
  "CountryManagement.Invoicing.MinAmountOfRebate.DisplayName": "Min Amount Of Rebate";
  "CountryManagement.Invoicing.MinInvoiceAmountOfETaxFree.DisplayName": "Min Invoice Amount Of E-Tax Free";
  "CountryManagement.Invoicing.OverdueInterest.DisplayName": "Overdue Interest";
  "CountryManagement.Invoicing.Rebate.DisplayName": "Rebate";
  "CountryManagement.Invoicing.RebateInvoicing.DisplayName": "Rebate Invoicing";
  "CountryManagement.Invoicing.RebateInvoicing.ValueType.Item0.DisplayText.Name.None": "None";
  "CountryManagement.Invoicing.RebateInvoicing.ValueType.Item1.DisplayText.Name.Advice": "Advice";
  "CountryManagement.Invoicing.RebateInvoicing.ValueType.Item2.DisplayText.Name.SelfBillingInvoice": "Self Billing Invoice";
  "CountryManagement.Invoicing.RebateInvoicing.ValueType.Item3.DisplayText.Name.Both": "Both";
  "CountryManagement.Invoicing.RopoInvoiceService.DisplayName": "Ropo Invoice Service";
  "CountryManagement.Invoicing.InvoiceSaleType.ValueType.Item0.DisplayText.Name.SingleSale": "Single Sale";
  "CountryManagement.Invoicing.InvoiceSaleType.ValueType.Item1.DisplayText.Name.DoubleSale": "Double Sale";
  "CountryManagement.Report.DisplayName": "Report";
  "CountryManagement.Report.HideTouristInformationForExternal.DisplayName": "Hide Tourist Information For External";
  "CountryManagement.Report.ShowDailyReportTopBadge.DisplayName": "Show Daily Report Top Badge";
  "CountryManagement.ExportValidation.DigitalValidation.DisplayName": "Digital Validation";
  "CountryManagement.ExportValidation.DisplayName": "Export Validation";
  "CountryManagement.ExportValidation.ExportedFormValidityTermMonths.DisplayName": "Exported Form Validity Term Months";
  "CountryManagement.ExportValidation.ExtendedExportValidation.DisplayName": "Extended Export Validation";
  "CountryManagement.ExportValidation.FlightTimeWindowAtEarlyValidationHours.DisplayName": "Flight Time Window At Early Validation Hours";
  "CountryManagement.ExportValidation.FlightTimeWindowHours.DisplayName": "Flight Time Window Hours";
  "CountryManagement.ExportValidation.PhysicalStamp.DisplayName": "Physical Stamp";
  "CountryManagement.ExportValidationTablet.AllowIssue.DisplayName": "Allow Issue";
  "CountryManagement.ExportValidationTablet.ConfirmValidID.DisplayName": "Confirm Valid ID";
  "CountryManagement.ExportValidationTablet.DisplayName": "Export Validation Tablet";
  "CountryManagement.ExportValidationTablet.ExportValidationTablet.DisplayName": "Export Validation Tablet";
  "CountryManagement.ExportValidationTablet.HidePreIssuedTransactions.DisplayName": "Hide Pre-Issued Transactions";
  "CountryManagement.ExportValidationTablet.ManualValidation.DisplayName": "Manual Validation";
  "CountryManagement.ExportValidationTablet.ShowCountryOfResidence.DisplayName": "Show Country Of Residence";
  "CountryManagement.ExportValidationTablet.ShowDateOfBirth.DisplayName": "Show Date Of Birth";
  "CountryManagement.ExportValidationTablet.ShowName.DisplayName": "Show Name";
  "CountryManagement.ExportValidationTablet.ShowNationality.DisplayName": "Show Nationality";
  "CountryManagement.ExportValidationTablet.ShowPhotoReminderAbove.DisplayName": "Show Photo Reminder Above";
  "CountryManagement.ExportValidationTablet.TopApproveReasons.DisplayName": "Top Approve Reasons";
  "CountryManagement.ExportValidationTablet.TopDeclineReasons.DisplayName": "Top Decline Reasons";
  "CountryManagement.Refund.AllowedCardSchemas.AmericanExpress.DisplayName": "American Express Allowed Card Schemas";
  "CountryManagement.Refund.AllowedCardSchemas.DisplayName": "Allowed Card Schemas";
  "CountryManagement.Refund.AllowedCardSchemas.JCB.DisplayName": "JCB Allowed Card Schemas";
  "CountryManagement.Refund.AllowedCardSchemas.MasterCard.DisplayName": "MasterCard Allowed Card Schemas";
  "CountryManagement.Refund.AllowedCardSchemas.UnionPay.DisplayName": "UnionPay Allowed Card Schemas";
  "CountryManagement.Refund.AllowedCardSchemas.VISA.DisplayName": "VISA Allowed Card Schemas";
  "CountryManagement.Refund.Bundling.DisplayName": "Bundling";
  "CountryManagement.Refund.CountriesRestrictedForCreditCards.DisplayName": "Countries Restricted For Credit Cards";
  "CountryManagement.Refund.DisplayName": "Refund";
  "CountryManagement.Refund.EInvoice.DisplayName": "E-Invoice";
  "CountryManagement.Refund.RequireCompletedValidation.DisplayName": "Require Completed Validation";
  "CountryManagement.Refund.RequireDeparture.DisplayName": "Require Departure";
  "CountryManagement.Refund.Rounding.DisplayName": "Rounding";
  "CountryManagement.Refund.Rounding.ValueType.Item0.DisplayText.Name.None": "None";
  "CountryManagement.Refund.Rounding.ValueType.Item1.DisplayText.Name.RoundingTo0point05": "Rounding to 0.05";
  "CountryManagement.Refund.Rounding.ValueType.Item2.DisplayText.Name.RoundingTo0point1": "Rounding to 0.1";
  "CountryManagement.Refund.Rounding.ValueType.Item3.DisplayText.Name.RoundingTo0point5": "Rounding to 0.5";
  "CountryManagement.Refund.Rounding.ValueType.Item4.DisplayText.Name.RoundingTo1": "Rounding to 1";
  "CountryManagement.Refund.Rounding.ValueType.Item5.DisplayText.Name.RoundingTo1HalfAwayFromZero": "Rounding to 1 half away from zero";
  "CountryManagement.Refund.Rounding.ValueType.Item6.DisplayText.Name.RoundingDownTo0point5": "Rounding down to 0.5";
  "CountryManagement.Refund.Rounding.ValueType.Item7.DisplayText.Name.RoundingDownTo1": "Rounding down to 1";
  "CountryManagement.Refund.Rounding.ValueType.Item8.DisplayText.Name.NoRounding": "No rounding";
  "CountryManagement.Refund.TPPClientCode.DisplayName": "TPP Client Code";
  "CountryManagement.RefundMethodSettings.Alipay.DisplayName": "Alipay";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Currency.DisplayName": "Landside Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.DisplayName": "Landside Refund Limit";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Value.DisplayName": "Landside Refund Limit Value";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.XR.DisplayName": "Landside Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Currency.DisplayName": "Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.DisplayName": "Refund Limit";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Value.DisplayName": "Refund Limit Value";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.XR.DisplayName": "Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.Cash.DisplayName": "Cash";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Currency.DisplayName": "Landside Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.DisplayName": "Landside Refund Limit";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Value.DisplayName": "Landside Refund Limit Value";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.XR.DisplayName": "Landside Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Currency.DisplayName": "Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.DisplayName": "Refund Limit";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Value.DisplayName": "Refund Limit Value";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.XR.DisplayName": "Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.CashViaPartner.DisplayName": "Cash Via Partner";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Currency.DisplayName": "Landside Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.DisplayName": "Landside Refund Limit";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Value.DisplayName": "Landside Refund Limit Value";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.XR.DisplayName": "Landside Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Currency.DisplayName": "Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.DisplayName": "Refund Limit";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Value.DisplayName": "Refund Limit Value";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.XR.DisplayName": "Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.DisplayName": "Credit Or Debit Card";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Currency.DisplayName": "Landside Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.DisplayName": "Landside Refund Limit";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Value.DisplayName": "Landside Refund Limit Value";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.XR.DisplayName": "Landside Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Currency.DisplayName": "Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.DisplayName": "Refund Limit";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Value.DisplayName": "Refund Limit Value";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.XR.DisplayName": "Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.DisplayName": "Refund Method Settings";
  "CountryManagement.RefundMethodSettings.RefundLater.DisplayName": "Refund Later";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Currency.DisplayName": "Landside Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.DisplayName": "Landside Refund Limit";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Value.DisplayName": "Landside Refund Limit Value";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.XR.DisplayName": "Landside Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Currency.DisplayName": "Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.DisplayName": "Refund Limit";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Value.DisplayName": "Refund Limit Value";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.XR.DisplayName": "Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.WeChat.DisplayName": "WeChat";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Currency.ValueType.Item0.DisplayText.Name.-": "-";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Currency.ValueType.Item1.DisplayText.Name.EUR": "EUR";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Currency.ValueType.Item2.DisplayText.Name.USD": "USD";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Currency.ValueType.Item3.DisplayText.Name.TRY": "TRY";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Currency.ValueType.Item4.DisplayText.Name.CNY": "CNY";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Currency.DisplayName": "Landside Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.DisplayName": "Landside Refund Limit";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Value.DisplayName": "Landside Refund Limit Value";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.XR.DisplayName": "Landside Refund Limit Exchange Rate";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Currency.DisplayName": "Refund Limit Currency";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.DisplayName": "Refund Limit";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Value.DisplayName": "Refund Limit Value";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.XR.DisplayName": "Refund Limit Exchange Rate";
  "CountryManagement.ExportValidationKiosk.DisplayName": "Export Validation Kiosk";
  "CountryManagement.ExportValidationKiosk.HidePreIssuedTransactionsInEVK.DisplayName": "Hide Pre-Issued Transactions In EVK";
  "CountryManagement.CityValidationKiosk.DisplayName": "City Validation Kiosk";
  "CountryManagement.CityValidationKiosk.HidePreIssuedTransactionsInCVK.DisplayName": "Hide Pre-Issued Transactions In CVK";
  "CountryManagement.InputExample.NumericInputExample.SubItemExample.DeepSubItem.DisplayName": "Deep Sub Item";
  "CountryManagement.InputExample.NumericInputExample.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.AllowIssue.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ConfirmValidID.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.DigitalValidation.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ExportValidationTablet.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ExtendedExportValidation.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.HidePreIssuedTransactions.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ManualValidation.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.Passport.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.PhysicalStamp.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ShowCountryOfResidence.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ShowDateOfBirth.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ShowName.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ShowNationality.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.ExportValidation.ShowPhotoReminderAbove.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.CountryOfResidence.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.DateOfBirth.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.Factura.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.IsMinSalesAmountNetto.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.Name.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.Nationality.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.Packages.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.Passport.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.PhoneNumber.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.ReceiptDate.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.UniRefundVoucher.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.IssuingFieldManagement.VATValidation.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.Refund.Bundling.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.Refund.EInvoice.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.Refund.Passport.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.Refund.RequireCompletedValidation.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.Refund.RequireDeparture.IsApplicable.DisplayName": "Is Applicable";
  "CountryManagement.InputExample.NumericInputExample.Description": "It's a test input to show a Numeric Input Example";
  "CountryManagement.InputExample.SelectableInputExample.Description": "It's a test input to show a Selectable Input Example";
  "CountryManagement.InputExample.StringInputExample.Description": "It's a test input to show a String Input Example";
  "CountryManagement.InputExample.ToggleInputExample.Description": "It's a test input to show a Toggle Input Example";
  "CountryManagement.IssuingFieldManagement.CountryOfResidence.MakeMandatory.Description": "If traveller's country of residence is required while issuing.";
  "CountryManagement.IssuingFieldManagement.DateOfBirth.MakeMandatory.Description": "If traveller's birthdate is required while issuing.";
  "CountryManagement.IssuingFieldManagement.DateOfBirth.MinimumTravellerAge.Description": "Minimum age a traveller should be to be eligible to shop Tax Free. Leave empty or 0 (zero) if you don't want to apply the rule.";
  "CountryManagement.IssuingFieldManagement.Factura.MakeMandatory.Description": "If purchase's receipt is required while issuing.";
  "CountryManagement.IssuingFieldManagement.FormAlertFactor.Description": "Factor of form which needs confirmation when reached.Example:Factor is 2 - Merchant store average sales is 1000€ then sales amount of 2000€ triggers confirmation.";
  "CountryManagement.IssuingFieldManagement.FormRefillFactor.Description": "Factor of form which needs refill sales amount when reached.Example:Factor is 5 - Merchant store average sales is 1000€ then sales amount of 5000€ triggers refill of sales amount.";
  "CountryManagement.IssuingFieldManagement.IsMinSalesAmountNetto.Description": "Defines if minimum sales amount is calculated wth/without VAT. If true, Minimum amount of the purchase to should be calculated from netto sales amount. If false then, Minimum amount of the purchase to should be calculated from brutto sales amount.";
  "CountryManagement.IssuingFieldManagement.IssuedFormValidityTerm.Description": "Defines for how long the tag is valid after it was issued. After this term, if a tag was not export validated - it becomes Expired.";
  "CountryManagement.IssuingFieldManagement.MaxNumberOfFactura.Description": "Maximum number of receipts that can be assigned to a Tax Free tag. Leave empty or 0 (zero) if you don't want to apply the rule.";
  "CountryManagement.IssuingFieldManagement.MinimumSalesAmount.PerVAT.Description": "Minimum sales amount is the default VAT rate used for validaton, if no value is set in Refunds VATs tables.";
  "CountryManagement.IssuingFieldManagement.Name.MakeMandatory.Description": "If traveller name is required. If checked, user needs to fill traveller's first and last name when issuing a Tax Free tag.";
  "CountryManagement.IssuingFieldManagement.Nationality.MakeMandatory.Description": "If traveller nationality required for the country. If false then bypass functionality is available and user does not need nationality when form is issued.";
  "CountryManagement.IssuingFieldManagement.Passport.MakeMandatory.Description": "If traveller's passport is required while issuing.";
  "CountryManagement.IssuingFieldManagement.PhoneNumber.MakeMandatory.Description": "If traveller's phone number is required while issuing.";
  "CountryManagement.IssuingFieldManagement.ReceiptDate.MakeMandatory.Description": "If purchase's receipt date is required while issuing.";
  "CountryManagement.IssuingFieldManagement.ReceiptDate.ValidityDays.Description": "Number of days that the purchase's receipt is considered valid for issuing. Leave empty or 0 (zero) if you don't want to apply the rule.";
  "CountryManagement.IssuingFieldManagement.Sticker.MakeMandatory.Description": "Applies only for non-merchant companies. Meaning, if a company is a merchant, the sticker is always mandatory.";
  "CountryManagement.IssuingFieldManagement.VATValidation.Description": "Turn on to require entering of VAT amount in addition to Sales amount when issuing forms, to validate that there is no mistake in amounts";
  "CountryManagement.IssuingFieldManagement.VATValidationMaxDifference.Description": "If VAT validation is on, this controls what difference is allowed between VAT amounts calculated and entered. The value is in percentage of the calculated amount. Example: If this value is 1 - this means 1% difference is allowed; then, if calculated amount is 100 - entered 99 and 101 are allowed, while 98 and 102 are not.";
  "CountryManagement.Contracts.TRNMoveWithAllUnclaimedTags.Description": "If True then all Unclaimed Tags will be moved to new TRN.";
  "CountryManagement.Services.EligibilityService.EligibilityCheckResultValidityHours.Description": "Number of hours that the last eligibility check is valid for. Leave empty or 0 (zero) if eligibility check should be done every time it is required.";
  "CountryManagement.Services.AllowEligibilityComplaint.Description": "When this is True - Allow to send complaint to eligibility service NotEligible result";
  "CountryManagement.Invoicing.InvoicingExported.Description": "If True then merchant invoices will be generated for the forms in 'Exported', 'Paid' and 'Payment in progress' statuses. If False - then 'Paid' and 'Payment in progress' statuses (no 'Exported').";
  "CountryManagement.ExportValidation.Description": "Select the settings you want to be applicable to validate Tax Free tags";
  "CountryManagement.ExportValidation.ExportedFormValidityTermMonths.Description": "Defines for how long the tag is valid after it was export validated. After this term, if a tag was not refunded - it becomes Expired.";
  "CountryManagement.ExportValidation.ExtendedExportValidation.Description": "When this is True - it allows to approve Declined forms and decline Exported.";
  "CountryManagement.ExportValidation.FlightTimeWindowAtEarlyValidationHours.Description": "When flight information is entered during early validation - it can not be later that this number of hours in the future";
  "CountryManagement.ExportValidation.FlightTimeWindowHours.Description": "When flight information is entered during early validation - it can not be later that this number of hours in the future";
  "CountryManagement.ExportValidationTablet.ManualValidation.Description": "When this is True - it is required to scan tax free tags when validating them.";
  "CountryManagement.ExportValidationTablet.ShowDateOfBirth.Description": "Minimum age of Traveller must be set for this field to be visible on export validation tablet";
  "CountryManagement.ExportValidationTablet.ShowPhotoReminderAbove.Description": "When enabled, shows a reminder for the agent to add photos when the tags need validation and the tag value is equal or greater than this amount";
  "CountryManagement.Refund.RequireCompletedValidation.Description": "When this is set, then refund is only possible if all tags (in the same trip with the tags being refunded) have been validated as either approved or declined (except tags excluded from the process, like Cancelled or Expired). In other words, there is no tag waiting to be export validated.";
  "CountryManagement.Refund.RequireDeparture.Description": "Require tourist departure to be confirmed before refund can be paid";
  "CountryManagement.Refund.TPPClientCode.Description": "Client code to be used for TPP service (credit card tokenisation and payment). This is the unique code assigned by TPP for each client. It is in the format AA.AAA.NNN. Example: UK.ETF.001";
  "CountryManagement.RefundMethodSettings.Alipay.LandsideRefundLimit.Description": "Landside refund limit affects landside locations only and should be less than normal limit (if both are set). It can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.Alipay.RefundLimit.Description": "Refund limit can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.Cash.LandsideRefundLimit.Description": "Landside refund limit affects landside locations only and should be less than normal limit (if both are set). It can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.Cash.RefundLimit.Description": "Refund limit can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.CashViaPartner.Description": "This method inherits settings of Cash every time when those are changed. If needed, you can explicitly specify different values for it.";
  "CountryManagement.RefundMethodSettings.CashViaPartner.LandsideRefundLimit.Description": "Landside refund limit affects landside locations only and should be less than normal limit (if both are set). It can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.CashViaPartner.RefundLimit.Description": "Refund limit can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.LandsideRefundLimit.Description": "Landside refund limit affects landside locations only and should be less than normal limit (if both are set). It can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.CreditOrDebitCard.RefundLimit.Description": "Refund limit can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.RefundLater.LandsideRefundLimit.Description": "Landside refund limit affects landside locations only and should be less than normal limit (if both are set). It can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.RefundLater.RefundLimit.Description": "Refund limit can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.WeChat.LandsideRefundLimit.Description": "Landside refund limit affects landside locations only and should be less than normal limit (if both are set). It can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.RefundMethodSettings.WeChat.RefundLimit.Description": "Refund limit can be defined in foreign currency. Then it will be automatically converted using exchange rate retrieved from external service. XR value entered here acts as a default and will be updated automatically by the service. It should only be changed if the service is down for too long and the value becomes outdated.";
  "CountryManagement.InputExample.NumericInputExample.SubItemExample.Description": "It's to show an example about recursive sub item.'";
  "UniRefund.AdministrationService:010001": "Translation already available for {lang}";
  "UniRefund.AdministrationService:010002": "The provided merchant is already related with this product group";
  "UniRefund.AdministrationService:010003": "There is no such an entity given id. Entity type: {fullname}";
  "UniRefund.AdministrationService:010004": "There is no such an entity. Entity type: {fullname}, id: {id}";
  "UniRefund.AdministrationService:010005": "Argument out of range exception";
  "UniRefund.AdministrationService:010006": "Argument out of range exception: {param}";
  "UniRefund.AdministrationService:010007": "Argument out of range exception, value: {value}";
  "UniRefund.AdministrationService:010008": "Argument out of range exception: {param}, value: {value}";
  "UniRefund.AdministrationService:010009": "The value '{value}' for the key '{key}' cannot be cast to a '{expectedValueType}'!";
  "UniRefund.AdministrationService:010010": "There is no any setting defined with the Key: '{key}'!";
  "UniRefund.AdministrationService:010011": "The setting: '{key}' is not setable from tenant. Only host can change!";
  "UniRefund.AdministrationService:010012": "A tenant can not use 'TenantId' filter!";
  "UniRefund.AdministrationService:010013": "Tenant not found by Id: '{tenantId}'!";
  "UniRefund.AdministrationService:010014": "'{givenLanguage}' is not supported. The supported languages are: '{supportedLanguages}'!";
  "UniRefund.AdministrationService:010015": "Specified value: '{value}' is not found in selection items that you must set just one of them: '{itemValues}' for the setting: '{key}'!";
};
export type AbpOpenIddictResources = {
  TheOpenIDConnectRequestCannotBeRetrieved: "The OpenID Connect request cannot be retrieved.";
  TheUserDetailsCannotBbeRetrieved: "The user details cannot be retrieved.";
  TheApplicationDetailsCannotBeFound: "The application details cannot be found.";
  DetailsConcerningTheCallingClientApplicationCannotBeFound: "Details concerning the calling client application cannot be found.";
  TheSpecifiedGrantTypeIsNotImplemented: "The specified grant type {0} is not implemented.";
  Authorization: "Authorization";
  DoYouWantToGrantAccessToYourData: "Do you want to grant {0} access to your data?";
  ScopesRequested: "Scopes requested";
  Accept: "Accept";
  Deny: "Deny";
  Permissions: "Permissions";
  "Permission:OpenIddictPro": "OpenId";
  "Permission:Edit": "Edit";
  "Permission:Create": "Create";
  "Permission:Delete": "Delete";
  "Permission:Application": "Application";
  "Permission:ManagePermissions": "Manage permissions";
  "Permission:ViewChangeHistory": "View change history";
  ChangeHistory: "Change history";
  "Permission:Scope": "Scope";
  InvalidRedirectUri: "Invalid RedirectUri: {0}";
  InvalidPostLogoutRedirectUri: "Invalid PostLogoutRedirectUri: {0}";
  NoClientSecretCanBeSetForPublicApplications: "No client secret can be set for public applications.";
  TheClientSecretIsRequiredForConfidentialApplications: "The client secret is required for confidential applications.";
  TheClientIdentifierIsAlreadyTakenByAnotherApplication: "The client identifier is already taken by another application.";
  TheScopeNameCannotContainSpaces: "The scope name cannot contain spaces";
  TheNameIsAlreadyTakenByAnotherScope: "The name is already taken by another scope.";
  "Menu:OpenIddict": "OpenId";
  Scopes: "Scopes";
  ScopeDeletionWarningMessage: "Are you sure you want to delete the scope '{0}'?";
  Name: "Name";
  DisplayName: "Display name";
  Description: "Description";
  Resources: "Resources";
  NewScope: "New scope";
  Applications: "Applications";
  ApplicationDeletionWarningMessage: "Are you sure you want to delete the application '{0}'?";
  AreYouSure: "Are you sure?";
  NoAvailableScopes: "There is no available scopes";
  NewApplication: "New application";
  ClientId: "Client Id";
  Type: "Type";
  ClientSecret: "Client secret";
  ClientSecretHelpText: "Enter a new value to replace the existing secret";
  ClientUri: "Client uri";
  LogoUri: "Logo uri";
  AllowAuthorizationCodeFlow: "Allow authorization code flow";
  AllowImplicitFlow: "Allow implicit flow";
  AllowPasswordFlow: "Allow password flow";
  AllowClientCredentialsFlow: "Allow client credentials flow";
  AllowHybridFlow: "Allow hybrid flow";
  AllowRefreshTokenFlow: "Allow refresh token flow";
  AllowDeviceEndpoint: "Allow device endpoint";
  AllowLogoutEndpoint: "Allow logout endpoint";
  ExtensionGrantTypes: "Extension grant types";
  RedirectUris: "Redirect uris";
  PostLogoutRedirectUris: "Post logout redirect uris";
  ConsentType: "Consent type";
  NotAvailableForThisType: "Not available for this type";
  TokenLifetime: "Token Lifetime";
  TokenLifetimeHit: "The unit of token life is seconds, leaving blank to use the default life time.";
  AccessTokenLifetime: "AccessToken lifetime";
  AuthorizationCodeLifetime: "AuthorizationCode lifetime";
  DeviceCodeLifetime: "DeviceCode lifetime";
  IdentityTokenLifetime: "IdentityToken lifetime";
  RefreshTokenLifetime: "RefreshToken lifetime";
  UserCodeLifetime: "UserCode lifetime";
};
export type BlobStoringDatabaseResources = {
  MyAccount: "My account";
};
export type LocationServiceResources = {
  "UniRefund.LocationService:00001": "One of AddressCommonData not found by given Ids!";
  "UniRefund.LocationService:00002": "{item} not found with the code(3): '{code3}'. If you're sure, firstly add the {item}!";
  "UniRefund.LocationService:00003": "{item} string's length must be fixed size of '{expectedSize}'!";
  "Permission:LocationService": "Location Service";
  "Permission:AddressCommonDatas": "Addresses";
  "Permission:Countries": "Countries";
  "Permission:Currencies": "Currencies";
  "Permission:CountryDates": "Country Dates";
  "Permission:CountryNumbers": "Country Numbers";
  "Permission:CountryTimes": "Country Times";
  "Permission:Districts": "Districts";
  "Permission:Neighborhoods": "Neighborhoods";
  "Permission:RegionalSettings": "Regional Settings";
  "Permission:Regions": "Regions";
  "Permission:Cities": "Cities";
  "Permission:View": "View";
  "Permission:ViewList": "View List";
  "Permission:Create": "Create";
  "Permission:Edit": "Edit";
  "Permission:Delete": "Delete";
  "Permission:ViewListByIds": "View List by Ids";
  "Permission:ViewListByRegionId": "View List by RegionId";
  "Permission:ViewListByCountryId": "View List by CountryId";
  "Permission:ViewListByCityId": "View List by CityId";
  "Permission:ViewListByDistrictId": "View List by DistrictId";
  "Permission:GetDefault": "Get Default";
  "Permission:Exist": "Exist";
};
export type SettingServiceResources = {
  "UniRefund.SettingService:011001": "The default product group for this merchant cannot be deleted. Ensure that at least one product group is marked as default: {id}";
  "UniRefund.SettingService:011002": "This merchant does not have a productGroup, so you must select one of the ones you added as isDefault.";
  "UniRefund.SettingService:011003": "A product group merchant with this merchantId already exists.";
  "UniRefund.SettingService:011004": "Multiple default records are not allowed for the same vat rate: {vatPercent}";
  "UniRefund.SettingService:011005": "The merchant with id {merchantId} does not have a default product group for vatRates: {vatRates}";
  "UniRefund.SettingService:011006": "The merchant with id {merchantId} does not have product groups: {pgs}";
  "UniRefund.SettingService:011007": "Inactive ProductGroup can not be added: {names}";
  "UniRefund.SettingService:012001": "Default ProductGroup can not be updated.";
  "UniRefund.SettingService:012002": "Default ProductGroup can not be deleted.";
};
export type ContractServiceResources = {
  "UniRefund.ContractService:01001": "There is no any active ContractHeader related with given {contractType}: {contractTypeIdentifier}!";
  "UniRefund.ContractService:01002": "There is not any active RefundTableHeader relation with given MerchantId : {merchantId} and RefundTableHeaderId : {refundTableHeaderId}!";
  "UniRefund.ContractService:01003": "No active default RefundTableHeader found by given MerchantId : {merchantId}!";
  "UniRefund.ContractService:01004": "There can be just one default RefundTable in a Merchant Contract.";
  "UniRefund.ContractService:01005": "There can't be duplicate RefundTableHeaderId!";
  "UniRefund.ContractService:01006": "There must be at least one Refund Table Header Added!";
  "UniRefund.ContractService:01007": "One of the RebateTableHeaderId you gave is not a template!";
  "UniRefund.ContractService:01008": "No Headquarter merchant found by given MerchantId! : {merchantId}";
  "UniRefund.ContractService:01009": "No address registry found related specified ContractHeader!";
  "UniRefund.ContractService:01010": "One of the ContractHeaderRefundTableHeader you specify is not related with the ContractHeader!";
  "UniRefund.ContractService:01011": "No ContractSetting registry found related to specified ContractHeader!";
  "UniRefund.ContractService:01012": "No Default ContractSetting registry found related to specified ContractHeader!";
  "UniRefund.ContractService:01013": "No RebateSetting registry found related to specified ContractHeader!";
  "UniRefund.ContractService:01014": "No RefundTableHeader registry found related to specified ContractHeader!";
  "UniRefund.ContractService:01015": "There are missing steps: '{missingSteps}' to activate Merchant Contract!";
  "UniRefund.ContractService:01016": "There is already RebateSetting registry of given ContractHeader!";
  "UniRefund.ContractService:01017": "There is not RebateSetting registry of given ContractHeader! with ContractHeaderId: {contractHeaderId}";
  "UniRefund.ContractService:01018": "No default ContractSetting found by ContractHeader! with the Id: {contractHeaderId}";
  "UniRefund.ContractService:01019": "No ContractSetting found by ContractHeader! with ContractHeaderId: {contractHeaderId} for the Ids: {missingIds}";
  "UniRefund.ContractService:01020": "There is already ContractStore registry for the SubMerchant! with SubMerchantId: {subMerchantId}";
  "UniRefund.ContractService:01021": "There can just be one default ContractSetting by ContractHeaderId: {contractHeaderId}";
  "UniRefund.ContractService:01022": "There should be one default ContractSetting by ContractHeaderId: {contractHeaderId}";
  "UniRefund.ContractService:01023": "There can be just one default RefundFee in a Refund Point Contract.";
  "UniRefund.ContractService:01024": "There can't be duplicate RefundFeeHeaderId!";
  "UniRefund.ContractService:01025": "There must be at least one Refund Fee Header Added!";
  "UniRefund.ContractService:01026": "The ContractHeader's ContractType is not {contractType} for id : {contractHeaderId}";
  "UniRefund.ContractService:01027": "Overlap exists for the ContractHeader you specified with ContractTypeIdentifier : {contractTypeIdentifier} , ValidFrom : {validFrom} , ValidTo : {validTo}!";
  "UniRefund.ContractService:01028": "There is an overlapping date range in RebateTableHeaders or RebateTableHeadersFromTemplate.";
  "UniRefund.ContractService:01029": "There is an overlapping date range in MinimumNetCommissions{appliedOrganizationIdMessage}";
  "UniRefund.ContractService:01030": "There is an overlapping date range in {objectName}!";
  "UniRefund.ContractService:01031": "There is not any active RefundFeeHeader relation with given RefundPoint : {refundPointId} and RefundFeeHeader : {refundFeeHeaderId}!";
  "UniRefund.ContractService:01032": "There is no active default RefundFeeHeader by RefundPoint : {refundPointId}!";
  "UniRefund.ContractService:01033": "There can be just one default RefundTableHeader at a time for ContractHeader! There is an overlap between the Default RefundTableHeaders!";
  "UniRefund.ContractService:01034": "ValidTo date cannot be earlier than or equal to ValidFrom date in {objectName}";
  "UniRefund.ContractService:01035": "ValidFrom date cannot be earlier than {validFromLimit} in {objectName}";
  "UniRefund.ContractService:01036": "There can be just one default RefundFeeHeader at a time for ContractHeader! There is an overlap between the Default RefundFeeHeaders!";
  "UniRefund.ContractService:01037": "Your first registration's MinValue must be the value of 0! for the VAT Rate: {vATRate}";
  "UniRefund.ContractService:01038": "There is an overlap or invalid values exist in {modelName}!";
  "UniRefund.ContractService:01039": "The MinValue : {invalidMinValue} you gave is invalid. It must be {expectedMinValue} for the VAT Rate: {vATRate}.";
  "UniRefund.ContractService:01040": "Your first registration's AmountFrom must be the value of 0! for the FeeType: {feeType}";
  "UniRefund.ContractService:01041": "Duplicate ContractTypeIdentifiersSubId can't exist in input!";
  "UniRefund.ContractService:01042": "RebateTableHeader which is not a template, can't be updated!";
  "UniRefund.ContractService:01043": "Started RebateTableHeader can not be deleted! Id: '{id}', ValidFrom: '{validFrom}'";
  "UniRefund.ContractService:01044": "Enabled Contract header not found for the following merchants: {merchantNames}";
  "UniRefund.ContractService:01045": "Rebate table not found for the following merchants: {merchantNames}";
  "UniRefund.ContractService:01046": "{contractType} ContractHeader: '{id}' is already passive!";
  "UniRefund.ContractService:01048": "There are missing steps: '{missingSteps}' to activate RefundPoint Contract!";
  "UniRefund.ContractService:01049": "One of given {entityName} doesn't exit or can not bind for given {contractTypeIdentifierName} : '{contractTypeIdentifierId}'!";
  "UniRefund.ContractService:01050": "There can't be duplicate RebateTableHeaderId!";
  "UniRefund.ContractService:01051": "{entityName} template can not have {contractTypeName}Id!";
  "UniRefund.ContractService:01052": "{contractTypeName}Id is required for non-template {entityName}!";
  "UniRefund.ContractService:01053": "Assigned and started {entityName}: '{id}' can not be updated!";
  "UniRefund.ContractService:01054": "At least one {entityName} must be default!";
  "UniRefund.ContractService:01055": "Duplicate AppliedOrganizationId values found in MinimumNetCommissions!";
  "UniRefund.ContractService:01056": "The provided merchant does not have an active contract header with active rebate header for the following dates and amounts: {NoRebateSettingExists}, and refund headers for the following dates and amounts: {NoCHRefundTableHeaderExists}";
  "UniRefund.ContractService:01057": "The provided merchant does not have an active contract header with active and refund headers for the following dates and amounts: {NoCHRefundTableHeaderExists}";
  "UniRefund.ContractService:01058": "The provided merchant does not have an active contract header with active rebate header for the following dates and amounts: {NoRebateSettingExists}";
  "UniRefund.ContractService:01059": "There must be at least '{expectedDayRange}' day/days range between ValidFrom: '{validFrom}' and ValidTo: '{validTo}' in {entityName}!";
  "UniRefund.ContractService:01060": "{entityName} ValidFrom and ValidTo dates must be within the Parent's ValidFrom and ValidTo date range!";
  "UniRefund.ContractService:01061": "Calculation is not possible due to Early Refund Fee record does not exist in Refund Fee Table of the active Contract for RefundPoint: '{refundPointId}'!";
  "UniRefund.ContractService:01062": "EarlyRefund is not supported in '{currentTenantName}'!";
  "UniRefund.ContractService:01063": "There is no enabled contract within the refund date: '{refundDate}' for given Refund Point!";
  "UniRefund.ContractService:01064": "Though a valid contract exists, there is no refund fee header relation that is valid within given date: '{date}' in the related contract of given Refund Point!";
  "UniRefund.ContractService:01065": "The refund fee calculation is not possible because there is no tourist fee record in contract's refund fee header!";
  "UniRefund.ContractService:01066": "The refund fee calculation is not possible because there is no agent fee record in contract's refund fee header!";
  "UniRefund.ContractService:01067": "Contract is already validated!";
  "Permission:ContractService": "Contract Service";
  "Permission:ContractHeaderRefundTableHeaders": "RefundTableHeaders Control in ContractHeader";
  "Permission:ContractSettings": "Contract Settings";
  "Permission:RebateTableHeaders": "Rebate Table Headers";
  "Permission:RefundTableDetails": "Refund Table Details";
  "Permission:ContractStores": "Contract Stores";
  "Permission:RebateSettings": "Rebate Settings";
  "Permission:RebateSettingRebateTableHeaders": "RebateTableHeaders Control in RebateSetting";
  "Permission:RebateTableDetails": "Rebate Table Details";
  "Permission:RefundTableHeaders": "Refund Table Headers";
  "Permission:MinimumNetCommissions": "Minimum Net Commissions";
  "Permission:RefundFeeHeaders": "Refund Fee Headers";
  "Permission:ProcessingFeeDetails": "Processing Fee Details";
  "Permission:RefundFeeDetails": "Refund Fee Details ";
  "Permission:ContractHeaderForRefundPoints": "ContractHeader Control for RefundPoints";
  "Permission:ContractHeaderForMerchants": "ContractHeader Control for Merchants";
  "Permission:ContractHeaderRefundFeeHeaders": "RefundFeeHeaders Control in ContractHeader";
  "Permission:IsValidatable": "Is Validatable";
  "Permission:View": "View";
  "Permission:ViewList": "View list";
  "Permission:Detail": "Detail";
  "Permission:ChangeDefault": "Change default";
  "Permission:GetListByContractHeaderId": "Get list by ContractHeaderId";
  "Permission:GetAssignablesByMerchantId": "Get assignables by MerchantId";
  "Permission:GetListByHeaderIdAndStoreProfiles": "Get list by ContractHeaderId and StoreProfiles";
  "Permission:GetListTemplate": "Get Template list ";
  "Permission:GetListDetail": "Get detail list ";
  "Permission:GetListDetailByRefundPointId": "Get detail list by RefundPointId";
  "Permission:GetListDetailByMerchantId": "Get detail list by MerchantId";
  "Permission:GetStoreListByContractHeaderId": "Get Store list by ContractHeaderId";
  "Permission:Create": "Create";
  "Permission:CreateFromTemplate": "Create from template";
  "Permission:ReplaceEntities": "Replace entities";
  "Permission:Edit": "Edit";
  "Permission:Delete": "Delete";
  "Permission:DeleteMany": "Delete many";
  "Permission:DeleteAllByRefundTableHeaderId": "Delete all by RefundTableHeaderId";
  "Permission:Validate": "Validate";
  "Permission:CalculateFees": "Calculate Fees";
  "Permission:CreateTemplate": "Create Template";
  "Permission:EditTemplate": "Edit Template";
  "Permission:GetAssignablesByRefundPointId": "Get Assignables by RefundPointId";
  "Permission:ViewDetail": "View Detail";
  "Permission:GetDetail": "Get Detail";
  "Permission:CreateRebateSetting": "Create Rebate Setting";
  "Permission:ViewRebateSetting": "View Rebate Setting";
  "Permission:ContractSettingView": "View Contract Setting";
  "Permission:ContractSettingCreate": "Create Contract Setting";
  "Permission:ContractSettingUpSert": "UpSert Contract Setting";
  "Permission:ContractSettingChangeDefault": "Change Contract Setting Default";
  "Permission:ContractSettingDelete": "Delete Contract Setting";
  "Permission:ContractSettingEdit": "Edit Contract Setting";
  "Permission:ContractSettingGetListByContractHeaderId": "Get Contract Setting List by ContractHeaderId";
  "Permission:ContractStoreUpSert": "UpSert Contract Store";
  "Permission:Clone": "Clone";
  "Permission:UpSertRebateSetting": "UpSert Rebate Setting";
  "Permission:MakePassive": "Make Passive";
};
export type CRMServiceResources = {
  "UniRefund.CRMService:010001": "ParentId not found: {parentId}";
  "UniRefund.CRMService:010002": "Address not found: {addressId}";
  "UniRefund.CRMService:010003": "Some of the provided refund points' names could not be found: {ids}";
  "UniRefund.CRMService:010004": "Some of the provided user devices' names could not be found: {ids}";
  "UniRefund.CRMService:010005": "Email address must be unique. Such a record exists: {emailAddress}";
  "UniRefund.CRMService:010006": "Telephone must be unique. Such a record exists: {telephone}";
  "UniRefund.CRMService:010007": "Vatnumber must be unique. Such a record exists: {vatNumber}";
  "UniRefund.CRMService:011001": "A merchant cannot be both an individual and an organization at the same time. It has to be only one of the two.";
  "UniRefund.CRMService:011002": "Merchant's parent cannot be specified as itself.";
  "UniRefund.CRMService:011004": "A merchant with a filled ParentId cannot be of type headquarters.";
  "UniRefund.CRMService:011007": "No sub found related to the Parent! with Id: {id} and ParentId: {parentId}";
  "UniRefund.CRMService:011008": "Merchant type cannot be changed. Because there are dependent child merchants.";
  "UniRefund.CRMService:011010": "The following Merchant IDs are missing: '{missingIds}' for ParentMerchantId: '{parentMerchantId}' and TypeCode: '{typeCode}'";
  "UniRefund.CRMService:011011": "Given Merchant '{id}' is not a HEADQUARTER!";
  "UniRefund.CRMService:011012": "No merchant found with VAT Number: '{vATNumber}', Country Code: '{countryCode}', Customer Number: '{customerNumber}'!";
  "UniRefund.CRMService:011013": "Given Merchant '{id}' is not a {wantedTypeCode}, is {existingTypeCode}!";
  "UniRefund.CRMService:011014": "A store merchant with the same CustomerNumber already exists. Please provide a unique CustomerNumber.";
  "UniRefund.CRMService:011015": "Only Headquarter merchants can have a relationship with ProductGroup. This merchant is not of the Headquarter type.";
  "UniRefund.CRMService:011016": "No merchant found either headquarter with VAT Number: '{vATNumber}' or sub merchant with customer number: '{customerNumber}'!";
  "UniRefund.CRMService:011017": "There is not a headquarter merchant related to given merchant. So, it is not possible to get product groups of non-existent merchant!";
  "UniRefund.CRMService:011018": "A merchant without a filled ParentId cannot be of type headquarters";
  "UniRefund.CRMService:011019": "ExternalStoreIdentifier cannot be empty";
  "UniRefund.CRMService:012001": "No tax office with this id was found: {taxOfficeId}";
  "UniRefund.CRMService:012002": "Tax Office type cannot be changed. Because there are dependent child merchants.";
  "UniRefund.CRMService:013001": "There is no entity AffiliationCode with id = {id}!";
  "UniRefund.CRMService:013002": "There are records associated with this AffiliationCode. In order to delete the AffiliationCode, the records must be deleted first.";
  "UniRefund.CRMService:013003": "A record with this name already exists: {name}";
  "UniRefund.CRMService:014001": "No RefundPoint found by Id: {id} and TypeCode: {refundPointTypeCode}";
  "UniRefund.CRMService:014002": "Given Refund Point '{id}' is not a {wantedTypeCode}, is {existingTypeCode}!";
  "UniRefund.CRMService:014003": "Refund Point's parent cannot be specified as itself.";
  "UniRefund.CRMService:014004": "Refund Point type cannot be changed. Because there are dependent child refund points.";
  "UniRefund.CRMService:015001": "Abp User Account already exists.";
  "UniRefund.CRMService:015002": "This account is already linked to another user account. You cannot link this account. You can create a new user account by changing your email address.";
  "UniRefund.CRMService:015003": "Abp User Account not found by id: {id}";
  "UniRefund.CRMService:016001": "Tax Free's parent cannot be specified as itself.";
  "UniRefund.CRMService:016002": "Tax Free type cannot be changed. Because there are dependent child tax frees.";
  "UniRefund.CRMService:017001": "Customs type cannot be changed. Because there are dependent child Customss.";
  "UniRefund.CRMService:013004": "Given affiliation may not belong to given Party or may not exist!";
  "UniRefund.CRMService:013005": "Given affiliation for 'Contact' must have at least one contact email!";
};
export type TagServiceResources = {
  "UniRefund.TagService:010002": "This invoice ({invoiceNumber}) is already taken a Tag number!";
  "UniRefund.TagService:010003": "Merchant not found! VatNumber : {vatNumber} , CountryCode : {countryCode}";
  "UniRefund.TagService:010004": "RefundTableDetail not defined!";
  "UniRefund.TagService:010005": "CountryCode 3 Digit not defined!";
  "UniRefund.TagService:010006": "Invalid date range: Both {startDatePropertyName} and {endDatePropertyName} must be provided!";
  "UniRefund.TagService:010007": "Traveller not found!";
  "UniRefund.TagService:010008": "ExportValidation not found!";
  "UniRefund.TagService:010009": "Provided tags have different currencies: {differentCurrencies}";
  "UniRefund.TagService:0100010": "Some of the provided tags do not have calculated refund amount!";
  "UniRefund.TagService:0100011": "Provided tags belong to different travelers!";
  "UniRefund.TagService:0100012": "Some of the provided tags are already refunded! Related Tags: '{tagNumbers}'";
  "UniRefund.TagService:0100013": "There is no such an entity given id. Entity type: {fullname}";
  "UniRefund.TagService:0100014": "There is no such an entity. Entity type: {fullname}, id: {id}";
  "UniRefund.TagService:0100015": "Provided tags have different statuses: {differentStatuses}";
  "UniRefund.TagService:0100016": "Provided tags have invalid statuses. Only tags with 'Issued' and 'Export Validated' statuses are eligible for refund";
  "UniRefund.TagService:0100017": "Early refund is not allowed for this country";
  "UniRefund.TagService:0100018": "The month(int) can just be between 1 and 12!";
  "UniRefund.TagService:0100019": "Provided tag is already export validated!";
  "UniRefund.TagService:0100020": "Provided tag is not ready for export validation!";
  "UniRefund.TagService:0100021": "Default product groups not found for the following vat rates: {vatRates}";
  "UniRefund.TagService:0100022": "Provided product groups are not related to the merchant: {pgIds}";
  "UniRefund.TagService:0100023": "Some of the provided invoice lines do not have tax rate or product group id information!";
  "UniRefund.TagService:0100024": "Refund data not found for the given tag {tagNumber} with id {tagId}";
  "UniRefund.TagService:0100025": "Refund request must have at least one tag!";
  "UniRefund.TagService:0100026": "Non early refunded tag can not have early RefundFeeAmount! Wrong TagIds: '{wrongTagIds}'";
  "UniRefund.TagService:0100027": "Total amount of all invoices in Tag: '{salesAmount}' must be upper than '{minimumAmount}'!";
  "UniRefund.TagService:0100028": "Total amount of the invoice lines with the VAT Rate: '{vATRate}': '{amount}' must be upper than '{minimumAmount}'!";
  "UniRefund.TagService:0100029": "Total amount of the invoice: '{invoiceNumber}' in Tag: '{amount}' must be upper than '{minimumAmount}'!";
  "UniRefund.TagService:0100030": "Tags without an early refund fee in their contract cannot be refunded. Affected Tags: '{tagNumbersStr}'";
  "UniRefund.TagService:0100031": "Refund operation can not be performed due to some tags' refund expiration date have passed! Related Tags: '{tagNumbers}'";
  "UniRefund.TagService:0100032": "Multi Invoices in a Tag currently not supported. Tag can just have one Invoice!";
};
export type ExportValidationServiceResources = {
  "UniRefund.ExportValidationService:010001": "Invalid date range: Both {startDatePropertyName} and {endDatePropertyName} must be provided!";
  "UniRefund.ExportValidationService:010002": "The ExportValidation is referenced by a Tag!";
};
export type IdentityServiceResources = {
  "Permission:IdentityService": "Identity service";
  "UniRefund.IdentityService:010001": "Assignable roles records must be unique.";
  "UniRefund.IdentityService:010002": "You do not have permission to assign this role: {ids}";
  "UniRefund.IdentityService:010003": "This role is already assigned.";
  "UniRefund.IdentityService:010101": "Some of the provided user devices' names could not be found: {ids}";
  "UniRefund.IdentityService:010102": "User already has this role: {roleName}";
  "UniRefund.IdentityService:010103": "User does not have this role: {roleId}";
};
export type TravellerServiceResources = {
  "UniRefund.TravellerService:010001": "Some of the provided travellers' document numbers could not be found: {ids}";
  "UniRefund.TravellerService:010002": "Provided document number is not unique";
  "UniRefund.TravellerService:010003": "Country codes are not matched with the country names: {codes}";
  "UniRefund.TravellerService:010004": "Required fields are missing: {fields}";
  "UniRefund.TravellerService:010005": "Country name not found for personal identification of travel document number: {documentNumber}";
  "UniRefund.TravellerService:010006": "Single personal identification can not be deleted";
  "UniRefund.TravellerService:010007": "Rekognition Service returned unsuccess HttpStatusCode : {httpStatusCode}";
  "UniRefund.TravellerService:010008": "Evidence session already validated for the type: '{type}'!";
  "UniRefund.TravellerService:010009": "Valid MRZ info could not be found in the given photo!";
  "UniRefund.TravellerService:010010": "An error occurred during MRZ analysis.";
  "UniRefund.TravellerService:010011": "Evidence session validation is not required for the type: '{type}'!";
  "UniRefund.TravellerService:010012": "Invalid base64 data!";
  "UniRefund.TravellerService:010013": "EvidenceSession not found by liveness SessionId!";
  "UniRefund.TravellerService:010014": "Liveness Session has not started, firstly start a liveness session!";
  "UniRefund.TravellerService:010015": "Input Base64 has unsupported document format!";
  "UniRefund.TravellerService:010016": "Image could not be processed due to a technical issue!";
  "UniRefund.TravellerService:010017": "MRZ in the image violates the universal standards!";
  "UniRefund.TravellerService:010018": "At least and just one {contactTypeName} can be primary!";
  "Permission:TravellerService": "Traveller Service";
  "Permission:EvidenceSessions": "Evidence Sessions";
  "Permission:Create": "Create";
  "Permission:Edit": "Edit";
  "Permission:ViewList": "View List";
  "Permission:View": "View";
  "Permission:Delete": "Delete";
  "Permission:AnalyzeDocumentByMRZWithoutES": "Use of MRZ Extraction";
  "UniRefund.TravellerService:010019": "Given Language preference culture name '{invalidCode}' is not valid! Allowed Languages code are '{allowedCodes}'.";
  "UniRefund.TravellerService:010020": "At least ITU Country Code or AreaCode must exist!";
};
export type FinanceServiceResources = {
  "UniRefund.FinanceService:01001": "Server error. Tags for VATStatement couldn't be taken from TagService!";
  "UniRefund.FinanceService:01002": "There is no available tags to form VAT Statement for {month}/{year} yet.";
  "UniRefund.FinanceService:01003": "There can not be RebateStatement for future periods: {month}/{year}";
  "UniRefund.FinanceService:01004": "Year or month value is invalid! The year should have 4 digits. The month(int) can just be between 1 and 12.";
  "UniRefund.FinanceService:01005": "No VATStatement found for given year month pairs: {invalidDatesString}";
  "Permission:FinanceService": "Finance Service";
  "Permission:VATStatementHeaders": "VAT Statement Headers";
  "Permission:VATStatementTagDetails": "VAT Statement Tag Details";
  "Permission:VATStatementPayments": "VAT Statement Payments";
  "Permission:View": "View";
  "Permission:ViewList": "View List";
  "Permission:Create": "Create";
  "Permission:Edit": "Edit";
  "Permission:Delete": "Delete";
  "Permission:ViewBasicInformation": "View Basic Information";
  "Permission:FormDraft": "Form Draft";
  "Permission:FormBulkPreview": "Form Bulk Preview";
};
export type RlsConfigResources = {
  SamplePageMessage: "A sample page for the RlsConfig module";
  "Menu:RlsConfig": "RlsConfig";
};
export type ReportServiceResources = {
  "Permission:Reports": "Reports";
  "Permission:VATStatementHeaderReport": "VAT Statement Header Report";
  "Permission:ReportService": "Report Service";
};
export type FileServiceResources = {
  "Permission:FileService": "File Service";
  "Permission:MimeType": "MimeType";
  "Permission:MimeType.Save": "Saving the MimeType";
  "Permission:MimeType.Delete": "Delete the MimeType";
  "Permission:MimeType.Update": "Update the MimeType";
  "Permission:MimeType.List": "List the MimeType";
  "Permission:FileTypeGroup": "FileTypeGroup";
  "Permission:FileTypeGroup.Save": "Saving the FileTypeGroup";
  "Permission:FileTypeGroup.Delete": "Delete the FileTypeGroup";
  "Permission:FileTypeGroup.Update": "Update the FileTypeGroup";
  "Permission:FileTypeGroup.List": "List the FileTypeGroup";
  "Permission:File": "File";
  "Permission:File.ViewForHumanValidation": "View a file for human validation";
  "Permission:File.View": "View a file";
  "Permission:File.Download": "Download a file";
  "Permission:File.Save": "Save a file";
  "Permission:File.Update": "Update a file";
  "Permission:File.Delete": "Delete a file";
  "Permission:File.ListForHumanValidation": "List files for Human Validation";
  "Permission:File.List": "List files";
  "Permission:File.ListWithRelation": "List files with Relation";
  "Permission:File.TriggerFileUnstractProcess": "Trigger file Unstract process";
  "Permission:File.ValidateOrInvalidate": "Validate or Invalidate a File";
  "Permission:FileType": "FileType";
  "Permission:FileType.View": "View a FileType";
  "Permission:FileType.Save": "Saving the FileType";
  "Permission:FileType.Delete": "Delete the FileType";
  "Permission:FileType.Update": "Update the FileType";
  "Permission:FileType.List": "List the FileType";
  "Permission:Provider": "Provider";
  "Permission:Provider.Save": "Saving the Provider";
  "Permission:Provider.Delete": "Delete the Provider";
  "Permission:Provider.Update": "Update the Provider";
  "Permission:Provider.List": "List the Provider";
  "Permission:FileRelation": "FileRelation";
  "Permission:FileRelation.Save": "Saving the FileRelation";
  "Permission:FileRelation.Delete": "Delete the FileRelation";
  "Permission:FileRelation.Update": "Update the FileRelation";
  "Permission:FileRelation.List": "List the FileRelation";
  "Permission:FileRelationEntity": "FileRelationEntity";
  "Permission:FileRelationEntity.Save": "Saving the FileRelationEntity";
  "Permission:FileRelationEntity.Delete": "Delete the FileRelationEntity";
  "Permission:FileRelationEntity.Update": "Update the FileRelationEntity";
  "Permission:FileRelationEntity.List": "List the FileRelationEntity";
  "Permission:FileTypeMimeType": "FileTypeMimeType";
  "Permission:FileTypeMimeType.Save": "Saving the FileTypeMimeType";
  "Permission:FileTypeMimeType.Delete": "Delete the FileTypeMimeType";
  "Permission:FileTypeMimeType.Update": "Update the FileTypeMimeType";
  "Permission:FileTypeMimeType.List": "List the FileTypeMimeType";
  "Permission:FileAIInfo": "File AI Info";
  "Permission:FileAIInfo.GetFileAIInfoByFileId": "Get File AI Info";
  "FileService:FS0001": "File could not be fetched from file storage!";
  "FileService:FS0002": "Error: FileType could not be found for the namespace {namespaceName}. Please make sure you have entered a valid namespace.";
  "FileService:FS0003": "Error: RelatedEntity could not be found for the relatedEntityName {relatedEntityName}. Please make sure you have entered a valid relatedEntityName.";
  "FileService:FS0004": "You can only upload one file per id for this file type. Please select only one file and try again.";
  "FileService:FS0005": "Input cannot be null for the property: '{PropertyName}'!";
  "FileService:FS0006": "Only files with the following extensions are allowed for {fileTypeName}: {mimeTypes}.The file type you attempted to upload: {fileContentType}.";
  "FileService:FS0007": "Error: FileTypeGroup could not be found for the namespace {namespaceName}. Please make sure you have entered a valid namespace.";
  "FileService:FS0008": "If the isMulti field is true, the maxFileCount value cannot be null.";
  "FileService:FS0009": "Duplicate record found.";
  "FileService:FS0010": "This is Unstract unrelated file!";
  "FileService:FS0011": "File that is currently being processed in AI can not be triggered right now!";
  "FileService:FS0012": "File AI Info not found by given file!";
  "FileService:FS0013": "File already validated: '{FileValidationStatus}'!";
  "FileService:FS0014": "File validation is not required for this type of file!";
  "FileService:FS0015": "Human validated output can not be null while validating a file!";
  "FileService:FS0016": "Human validated output json could not be deserialized! Make sure the JSON is valid!";
};
export type RefundServiceResources = {
  "UniRefund.RefundService:001001": "Country currency is not set";
  "UniRefund.RefundService:001002": "Provided traveller does not exist";
  "UniRefund.RefundService:001003": "The provided traveller does not match with tags' traveller";
  "UniRefund.RefundService:001004": "Provided refund point does not exist";
  "UniRefund.RefundService:001005": "Payout creation failed";
};
export type LeptonXResources = {
  Login: "Login";
  Appearance: "Appearance";
  ContainerWidth: "Container Width";
  "ContainerWidth:Boxed": "Boxed Layout";
  "ContainerWidth:Fixed": "Fixed";
  "ContainerWidth:Fluid": "Fluid";
  GeneralSettings: "General Settings";
  Language: "Language";
  Settings: "Settings";
  "Theme:dark": "Dark";
  "Theme:dim": "Semi-Dark";
  "Theme:light": "Light";
  "Theme:system": "System";
  Welcome: "Welcome";
  FilterMenu: "Filter Menu";
  "Authentication:YouAreLoggedOut": "You are logged out.";
  GivenTenantIsNotExist: "Given tenant doesn't exist: {0}";
  GivenTenantIsNotAvailable: "Given tenant isn't available: {0}";
  Tenant: "Tenant";
  Switch: "switch";
  Name: "Name";
  SwitchTenantHint: "Leave the name field blank to switch to the host side.";
  SwitchTenant: "Switch tenant";
  NotSelected: "Not selected";
};
