// This file is auto-generated by @hey-api/openapi-ts

import type {CancelablePromise} from "./core/CancelablePromise";
import type {BaseHttpRequest} from "./core/BaseHttpRequest";
import type {
  GetApiTravellerServiceAddressesData,
  GetApiTravellerServiceAddressesResponse,
  GetApiTravellerServiceAddressesByIdData,
  GetApiTravellerServiceAddressesByIdResponse,
  PutApiTravellerServiceAddressesByIdData,
  PutApiTravellerServiceAddressesByIdResponse,
  DeleteApiTravellerServiceAddressesByIdData,
  DeleteApiTravellerServiceAddressesByIdResponse,
  GetApiTravellerServiceEmailsData,
  GetApiTravellerServiceEmailsResponse,
  GetApiTravellerServiceEmailsByIdData,
  GetApiTravellerServiceEmailsByIdResponse,
  PutApiTravellerServiceEmailsByIdData,
  PutApiTravellerServiceEmailsByIdResponse,
  DeleteApiTravellerServiceEmailsByIdData,
  DeleteApiTravellerServiceEmailsByIdResponse,
  GetApiTravellerServiceEvidenceSessionsData,
  GetApiTravellerServiceEvidenceSessionsResponse,
  PutApiTravellerServiceEvidenceSessionsByIdData,
  PutApiTravellerServiceEvidenceSessionsByIdResponse,
  PostApiTravellerServiceEvidenceSessionsAnalyzeDocumentByMrzData,
  PostApiTravellerServiceEvidenceSessionsAnalyzeDocumentByMrzResponse,
  PostApiTravellerServicePublicEvidenceSessionsData,
  PostApiTravellerServicePublicEvidenceSessionsResponse,
  GetApiTravellerServicePublicEvidenceSessionsByIdData,
  GetApiTravellerServicePublicEvidenceSessionsByIdResponse,
  PostApiTravellerServicePublicEvidenceSessionsAnalyzeDocumentByMrzData,
  PostApiTravellerServicePublicEvidenceSessionsAnalyzeDocumentByMrzResponse,
  PostApiTravellerServicePublicEvidenceSessionsValidateNfcData,
  PostApiTravellerServicePublicEvidenceSessionsValidateNfcResponse,
  GetApiTravellerServicePublicEvidenceSessionsCreateFaceLivenessSessionData,
  GetApiTravellerServicePublicEvidenceSessionsCreateFaceLivenessSessionResponse,
  GetApiTravellerServicePublicEvidenceSessionsGetFaceLivenessSessionResultsData,
  GetApiTravellerServicePublicEvidenceSessionsGetFaceLivenessSessionResultsResponse,
  PostApiTravellerServicePublicEvidenceSessionsLivenessCompareFacesData,
  PostApiTravellerServicePublicEvidenceSessionsLivenessCompareFacesResponse,
  GetApiTravellerServiceTelephonesData,
  GetApiTravellerServiceTelephonesResponse,
  GetApiTravellerServiceTelephonesByIdData,
  GetApiTravellerServiceTelephonesByIdResponse,
  PutApiTravellerServiceTelephonesByIdData,
  PutApiTravellerServiceTelephonesByIdResponse,
  DeleteApiTravellerServiceTelephonesByIdData,
  DeleteApiTravellerServiceTelephonesByIdResponse,
  PostApiTravellerServiceTravellersWithComponentsData,
  PostApiTravellerServiceTravellersWithComponentsResponse,
  PostApiTravellerServiceTravellersData,
  PostApiTravellerServiceTravellersResponse,
  GetApiTravellerServiceTravellersData,
  GetApiTravellerServiceTravellersResponse,
  PostApiTravellerServiceTravellersByIdCreateTravellerDocumentData,
  PostApiTravellerServiceTravellersByIdCreateTravellerDocumentResponse,
  PutApiTravellerServiceTravellersByIdUpdateTravellerDocumentData,
  PutApiTravellerServiceTravellersByIdUpdateTravellerDocumentResponse,
  DeleteApiTravellerServiceTravellersByIdDeleteTravellerDocumentData,
  DeleteApiTravellerServiceTravellersByIdDeleteTravellerDocumentResponse,
  GetApiTravellerServiceTravellersByIdData,
  GetApiTravellerServiceTravellersByIdResponse,
  PostApiTravellerServiceTravellersByIdAddAddressData,
  PostApiTravellerServiceTravellersByIdAddAddressResponse,
  PostApiTravellerServiceTravellersByIdAddEmailData,
  PostApiTravellerServiceTravellersByIdAddEmailResponse,
  PostApiTravellerServiceTravellersByIdAddTelephoneData,
  PostApiTravellerServiceTravellersByIdAddTelephoneResponse,
} from "./types.gen";

export class AddressService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceAddresses(
    data: GetApiTravellerServiceAddressesData = {},
  ): CancelablePromise<GetApiTravellerServiceAddressesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/addresses",
      query: {
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceAddressesById(
    data: GetApiTravellerServiceAddressesByIdData,
  ): CancelablePromise<GetApiTravellerServiceAddressesByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/addresses/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTravellerServiceAddressesById(
    data: PutApiTravellerServiceAddressesByIdData,
  ): CancelablePromise<PutApiTravellerServiceAddressesByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/traveller-service/addresses/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiTravellerServiceAddressesById(
    data: DeleteApiTravellerServiceAddressesByIdData,
  ): CancelablePromise<DeleteApiTravellerServiceAddressesByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/traveller-service/addresses/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class EmailService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceEmails(
    data: GetApiTravellerServiceEmailsData = {},
  ): CancelablePromise<GetApiTravellerServiceEmailsResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/emails",
      query: {
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceEmailsById(
    data: GetApiTravellerServiceEmailsByIdData,
  ): CancelablePromise<GetApiTravellerServiceEmailsByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/emails/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTravellerServiceEmailsById(
    data: PutApiTravellerServiceEmailsByIdData,
  ): CancelablePromise<PutApiTravellerServiceEmailsByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/traveller-service/emails/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiTravellerServiceEmailsById(
    data: DeleteApiTravellerServiceEmailsByIdData,
  ): CancelablePromise<DeleteApiTravellerServiceEmailsByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/traveller-service/emails/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class EvidenceSessionService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.input
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceEvidenceSessions(
    data: GetApiTravellerServiceEvidenceSessionsData = {},
  ): CancelablePromise<GetApiTravellerServiceEvidenceSessionsResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/evidence-sessions",
      headers: {
        input: data.input,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTravellerServiceEvidenceSessionsById(
    data: PutApiTravellerServiceEvidenceSessionsByIdData,
  ): CancelablePromise<PutApiTravellerServiceEvidenceSessionsByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/traveller-service/evidence-sessions/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceEvidenceSessionsAnalyzeDocumentByMrz(
    data: PostApiTravellerServiceEvidenceSessionsAnalyzeDocumentByMrzData = {},
  ): CancelablePromise<PostApiTravellerServiceEvidenceSessionsAnalyzeDocumentByMrzResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/evidence-sessions/analyze-document-by-mrz",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class EvidenceSessionPublicService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServicePublicEvidenceSessions(
    data: PostApiTravellerServicePublicEvidenceSessionsData = {},
  ): CancelablePromise<PostApiTravellerServicePublicEvidenceSessionsResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/public-evidence-sessions",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServicePublicEvidenceSessionsById(
    data: GetApiTravellerServicePublicEvidenceSessionsByIdData,
  ): CancelablePromise<GetApiTravellerServicePublicEvidenceSessionsByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/public-evidence-sessions/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServicePublicEvidenceSessionsAnalyzeDocumentByMrz(
    data: PostApiTravellerServicePublicEvidenceSessionsAnalyzeDocumentByMrzData = {},
  ): CancelablePromise<PostApiTravellerServicePublicEvidenceSessionsAnalyzeDocumentByMrzResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/public-evidence-sessions/analyze-document-by-mrz",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServicePublicEvidenceSessionsValidateNfc(
    data: PostApiTravellerServicePublicEvidenceSessionsValidateNfcData = {},
  ): CancelablePromise<PostApiTravellerServicePublicEvidenceSessionsValidateNfcResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/public-evidence-sessions/validate-nfc",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.evidenceSessionId
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServicePublicEvidenceSessionsCreateFaceLivenessSession(
    data: GetApiTravellerServicePublicEvidenceSessionsCreateFaceLivenessSessionData = {},
  ): CancelablePromise<GetApiTravellerServicePublicEvidenceSessionsCreateFaceLivenessSessionResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/public-evidence-sessions/create-face-liveness-session",
      query: {
        evidenceSessionId: data.evidenceSessionId,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.sessionId
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServicePublicEvidenceSessionsGetFaceLivenessSessionResults(
    data: GetApiTravellerServicePublicEvidenceSessionsGetFaceLivenessSessionResultsData = {},
  ): CancelablePromise<GetApiTravellerServicePublicEvidenceSessionsGetFaceLivenessSessionResultsResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/public-evidence-sessions/get-face-liveness-session-results",
      query: {
        sessionId: data.sessionId,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServicePublicEvidenceSessionsLivenessCompareFaces(
    data: PostApiTravellerServicePublicEvidenceSessionsLivenessCompareFacesData = {},
  ): CancelablePromise<PostApiTravellerServicePublicEvidenceSessionsLivenessCompareFacesResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/public-evidence-sessions/liveness-compare-faces",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class TelephoneService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceTelephones(
    data: GetApiTravellerServiceTelephonesData = {},
  ): CancelablePromise<GetApiTravellerServiceTelephonesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/telephones",
      query: {
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceTelephonesById(
    data: GetApiTravellerServiceTelephonesByIdData,
  ): CancelablePromise<GetApiTravellerServiceTelephonesByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/telephones/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTravellerServiceTelephonesById(
    data: PutApiTravellerServiceTelephonesByIdData,
  ): CancelablePromise<PutApiTravellerServiceTelephonesByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/traveller-service/telephones/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiTravellerServiceTelephonesById(
    data: DeleteApiTravellerServiceTelephonesByIdData,
  ): CancelablePromise<DeleteApiTravellerServiceTelephonesByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/traveller-service/telephones/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class TravellerService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceTravellersWithComponents(
    data: PostApiTravellerServiceTravellersWithComponentsData = {},
  ): CancelablePromise<PostApiTravellerServiceTravellersWithComponentsResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/travellers/with-components",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceTravellers(
    data: PostApiTravellerServiceTravellersData = {},
  ): CancelablePromise<PostApiTravellerServiceTravellersResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/travellers",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.travelDocumentNumber
   * @param data.fullName
   * @param data.phoneNumber
   * @param data.email
   * @param data.username
   * @param data.nationalities
   * @param data.residences
   * @param data.showExpired
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceTravellers(
    data: GetApiTravellerServiceTravellersData = {},
  ): CancelablePromise<GetApiTravellerServiceTravellersResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/travellers",
      query: {
        TravelDocumentNumber: data.travelDocumentNumber,
        FullName: data.fullName,
        PhoneNumber: data.phoneNumber,
        Email: data.email,
        Username: data.username,
        Nationalities: data.nationalities,
        Residences: data.residences,
        ShowExpired: data.showExpired,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceTravellersByIdCreateTravellerDocument(
    data: PostApiTravellerServiceTravellersByIdCreateTravellerDocumentData,
  ): CancelablePromise<PostApiTravellerServiceTravellersByIdCreateTravellerDocumentResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/travellers/{id}/create-traveller-document",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTravellerServiceTravellersByIdUpdateTravellerDocument(
    data: PutApiTravellerServiceTravellersByIdUpdateTravellerDocumentData,
  ): CancelablePromise<PutApiTravellerServiceTravellersByIdUpdateTravellerDocumentResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/traveller-service/travellers/{id}/update-traveller-document",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns boolean Success
   * @throws ApiError
   */
  public deleteApiTravellerServiceTravellersByIdDeleteTravellerDocument(
    data: DeleteApiTravellerServiceTravellersByIdDeleteTravellerDocumentData,
  ): CancelablePromise<DeleteApiTravellerServiceTravellersByIdDeleteTravellerDocumentResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/traveller-service/travellers/{id}/delete-traveller-document",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.showExpired
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTravellerServiceTravellersById(
    data: GetApiTravellerServiceTravellersByIdData,
  ): CancelablePromise<GetApiTravellerServiceTravellersByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/traveller-service/travellers/{id}",
      path: {
        id: data.id,
      },
      query: {
        ShowExpired: data.showExpired,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceTravellersByIdAddAddress(
    data: PostApiTravellerServiceTravellersByIdAddAddressData,
  ): CancelablePromise<PostApiTravellerServiceTravellersByIdAddAddressResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/travellers/{id}/add-address",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceTravellersByIdAddEmail(
    data: PostApiTravellerServiceTravellersByIdAddEmailData,
  ): CancelablePromise<PostApiTravellerServiceTravellersByIdAddEmailResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/travellers/{id}/add-email",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTravellerServiceTravellersByIdAddTelephone(
    data: PostApiTravellerServiceTravellersByIdAddTelephoneData,
  ): CancelablePromise<PostApiTravellerServiceTravellersByIdAddTelephoneResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/traveller-service/travellers/{id}/add-telephone",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}
