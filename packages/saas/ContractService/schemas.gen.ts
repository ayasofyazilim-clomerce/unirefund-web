// This file is auto-generated by @hey-api/openapi-ts

export const $PagedResultDto_ContractHeaderDetailForMerchantDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'merchantClassification', 'name', 'refundTableHeaders', 'status', 'validFrom'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    contractTypeIdentifier: {
                        type: 'string',
                        format: 'uuid'
                    },
                    webSite: {
                        maxLength: 1024,
                        minLength: 0,
                        type: 'string',
                        nullable: true
                    },
                    merchantClassification: {
                        enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
                        type: 'string'
                    },
                    status: {
                        enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
                        type: 'string'
                    },
                    merchantBasicInformationDto: {
                        required: ['accountManagers', 'name', 'numberOfStores', 'taxOffice'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            taxOffice: {
                                required: ['id', 'name'],
                                type: 'object',
                                properties: {
                                    id: {
                                        type: 'string',
                                        format: 'uuid'
                                    },
                                    name: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            },
                            numberOfStores: {
                                type: 'integer',
                                format: 'int32'
                            },
                            accountManagers: {
                                type: 'array',
                                items: {
                                    required: ['name'],
                                    type: 'object',
                                    properties: {
                                        id: {
                                            type: 'string',
                                            format: 'uuid'
                                        },
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    isDraft: {
                        type: 'boolean'
                    },
                    isEnabled: {
                        type: 'boolean'
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    contractType: {
                        enum: ['Merchant', 'RefundPoint'],
                        type: 'string'
                    },
                    addressCommonDataId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    refundTableHeaders: {
                        type: 'array',
                        items: {
                            required: ['id', 'isDefault', 'name', 'validFrom'],
                            type: 'object',
                            properties: {
                                name: {
                                    minLength: 1,
                                    type: 'string'
                                },
                                id: {
                                    type: 'string',
                                    format: 'uuid'
                                },
                                validFrom: {
                                    type: 'string',
                                    format: 'date-time'
                                },
                                validTo: {
                                    type: 'string',
                                    format: 'date-time',
                                    nullable: true
                                },
                                isDefault: {
                                    type: 'boolean'
                                }
                            },
                            additionalProperties: false
                        }
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ContractHeaderDetailForRefundPointDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'merchantClassification', 'name', 'refundFeeHeaders', 'status', 'validFrom'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    contractTypeIdentifier: {
                        type: 'string',
                        format: 'uuid'
                    },
                    webSite: {
                        maxLength: 1024,
                        minLength: 0,
                        type: 'string',
                        nullable: true
                    },
                    merchantClassification: {
                        enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
                        type: 'string'
                    },
                    status: {
                        enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
                        type: 'string'
                    },
                    refundPointBasicInformationDto: {
                        required: ['accountManagers', 'name', 'numberOfStores', 'taxOffice'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            taxOffice: {
                                required: ['id', 'name'],
                                type: 'object',
                                properties: {
                                    id: {
                                        type: 'string',
                                        format: 'uuid'
                                    },
                                    name: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            },
                            numberOfStores: {
                                type: 'integer',
                                format: 'int32'
                            },
                            accountManagers: {
                                type: 'array',
                                items: {
                                    required: ['name'],
                                    type: 'object',
                                    properties: {
                                        id: {
                                            type: 'string',
                                            format: 'uuid'
                                        },
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    isDraft: {
                        type: 'boolean'
                    },
                    isEnabled: {
                        type: 'boolean'
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    earlyRefund: {
                        type: 'boolean'
                    },
                    contractType: {
                        enum: ['Merchant', 'RefundPoint'],
                        type: 'string'
                    },
                    addressCommonDataId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    refundFeeHeaders: {
                        type: 'array',
                        items: {
                            required: ['id', 'isDefault', 'name', 'validFrom'],
                            type: 'object',
                            properties: {
                                name: {
                                    minLength: 1,
                                    type: 'string'
                                },
                                id: {
                                    type: 'string',
                                    format: 'uuid'
                                },
                                validFrom: {
                                    type: 'string',
                                    format: 'date-time'
                                },
                                validTo: {
                                    type: 'string',
                                    format: 'date-time',
                                    nullable: true
                                },
                                isDefault: {
                                    type: 'boolean'
                                }
                            },
                            additionalProperties: false
                        }
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ContractHeaderForMerchantDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'name', 'status', 'validFrom'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    contractTypeIdentifier: {
                        type: 'string',
                        format: 'uuid'
                    },
                    isDraft: {
                        type: 'boolean'
                    },
                    isEnabled: {
                        type: 'boolean'
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    status: {
                        enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
                        type: 'string'
                    },
                    contractType: {
                        enum: ['Merchant', 'RefundPoint'],
                        type: 'string'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    addressCommonDataId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ContractHeaderForRefundPointDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'name', 'status', 'validFrom'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    contractTypeIdentifier: {
                        type: 'string',
                        format: 'uuid'
                    },
                    isDraft: {
                        type: 'boolean'
                    },
                    isEnabled: {
                        type: 'boolean'
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    status: {
                        enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
                        type: 'string'
                    },
                    contractType: {
                        enum: ['Merchant', 'RefundPoint'],
                        type: 'string'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    earlyRefund: {
                        type: 'boolean'
                    },
                    addressCommonDataId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ContractSettingDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['id', 'invoiceChannel', 'invoicingAddressCommonData', 'invoicingFrequency', 'name', 'receiptType', 'referenceNumber', 'termOfPayment'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    isDefault: {
                        type: 'boolean'
                    },
                    referenceNumber: {
                        type: 'integer',
                        format: 'int32'
                    },
                    invoicingFrequency: {
                        enum: ['OneTimePerMonth', 'TwoTimesPerMonth'],
                        type: 'string'
                    },
                    termOfPayment: {
                        type: 'integer',
                        format: 'int32'
                    },
                    deliveryFee: {
                        type: 'boolean'
                    },
                    factoring: {
                        type: 'boolean'
                    },
                    invoicingAddressCommonData: {
                        required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'neighborhoodId', 'partyId', 'partyType', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            partyType: {
                                enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE'],
                                type: 'string'
                            },
                            partyId: {
                                type: 'string',
                                format: 'uuid'
                            },
                            countryId: {
                                type: 'string',
                                format: 'uuid'
                            },
                            adminAreaLevel1Id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            adminAreaLevel2Id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            neighborhoodId: {
                                type: 'string',
                                format: 'uuid',
                                nullable: true
                            },
                            addressLine: {
                                type: 'string',
                                nullable: true
                            },
                            postalCode: {
                                type: 'string',
                                nullable: true
                            },
                            type: {
                                enum: ['UNKNOWN', 'HOME', 'WORK'],
                                type: 'string'
                            },
                            placeId: {
                                type: 'string',
                                nullable: true
                            },
                            latitude: {
                                type: 'number',
                                format: 'float',
                                nullable: true
                            },
                            longitude: {
                                type: 'number',
                                format: 'float',
                                nullable: true
                            },
                            isPrimary: {
                                type: 'boolean',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    invoiceChannel: {
                        enum: ['ElectronicInvoice', 'Email', 'PaperInvoice'],
                        type: 'string'
                    },
                    eTaxFree: {
                        type: 'boolean'
                    },
                    receiptType: {
                        enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
                        type: 'string'
                    },
                    crossTaxFreeForm: {
                        type: 'boolean'
                    },
                    facturaNumberIsUnique: {
                        type: 'boolean'
                    },
                    goodsHaveSerialNumbers: {
                        type: 'boolean'
                    },
                    excludeFromCashLimit: {
                        type: 'boolean'
                    },
                    deskoScanner: {
                        type: 'boolean'
                    },
                    contractHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_ContractStoreDetailedDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['contractTypeIdentifiersSubId', 'receiptType'],
                type: 'object',
                properties: {
                    contractTypeIdentifiersSubId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    contractSettingId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    receiptType: {
                        enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_RebateTableHeaderListDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['calculateNetCommissionInsteadOfRefund', 'id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    calculateNetCommissionInsteadOfRefund: {
                        type: 'boolean'
                    },
                    isTemplate: {
                        type: 'boolean'
                    },
                    isAssigned: {
                        type: 'boolean'
                    },
                    isEditable: {
                        type: 'boolean'
                    },
                    isCustomizedOverTemplate: {
                        type: 'boolean',
                        nullable: true
                    },
                    merchantId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    merchantName: {
                        type: 'string',
                        nullable: true
                    },
                    sourceTemplateId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_RefundFeeHeaderListDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    isActive: {
                        type: 'boolean'
                    },
                    isTemplate: {
                        type: 'boolean'
                    },
                    isAssigned: {
                        type: 'boolean'
                    },
                    isEditable: {
                        type: 'boolean'
                    },
                    isCustomizedOverTemplate: {
                        type: 'boolean',
                        nullable: true
                    },
                    refundPointId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    refundPointName: {
                        type: 'string',
                        nullable: true
                    },
                    sourceTemplateId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_RefundTableHeaderListDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    isDefault: {
                        type: 'boolean'
                    },
                    isBundling: {
                        type: 'boolean'
                    },
                    isTemplate: {
                        type: 'boolean'
                    },
                    isAssigned: {
                        type: 'boolean'
                    },
                    isEditable: {
                        type: 'boolean'
                    },
                    isCustomizedOverTemplate: {
                        type: 'boolean',
                        nullable: true
                    },
                    merchantId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    merchantName: {
                        type: 'string',
                        nullable: true
                    },
                    sourceTemplateId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_AddressDto = {
    required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'neighborhoodId', 'partyId', 'partyType', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        partyType: {
            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE'],
            type: 'string'
        },
        partyId: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid'
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        addressLine: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK'],
            type: 'string'
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        isPrimary: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_AddressType = {
    enum: ['UNKNOWN', 'HOME', 'WORK'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Individuals_IndividualIdNameDto = {
    required: ['name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_MerchantBasicInformationDto = {
    required: ['accountManagers', 'name', 'numberOfStores', 'taxOffice'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        taxOffice: {
            required: ['id', 'name'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                name: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        numberOfStores: {
            type: 'integer',
            format: 'int32'
        },
        accountManagers: {
            type: 'array',
            items: {
                required: ['name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_RefundPoints_RefundPointBasicInformationDto = {
    required: ['accountManagers', 'name', 'numberOfStores', 'taxOffice'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        taxOffice: {
            required: ['id', 'name'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                name: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        numberOfStores: {
            type: 'integer',
            format: 'int32'
        },
        accountManagers: {
            type: 'array',
            items: {
                required: ['name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxOffices_TaxOfficeNameDto = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaderRefundTableHeaders_ContractHeaderRefundTableHeaderCreateAndUpdateDto = {
    required: ['refundTableHeaderId', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        refundTableHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaderRefundTableHeaders_ContractHeaderRefundTableHeaderInformationDto = {
    required: ['id', 'isDefault', 'name', 'validFrom'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_ContractHeaderDetailForMerchantDto = {
    required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'merchantClassification', 'name', 'refundTableHeaders', 'status', 'validFrom'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        contractTypeIdentifier: {
            type: 'string',
            format: 'uuid'
        },
        webSite: {
            maxLength: 1024,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        merchantClassification: {
            enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
            type: 'string'
        },
        status: {
            enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
            type: 'string'
        },
        merchantBasicInformationDto: {
            required: ['accountManagers', 'name', 'numberOfStores', 'taxOffice'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                taxOffice: {
                    required: ['id', 'name'],
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            format: 'uuid'
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                numberOfStores: {
                    type: 'integer',
                    format: 'int32'
                },
                accountManagers: {
                    type: 'array',
                    items: {
                        required: ['name'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            name: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        isDraft: {
            type: 'boolean'
        },
        isEnabled: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        contractType: {
            enum: ['Merchant', 'RefundPoint'],
            type: 'string'
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        refundTableHeaders: {
            type: 'array',
            items: {
                required: ['id', 'isDefault', 'name', 'validFrom'],
                type: 'object',
                properties: {
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            }
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_ContractHeaderForMerchantCreateDto = {
    required: ['addressCommonDataId', 'merchantClassification', 'refundTableHeaders', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        webSite: {
            maxLength: 1024,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        merchantClassification: {
            enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
            type: 'string'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        refundTableHeaders: {
            type: 'array',
            items: {
                required: ['refundTableHeaderId', 'validFrom'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    refundTableHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            }
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_ContractHeaderForMerchantDto = {
    required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'name', 'status', 'validFrom'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        contractTypeIdentifier: {
            type: 'string',
            format: 'uuid'
        },
        isDraft: {
            type: 'boolean'
        },
        isEnabled: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        status: {
            enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
            type: 'string'
        },
        contractType: {
            enum: ['Merchant', 'RefundPoint'],
            type: 'string'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_ContractHeaderForMerchantUpdateDto = {
    required: ['addressCommonDataId', 'merchantClassification', 'status', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        webSite: {
            maxLength: 1024,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        merchantClassification: {
            enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
            type: 'string'
        },
        status: {
            enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
            type: 'string'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        refundTableHeaders: {
            type: 'array',
            items: {
                required: ['refundTableHeaderId', 'validFrom'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    refundTableHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_ContractHeaderInformationForVATStatementDto = {
    type: 'object',
    properties: {
        merchantId: {
            type: 'string',
            format: 'uuid'
        },
        contractHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        billingPeriod: {
            enum: ['OneTimePerMonth', 'TwoTimesPerMonth'],
            type: 'string'
        },
        termOfPayment: {
            type: 'integer',
            format: 'int32'
        },
        isFactoring: {
            type: 'boolean'
        },
        deliveryMethod: {
            enum: ['ElectronicInvoice', 'Email', 'PaperInvoice'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_EnsureHasEnabledContractHeaderRequestDto = {
    required: ['invoices', 'merchantId'],
    type: 'object',
    properties: {
        merchantId: {
            type: 'string',
            description: 'Gets or sets the ID of the merchant to check.',
            format: 'uuid'
        },
        invoices: {
            type: 'array',
            items: {
                required: ['invoiceAmount', 'invoiceDate'],
                type: 'object',
                properties: {
                    invoiceDate: {
                        type: 'string',
                        description: 'Gets or sets the date of the invoice.',
                        format: 'date-time'
                    },
                    invoiceAmount: {
                        type: 'number',
                        description: 'Gets or sets the amount of the invoice.',
                        format: 'double'
                    }
                },
                additionalProperties: false,
                description: 'Represents an item in the request to ensure that a merchant has an active contract header.'
            },
            description: 'Gets or sets a list of tuples containing the invoice date and amount to verify against the contract headers.'
        }
    },
    additionalProperties: false,
    description: 'Represents a request to ensure that a merchant has an active contract header.'
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractHeaders_EnsureHasEnabledContractHeaderRequestItemDto = {
    required: ['invoiceAmount', 'invoiceDate'],
    type: 'object',
    properties: {
        invoiceDate: {
            type: 'string',
            description: 'Gets or sets the date of the invoice.',
            format: 'date-time'
        },
        invoiceAmount: {
            type: 'number',
            description: 'Gets or sets the amount of the invoice.',
            format: 'double'
        }
    },
    additionalProperties: false,
    description: 'Represents an item in the request to ensure that a merchant has an active contract header.'
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractSettings_ContractSettingCreateDto = {
    required: ['invoiceChannel', 'invoicingAddressCommonDataId', 'invoicingFrequency', 'name', 'receiptType', 'referenceNumber', 'termOfPayment'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        referenceNumber: {
            type: 'integer',
            format: 'int32'
        },
        invoicingFrequency: {
            enum: ['OneTimePerMonth', 'TwoTimesPerMonth'],
            type: 'string'
        },
        termOfPayment: {
            type: 'integer',
            format: 'int32'
        },
        deliveryFee: {
            type: 'boolean'
        },
        factoring: {
            type: 'boolean'
        },
        invoicingAddressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        invoiceChannel: {
            enum: ['ElectronicInvoice', 'Email', 'PaperInvoice'],
            type: 'string'
        },
        eTaxFree: {
            type: 'boolean'
        },
        receiptType: {
            enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
            type: 'string'
        },
        crossTaxFreeForm: {
            type: 'boolean'
        },
        facturaNumberIsUnique: {
            type: 'boolean'
        },
        goodsHaveSerialNumbers: {
            type: 'boolean'
        },
        excludeFromCashLimit: {
            type: 'boolean'
        },
        deskoScanner: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractSettings_ContractSettingDto = {
    required: ['id', 'invoiceChannel', 'invoicingAddressCommonData', 'invoicingFrequency', 'name', 'receiptType', 'referenceNumber', 'termOfPayment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        referenceNumber: {
            type: 'integer',
            format: 'int32'
        },
        invoicingFrequency: {
            enum: ['OneTimePerMonth', 'TwoTimesPerMonth'],
            type: 'string'
        },
        termOfPayment: {
            type: 'integer',
            format: 'int32'
        },
        deliveryFee: {
            type: 'boolean'
        },
        factoring: {
            type: 'boolean'
        },
        invoicingAddressCommonData: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        invoiceChannel: {
            enum: ['ElectronicInvoice', 'Email', 'PaperInvoice'],
            type: 'string'
        },
        eTaxFree: {
            type: 'boolean'
        },
        receiptType: {
            enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
            type: 'string'
        },
        crossTaxFreeForm: {
            type: 'boolean'
        },
        facturaNumberIsUnique: {
            type: 'boolean'
        },
        goodsHaveSerialNumbers: {
            type: 'boolean'
        },
        excludeFromCashLimit: {
            type: 'boolean'
        },
        deskoScanner: {
            type: 'boolean'
        },
        contractHeaderId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractSettings_ContractSettingMakeDefaultDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        contractSettingId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractSettings_ContractSettingUpdateDto = {
    required: ['invoiceChannel', 'invoicingAddressCommonDataId', 'invoicingFrequency', 'name', 'receiptType', 'referenceNumber', 'termOfPayment'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        referenceNumber: {
            type: 'integer',
            format: 'int32'
        },
        invoicingFrequency: {
            enum: ['OneTimePerMonth', 'TwoTimesPerMonth'],
            type: 'string'
        },
        termOfPayment: {
            type: 'integer',
            format: 'int32'
        },
        deliveryFee: {
            type: 'boolean'
        },
        factoring: {
            type: 'boolean'
        },
        invoicingAddressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        invoiceChannel: {
            enum: ['ElectronicInvoice', 'Email', 'PaperInvoice'],
            type: 'string'
        },
        eTaxFree: {
            type: 'boolean'
        },
        receiptType: {
            enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
            type: 'string'
        },
        crossTaxFreeForm: {
            type: 'boolean'
        },
        facturaNumberIsUnique: {
            type: 'boolean'
        },
        goodsHaveSerialNumbers: {
            type: 'boolean'
        },
        excludeFromCashLimit: {
            type: 'boolean'
        },
        deskoScanner: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractStores_ContractStoreCreateAndUpdateByListDto = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        contractStores: {
            type: 'array',
            items: {
                required: ['contractSettingId', 'contractTypeIdentifiersSubId', 'receiptType'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    contractTypeIdentifiersSubId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    receiptType: {
                        enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
                        type: 'string'
                    },
                    contractSettingId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractStores_ContractStoreCreateAndUpdateDto = {
    required: ['contractSettingId', 'contractTypeIdentifiersSubId', 'receiptType'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        contractTypeIdentifiersSubId: {
            type: 'string',
            format: 'uuid'
        },
        receiptType: {
            enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
            type: 'string'
        },
        contractSettingId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractStores_ContractStoreDetailedDto = {
    required: ['contractTypeIdentifiersSubId', 'receiptType'],
    type: 'object',
    properties: {
        contractTypeIdentifiersSubId: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        contractSettingId: {
            type: 'string',
            format: 'uuid'
        },
        receiptType: {
            enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForMerchant_ContractStores_ContractStoreDto = {
    required: ['contractSettingId', 'contractTypeIdentifiersSubId', 'id', 'receiptType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        contractTypeIdentifiersSubId: {
            type: 'string',
            format: 'uuid'
        },
        contractSettingId: {
            type: 'string',
            format: 'uuid'
        },
        receiptType: {
            enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaderRefundFeeHeaders_ContractHeaderRefundFeeHeaderCreateAndUpdateDto = {
    required: ['refundFeeHeaderId', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        refundFeeHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaderRefundFeeHeaders_ContractHeaderRefundFeeHeaderInformationDto = {
    required: ['id', 'isDefault', 'name', 'validFrom'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesForRebateRequestDto = {
    type: 'object',
    properties: {
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        },
        tagAmounts: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    tagId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    merchantId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    sisAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    grossCommission: {
                        type: 'number',
                        format: 'double'
                    },
                    vatRate: {
                        type: 'number',
                        format: 'double'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        rebateDate: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesForRebateResponseDto = {
    type: 'object',
    properties: {
        tagRebateAmounts: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    tagId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    rebateAmount: {
                        type: 'number',
                        format: 'double'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesForRebateTagAmountDto = {
    type: 'object',
    properties: {
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        merchantId: {
            type: 'string',
            format: 'uuid'
        },
        sisAmount: {
            type: 'number',
            format: 'double'
        },
        grossCommission: {
            type: 'number',
            format: 'double'
        },
        vatRate: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesForRefundRequestDto = {
    type: 'object',
    properties: {
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        },
        tagAmounts: {
            type: 'object',
            additionalProperties: {
                type: 'number',
                format: 'double'
            },
            nullable: true
        },
        refundDate: {
            type: 'string',
            format: 'date-time'
        },
        earlyRefund: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesForRefundResponseDto = {
    type: 'object',
    properties: {
        tagRefundAmounts: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    tagId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    refundAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    touristFee: {
                        type: 'number',
                        format: 'double'
                    },
                    touristBonusFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    agentFee: {
                        type: 'number',
                        format: 'double'
                    },
                    airportFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    earlyRefundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesTagRebateItem = {
    type: 'object',
    properties: {
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        rebateAmount: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_CalculateFeesTagRefundItem = {
    type: 'object',
    properties: {
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        touristFee: {
            type: 'number',
            format: 'double'
        },
        touristBonusFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        agentFee: {
            type: 'number',
            format: 'double'
        },
        airportFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        earlyRefundFee: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_ContractHeaderDetailForRefundPointDto = {
    required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'merchantClassification', 'name', 'refundFeeHeaders', 'status', 'validFrom'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        contractTypeIdentifier: {
            type: 'string',
            format: 'uuid'
        },
        webSite: {
            maxLength: 1024,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        merchantClassification: {
            enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
            type: 'string'
        },
        status: {
            enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
            type: 'string'
        },
        refundPointBasicInformationDto: {
            required: ['accountManagers', 'name', 'numberOfStores', 'taxOffice'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                taxOffice: {
                    required: ['id', 'name'],
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            format: 'uuid'
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                numberOfStores: {
                    type: 'integer',
                    format: 'int32'
                },
                accountManagers: {
                    type: 'array',
                    items: {
                        required: ['name'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            name: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        isDraft: {
            type: 'boolean'
        },
        isEnabled: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        earlyRefund: {
            type: 'boolean'
        },
        contractType: {
            enum: ['Merchant', 'RefundPoint'],
            type: 'string'
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        refundFeeHeaders: {
            type: 'array',
            items: {
                required: ['id', 'isDefault', 'name', 'validFrom'],
                type: 'object',
                properties: {
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            }
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_ContractHeaderForRefundPointCreateDto = {
    required: ['addressCommonDataId', 'merchantClassification', 'refundFeeHeaders', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        webSite: {
            maxLength: 1024,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        merchantClassification: {
            enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
            type: 'string'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        refundFeeHeaders: {
            type: 'array',
            items: {
                required: ['refundFeeHeaderId', 'validFrom'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    refundFeeHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            }
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_ContractHeaderForRefundPointDto = {
    required: ['addressCommonDataId', 'contractType', 'contractTypeIdentifier', 'id', 'isActive', 'isDraft', 'isEnabled', 'name', 'status', 'validFrom'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        contractTypeIdentifier: {
            type: 'string',
            format: 'uuid'
        },
        isDraft: {
            type: 'boolean'
        },
        isEnabled: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        status: {
            enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
            type: 'string'
        },
        contractType: {
            enum: ['Merchant', 'RefundPoint'],
            type: 'string'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        earlyRefund: {
            type: 'boolean'
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_ContractsForRefundPoint_ContractHeaders_ContractHeaderForRefundPointUpdateDto = {
    required: ['addressCommonDataId', 'merchantClassification', 'status', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        webSite: {
            maxLength: 1024,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        merchantClassification: {
            enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
            type: 'string'
        },
        status: {
            enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
            type: 'string'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        earlyRefund: {
            type: 'boolean'
        },
        addressCommonDataId: {
            type: 'string',
            format: 'uuid'
        },
        refundFeeHeaders: {
            type: 'array',
            items: {
                required: ['refundFeeHeaderId', 'validFrom'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    refundFeeHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isDefault: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Enums_ContractHeaderStatus = {
    enum: ['None', 'Registered', 'DeRegistrationRequestedByUniRefund', 'DeRegistrationDataRequestedByAuthorities', 'SuspendedInternallyAfterDeRegistrationDecline', 'DeRegisteredAtAuthorities', 'SuspendedInternallyOnly', 'SuspensionRequestedByUniRefund', 'SuspensionRequestedByAuthorities', 'UnSuspensionRequestedByUniRefund', 'UnSuspensionRequestedByAuthorities', 'SuspendedAtAuthorities', 'UnSuspensionForFurtherDeRegistrationInvitedByAuthorities', 'UnSuspensionForFurtherDeRegistrationRequestedByUniRefund', 'Terminated'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_ContractType = {
    enum: ['Merchant', 'RefundPoint'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_FeeType = {
    enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_InvoiceChannel = {
    enum: ['ElectronicInvoice', 'Email', 'PaperInvoice'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_InvoicingFrequency = {
    enum: ['OneTimePerMonth', 'TwoTimesPerMonth'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_MerchantClassification = {
    enum: ['Excellent', 'Good', 'Satisfactory', 'Low'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_RebateStatementPeriod = {
    enum: ['None', 'Monthly', 'Quarterly', 'BiAnnually', 'Annually'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_ReceiptType = {
    enum: ['None', 'NoBarcodeNumber', 'NoBarcodeText', 'Barcode', 'QRCodeIntegration', 'UniRefundVoucherIntegration'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_RefundMethod = {
    enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Enums_VariableFee = {
    enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
    type: 'string'
} as const;

export const $UniRefund_ContractService_Rebates_MinimumNetCommissions_MinimumNetCommissionDto = {
    required: ['amount', 'id', 'validFrom'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        appliedOrganizationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_MinimumNetCommissions_MinimumNetCommissionUpSertDto = {
    required: ['amount', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        appliedOrganizationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_ProcessingFeeDetails_ProcessingFeeDetailCreateDto = {
    required: ['amount', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        amount: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_ProcessingFeeDetails_ProcessingFeeDetailDto = {
    required: ['amount', 'id', 'name', 'rebateTableHeaderId'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        rebateTableHeaderId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_ProcessingFeeDetails_ProcessingFeeDetailUpdateWithRandomIdDto = {
    required: ['amount', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        amount: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateSettingRebateTableHeaders_RebateSettingRebateTableHeaderInformationDto = {
    required: ['id', 'name', 'validFrom'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateSettings_RebateSettingDto = {
    required: ['affiliationIdForContact', 'contractHeaderId', 'id', 'rebateStatementPeriod'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        referenceNumber: {
            type: 'string',
            nullable: true
        },
        isTrustedMerchant: {
            type: 'boolean'
        },
        rebateStatementPeriod: {
            enum: ['None', 'Monthly', 'Quarterly', 'BiAnnually', 'Annually'],
            type: 'string'
        },
        affiliationIdForContact: {
            type: 'string',
            format: 'uuid'
        },
        contractHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        rebateTableHeaders: {
            type: 'array',
            items: {
                required: ['id', 'name', 'validFrom'],
                type: 'object',
                properties: {
                    name: {
                        minLength: 1,
                        type: 'string'
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        minimumNetCommissions: {
            type: 'array',
            items: {
                required: ['amount', 'id', 'validFrom'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    appliedOrganizationId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateSettings_RebateSettingUpSertDto = {
    required: ['affiliationIdForContact', 'rebateStatementPeriod'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        referenceNumber: {
            type: 'string',
            nullable: true
        },
        isTrustedMerchant: {
            type: 'boolean',
            nullable: true
        },
        rebateStatementPeriod: {
            enum: ['None', 'Monthly', 'Quarterly', 'BiAnnually', 'Annually'],
            type: 'string'
        },
        affiliationIdForContact: {
            type: 'string',
            format: 'uuid'
        },
        rebateTableHeaders: {
            type: 'array',
            items: {
                required: ['rebateTableHeaderId', 'validFrom'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    rebateTableHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        minimumNetCommissions: {
            type: 'array',
            items: {
                required: ['amount', 'validFrom'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    },
                    validFrom: {
                        type: 'string',
                        format: 'date-time'
                    },
                    validTo: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    appliedOrganizationId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableDetails_RebateTableDetailCreateDto = {
    required: ['fixedFeeValue', 'percentFeeValue', 'refundMethod', 'variableFee'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        fixedFeeValue: {
            type: 'number',
            format: 'double'
        },
        percentFeeValue: {
            type: 'number',
            format: 'double'
        },
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        },
        variableFee: {
            enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableDetails_RebateTableDetailDto = {
    required: ['fixedFeeValue', 'id', 'percentFeeValue', 'rebateTableHeaderId', 'refundMethod', 'variableFee'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        fixedFeeValue: {
            type: 'number',
            format: 'double'
        },
        percentFeeValue: {
            type: 'number',
            format: 'double'
        },
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        },
        variableFee: {
            enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
            type: 'string'
        },
        rebateTableHeaderId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableDetails_RebateTableDetailUpdateWithRandomIdDto = {
    required: ['fixedFeeValue', 'percentFeeValue', 'refundMethod', 'variableFee'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        fixedFeeValue: {
            type: 'number',
            format: 'double'
        },
        percentFeeValue: {
            type: 'number',
            format: 'double'
        },
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        },
        variableFee: {
            enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableHeaders_RebateTableHeaderCreateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        calculateNetCommissionInsteadOfRefund: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        rebateTableDetails: {
            type: 'array',
            items: {
                required: ['fixedFeeValue', 'percentFeeValue', 'refundMethod', 'variableFee'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    fixedFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    percentFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundMethod: {
                        enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
                        type: 'string'
                    },
                    variableFee: {
                        enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        processingFeeDetails: {
            type: 'array',
            items: {
                required: ['amount', 'name'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableHeaders_RebateTableHeaderDto = {
    required: ['calculateNetCommissionInsteadOfRefund', 'id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        calculateNetCommissionInsteadOfRefund: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        merchantName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        rebateTableDetails: {
            type: 'array',
            items: {
                required: ['fixedFeeValue', 'id', 'percentFeeValue', 'rebateTableHeaderId', 'refundMethod', 'variableFee'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    fixedFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    percentFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundMethod: {
                        enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
                        type: 'string'
                    },
                    variableFee: {
                        enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
                        type: 'string'
                    },
                    rebateTableHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        processingFeeDetails: {
            type: 'array',
            items: {
                required: ['amount', 'id', 'name', 'rebateTableHeaderId'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    },
                    rebateTableHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableHeaders_RebateTableHeaderInformationDto = {
    required: ['id', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        isTemplate: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableHeaders_RebateTableHeaderListDto = {
    required: ['calculateNetCommissionInsteadOfRefund', 'id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        calculateNetCommissionInsteadOfRefund: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        merchantName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableHeaders_RebateTableHeaderUpdateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        calculateNetCommissionInsteadOfRefund: {
            type: 'boolean'
        },
        rebateTableDetails: {
            type: 'array',
            items: {
                required: ['fixedFeeValue', 'percentFeeValue', 'refundMethod', 'variableFee'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    fixedFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    percentFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundMethod: {
                        enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
                        type: 'string'
                    },
                    variableFee: {
                        enum: ['PercentOfGC', 'PercentOfGcWithoutVAT', 'PercentOfVAT', 'PercentOfSIS'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        processingFeeDetails: {
            type: 'array',
            items: {
                required: ['amount', 'name'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Rebates_RebateTableHeaders_RebateTableHeadersToRebateSettingUpSertDto = {
    required: ['rebateTableHeaderId', 'validFrom'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        rebateTableHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        validFrom: {
            type: 'string',
            format: 'date-time'
        },
        validTo: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeDetails_RefundFeeDetailCreateDto = {
    required: ['amountFrom', 'amountTo', 'feeType', 'fixedFeeValue', 'maxFee', 'minFee', 'percentFeeValue', 'refundMethod'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        amountFrom: {
            type: 'number',
            format: 'double'
        },
        amountTo: {
            type: 'number',
            format: 'double'
        },
        fixedFeeValue: {
            type: 'number',
            format: 'double'
        },
        percentFeeValue: {
            type: 'number',
            format: 'double'
        },
        minFee: {
            type: 'number',
            format: 'double'
        },
        maxFee: {
            type: 'number',
            format: 'double'
        },
        feeType: {
            enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
            type: 'string'
        },
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeDetails_RefundFeeDetailDto = {
    required: ['amountFrom', 'amountTo', 'feeType', 'fixedFeeValue', 'id', 'maxFee', 'minFee', 'percentFeeValue', 'refundMethod'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        amountFrom: {
            type: 'number',
            format: 'double'
        },
        amountTo: {
            type: 'number',
            format: 'double'
        },
        fixedFeeValue: {
            type: 'number',
            format: 'double'
        },
        percentFeeValue: {
            type: 'number',
            format: 'double'
        },
        minFee: {
            type: 'number',
            format: 'double'
        },
        maxFee: {
            type: 'number',
            format: 'double'
        },
        feeType: {
            enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
            type: 'string'
        },
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeDetails_RefundFeeDetailUpdateWithRandomIdDto = {
    required: ['amountFrom', 'amountTo', 'feeType', 'fixedFeeValue', 'maxFee', 'minFee', 'percentFeeValue', 'refundMethod'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        amountFrom: {
            type: 'number',
            format: 'double'
        },
        amountTo: {
            type: 'number',
            format: 'double'
        },
        fixedFeeValue: {
            type: 'number',
            format: 'double'
        },
        percentFeeValue: {
            type: 'number',
            format: 'double'
        },
        minFee: {
            type: 'number',
            format: 'double'
        },
        maxFee: {
            type: 'number',
            format: 'double'
        },
        feeType: {
            enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
            type: 'string'
        },
        refundMethod: {
            enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeHeaders_RefundFeeHeaderCreateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        refundPointId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundFeeDetails: {
            type: 'array',
            items: {
                required: ['amountFrom', 'amountTo', 'feeType', 'fixedFeeValue', 'percentFeeValue', 'refundMethod'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    amountFrom: {
                        type: 'number',
                        format: 'double'
                    },
                    amountTo: {
                        type: 'number',
                        format: 'double'
                    },
                    fixedFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    percentFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    minFee: {
                        type: 'number',
                        format: 'double'
                    },
                    maxFee: {
                        type: 'number',
                        format: 'double'
                    },
                    feeType: {
                        enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
                        type: 'string'
                    },
                    refundMethod: {
                        enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeHeaders_RefundFeeHeaderDto = {
    required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        refundPointId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundPointName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundFeeDetails: {
            type: 'array',
            items: {
                required: ['amountFrom', 'amountTo', 'feeType', 'fixedFeeValue', 'id', 'maxFee', 'minFee', 'percentFeeValue', 'refundMethod'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    amountFrom: {
                        type: 'number',
                        format: 'double'
                    },
                    amountTo: {
                        type: 'number',
                        format: 'double'
                    },
                    fixedFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    percentFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    minFee: {
                        type: 'number',
                        format: 'double'
                    },
                    maxFee: {
                        type: 'number',
                        format: 'double'
                    },
                    feeType: {
                        enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
                        type: 'string'
                    },
                    refundMethod: {
                        enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeHeaders_RefundFeeHeaderInformationDto = {
    required: ['id', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        isTemplate: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeHeaders_RefundFeeHeaderListDto = {
    required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        refundPointId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundPointName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundFeeHeaders_RefundFeeHeaderUpdateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        refundFeeDetails: {
            type: 'array',
            items: {
                required: ['amountFrom', 'amountTo', 'feeType', 'fixedFeeValue', 'maxFee', 'minFee', 'percentFeeValue', 'refundMethod'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    amountFrom: {
                        type: 'number',
                        format: 'double'
                    },
                    amountTo: {
                        type: 'number',
                        format: 'double'
                    },
                    fixedFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    percentFeeValue: {
                        type: 'number',
                        format: 'double'
                    },
                    minFee: {
                        type: 'number',
                        format: 'double'
                    },
                    maxFee: {
                        type: 'number',
                        format: 'double'
                    },
                    feeType: {
                        enum: ['TouristFee', 'TouristBonusFee', 'AgentFee', 'AirportFee', 'EarlyRefundFee'],
                        type: 'string'
                    },
                    refundMethod: {
                        enum: ['All', 'Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableDetails_RefundTableDetailCreateDto = {
    required: ['maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        vatRate: {
            type: 'number',
            format: 'double'
        },
        minValue: {
            type: 'number',
            format: 'double'
        },
        maxValue: {
            type: 'number',
            format: 'double'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        refundPercent: {
            type: 'number',
            format: 'double'
        },
        isLoyalty: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableDetails_RefundTableDetailDto = {
    required: ['id', 'maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        vatRate: {
            type: 'number',
            format: 'double'
        },
        minValue: {
            type: 'number',
            format: 'double'
        },
        maxValue: {
            type: 'number',
            format: 'double'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        refundPercent: {
            type: 'number',
            format: 'double'
        },
        isLoyalty: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableDetails_RefundTableDetailUpdateWithRandomIdDto = {
    required: ['maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        vatRate: {
            type: 'number',
            format: 'double'
        },
        minValue: {
            type: 'number',
            format: 'double'
        },
        maxValue: {
            type: 'number',
            format: 'double'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        refundPercent: {
            type: 'number',
            format: 'double'
        },
        isLoyalty: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableHeaders_RefundTableHeaderCreateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isBundling: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundTableDetails: {
            type: 'array',
            items: {
                required: ['maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    vatRate: {
                        type: 'number',
                        format: 'double'
                    },
                    minValue: {
                        type: 'number',
                        format: 'double'
                    },
                    maxValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    refundPercent: {
                        type: 'number',
                        format: 'double'
                    },
                    isLoyalty: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableHeaders_RefundTableHeaderDto = {
    required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isBundling: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        merchantName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundTableDetails: {
            type: 'array',
            items: {
                required: ['id', 'maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    vatRate: {
                        type: 'number',
                        format: 'double'
                    },
                    minValue: {
                        type: 'number',
                        format: 'double'
                    },
                    maxValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    refundPercent: {
                        type: 'number',
                        format: 'double'
                    },
                    isLoyalty: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableHeaders_RefundTableHeaderForTagDto = {
    required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isBundling: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        merchantName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundTableDetails: {
            type: 'array',
            items: {
                required: ['id', 'maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    vatRate: {
                        type: 'number',
                        format: 'double'
                    },
                    minValue: {
                        type: 'number',
                        format: 'double'
                    },
                    maxValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    refundPercent: {
                        type: 'number',
                        format: 'double'
                    },
                    isLoyalty: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        contractHeaderId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableHeaders_RefundTableHeaderInformationDto = {
    required: ['id', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        isTemplate: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableHeaders_RefundTableHeaderListDto = {
    required: ['id', 'isAssigned', 'isEditable', 'isTemplate', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isBundling: {
            type: 'boolean'
        },
        isTemplate: {
            type: 'boolean'
        },
        isAssigned: {
            type: 'boolean'
        },
        isEditable: {
            type: 'boolean'
        },
        isCustomizedOverTemplate: {
            type: 'boolean',
            nullable: true
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        merchantName: {
            type: 'string',
            nullable: true
        },
        sourceTemplateId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_ContractService_Refunds_RefundTableHeaders_RefundTableHeaderUpdateDto = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isBundling: {
            type: 'boolean'
        },
        refundTableDetails: {
            type: 'array',
            items: {
                required: ['maxValue', 'minValue', 'refundAmount', 'refundPercent', 'vatRate'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    vatRate: {
                        type: 'number',
                        format: 'double'
                    },
                    minValue: {
                        type: 'number',
                        format: 'double'
                    },
                    maxValue: {
                        type: 'number',
                        format: 'double'
                    },
                    refundAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    refundPercent: {
                        type: 'number',
                        format: 'double'
                    },
                    isLoyalty: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_Shared_Contracts_Enums_PartyType = {
    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE'],
    type: 'string'
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationAuthConfigurationDto = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDto = {
    type: 'object',
    properties: {
        localization: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        }
                    },
                    nullable: true
                },
                resources: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            texts: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'string'
                                },
                                nullable: true
                            },
                            baseResources: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                languages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            cultureName: {
                                type: 'string',
                                nullable: true
                            },
                            uiCultureName: {
                                type: 'string',
                                nullable: true
                            },
                            displayName: {
                                type: 'string',
                                nullable: true
                            },
                            twoLetterISOLanguageName: {
                                type: 'string',
                                nullable: true,
                                readOnly: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                currentCulture: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            nullable: true
                        },
                        englishName: {
                            type: 'string',
                            nullable: true
                        },
                        threeLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        twoLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        isRightToLeft: {
                            type: 'boolean'
                        },
                        cultureName: {
                            type: 'string',
                            nullable: true
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        nativeName: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormat: {
                            type: 'object',
                            properties: {
                                calendarAlgorithmType: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateTimeFormatLong: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortDatePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                fullDateTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateSeparator: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                longTimePattern: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                },
                defaultResourceName: {
                    type: 'string',
                    nullable: true
                },
                languagesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                },
                languageFilesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        auth: {
            type: 'object',
            properties: {
                grantedPolicies: {
                    type: 'object',
                    additionalProperties: {
                        type: 'boolean'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        setting: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        currentUser: {
            type: 'object',
            properties: {
                isAuthenticated: {
                    type: 'boolean'
                },
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                tenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorTenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserName: {
                    type: 'string',
                    nullable: true
                },
                impersonatorTenantName: {
                    type: 'string',
                    nullable: true
                },
                userName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                surName: {
                    type: 'string',
                    nullable: true
                },
                email: {
                    type: 'string',
                    nullable: true
                },
                emailVerified: {
                    type: 'boolean'
                },
                phoneNumber: {
                    type: 'string',
                    nullable: true
                },
                phoneNumberVerified: {
                    type: 'boolean'
                },
                roles: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                sessionId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        features: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        globalFeatures: {
            type: 'object',
            properties: {
                enabledFeatures: {
                    uniqueItems: true,
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        multiTenancy: {
            type: 'object',
            properties: {
                isEnabled: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        currentTenant: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        timing: {
            type: 'object',
            properties: {
                timeZone: {
                    type: 'object',
                    properties: {
                        iana: {
                            type: 'object',
                            properties: {
                                timeZoneName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        windows: {
                            type: 'object',
                            properties: {
                                timeZoneId: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        clock: {
            type: 'object',
            properties: {
                kind: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        objectExtensions: {
            type: 'object',
            properties: {
                modules: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            entities: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'object',
                                    properties: {
                                        properties: {
                                            type: 'object',
                                            additionalProperties: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    displayName: {
                                                        type: 'object',
                                                        properties: {
                                                            name: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resource: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    api: {
                                                        type: 'object',
                                                        properties: {
                                                            onGet: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onUpdate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    ui: {
                                                        type: 'object',
                                                        properties: {
                                                            onTable: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreateForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onEditForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            lookup: {
                                                                type: 'object',
                                                                properties: {
                                                                    url: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    resultListPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    displayPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    valuePropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    filterParamName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    attributes: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object',
                                                            properties: {
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                config: {
                                                                    type: 'object',
                                                                    additionalProperties: {},
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        },
                                                        nullable: true
                                                    },
                                                    configuration: {
                                                        type: 'object',
                                                        additionalProperties: {},
                                                        nullable: true
                                                    },
                                                    defaultValue: {
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            nullable: true
                                        },
                                        configuration: {
                                            type: 'object',
                                            additionalProperties: {},
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            configuration: {
                                type: 'object',
                                additionalProperties: {},
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                enums: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            fields: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        value: {
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            localizationResource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationFeatureConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationGlobalFeatureConfigurationDto = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    cultureName: {
                        type: 'string',
                        nullable: true
                    },
                    uiCultureName: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    twoLetterISOLanguageName: {
                        type: 'string',
                        nullable: true,
                        readOnly: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDto = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationResourceDto = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationSettingConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ClockDto = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentCultureDto = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            type: 'object',
            properties: {
                calendarAlgorithmType: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormatLong: {
                    type: 'string',
                    nullable: true
                },
                shortDatePattern: {
                    type: 'string',
                    nullable: true
                },
                fullDateTimePattern: {
                    type: 'string',
                    nullable: true
                },
                dateSeparator: {
                    type: 'string',
                    nullable: true
                },
                shortTimePattern: {
                    type: 'string',
                    nullable: true
                },
                longTimePattern: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentUserDto = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        sessionId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_DateTimeFormatDto = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_IanaTimeZone = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_EntityExtensionDto = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            resource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    api: {
                        type: 'object',
                        properties: {
                            onGet: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onUpdate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    ui: {
                        type: 'object',
                        properties: {
                            onTable: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreateForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onEditForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            lookup: {
                                type: 'object',
                                properties: {
                                    url: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    resultListPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    displayPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    valuePropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    filterParamName: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                config: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumDto = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumFieldDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiCreateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiDto = {
    type: 'object',
    properties: {
        onGet: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onUpdate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiGetDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiUpdateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyAttributeDto = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyDto = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true
                },
                resource: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        api: {
            type: 'object',
            properties: {
                onGet: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onUpdate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        ui: {
            type: 'object',
            properties: {
                onTable: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreateForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onEditForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                lookup: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            nullable: true
                        },
                        resultListPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        displayPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        valuePropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        filterParamName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    config: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiDto = {
    type: 'object',
    properties: {
        onTable: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreateForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onEditForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        lookup: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    nullable: true
                },
                resultListPropertyName: {
                    type: 'string',
                    nullable: true
                },
                displayPropertyName: {
                    type: 'string',
                    nullable: true
                },
                valuePropertyName: {
                    type: 'string',
                    nullable: true
                },
                filterParamName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiFormDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiLookupDto = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiTableDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_LocalizableStringDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ModuleExtensionDto = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    properties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        resource: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                api: {
                                    type: 'object',
                                    properties: {
                                        onGet: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onUpdate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                ui: {
                                    type: 'object',
                                    properties: {
                                        onTable: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreateForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onEditForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        lookup: {
                                            type: 'object',
                                            properties: {
                                                url: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                resultListPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                displayPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                valuePropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                filterParamName: {
                                                    type: 'string',
                                                    nullable: true
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                attributes: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            config: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ObjectExtensionsDto = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    entities: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                properties: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            displayName: {
                                                type: 'object',
                                                properties: {
                                                    name: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    resource: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            api: {
                                                type: 'object',
                                                properties: {
                                                    onGet: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onUpdate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            ui: {
                                                type: 'object',
                                                properties: {
                                                    onTable: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreateForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onEditForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    lookup: {
                                                        type: 'object',
                                                        properties: {
                                                            url: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resultListPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            displayPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            valuePropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            filterParamName: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            attributes: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        config: {
                                                            type: 'object',
                                                            additionalProperties: {},
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            configuration: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    fields: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    localizationResource: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimeZone = {
    type: 'object',
    properties: {
        iana: {
            type: 'object',
            properties: {
                timeZoneName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        windows: {
            type: 'object',
            properties: {
                timeZoneId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimingDto = {
    type: 'object',
    properties: {
        timeZone: {
            type: 'object',
            properties: {
                iana: {
                    type: 'object',
                    properties: {
                        timeZoneName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                windows: {
                    type: 'object',
                    properties: {
                        timeZoneId: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_WindowsTimeZone = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_CurrentTenantDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_MultiTenancyInfoDto = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ActionApiDescriptionModel = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    nameOnMethod: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    },
                    constraintTypes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    bindingSourceId: {
                        type: 'string',
                        nullable: true
                    },
                    descriptorName: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ApplicationApiDescriptionModel = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    rootPath: {
                        type: 'string',
                        nullable: true
                    },
                    remoteServiceName: {
                        type: 'string',
                        nullable: true
                    },
                    controllers: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                controllerName: {
                                    type: 'string',
                                    nullable: true
                                },
                                controllerGroupName: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRemoteService: {
                                    type: 'boolean'
                                },
                                isIntegrationService: {
                                    type: 'boolean'
                                },
                                apiVersion: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                interfaces: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            methods: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        parametersOnMethod: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'object',
                                                                properties: {
                                                                    name: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeAsString: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    type: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeSimple: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    isOptional: {
                                                                        type: 'boolean'
                                                                    },
                                                                    defaultValue: {
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            nullable: true
                                                        },
                                                        returnValue: {
                                                            type: 'object',
                                                            properties: {
                                                                type: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                actions: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            uniqueName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            httpMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            url: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            supportedVersions: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            parameters: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        nameOnMethod: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        jsonName: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        },
                                                        constraintTypes: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'string'
                                                            },
                                                            nullable: true
                                                        },
                                                        bindingSourceId: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        descriptorName: {
                                                            type: 'string',
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            allowAnonymous: {
                                                type: 'boolean',
                                                nullable: true
                                            },
                                            implementFrom: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    baseType: {
                        type: 'string',
                        nullable: true
                    },
                    isEnum: {
                        type: 'boolean'
                    },
                    enumNames: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    enumValues: {
                        type: 'array',
                        items: {},
                        nullable: true
                    },
                    genericArguments: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    properties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRequired: {
                                    type: 'boolean'
                                },
                                minLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                maxLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                minimum: {
                                    type: 'string',
                                    nullable: true
                                },
                                maximum: {
                                    type: 'string',
                                    nullable: true
                                },
                                regex: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerApiDescriptionModel = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    methods: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    uniqueName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    httpMethod: {
                        type: 'string',
                        nullable: true
                    },
                    url: {
                        type: 'string',
                        nullable: true
                    },
                    supportedVersions: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    parameters: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                nameOnMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                },
                                constraintTypes: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                bindingSourceId: {
                                    type: 'string',
                                    nullable: true
                                },
                                descriptorName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    allowAnonymous: {
                        type: 'boolean',
                        nullable: true
                    },
                    implementFrom: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerInterfaceApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_InterfaceMethodApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_MethodParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ModuleApiDescriptionModel = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    controllerName: {
                        type: 'string',
                        nullable: true
                    },
                    controllerGroupName: {
                        type: 'string',
                        nullable: true
                    },
                    isRemoteService: {
                        type: 'boolean'
                    },
                    isIntegrationService: {
                        type: 'boolean'
                    },
                    apiVersion: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    interfaces: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                methods: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    actions: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                uniqueName: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                httpMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                url: {
                                    type: 'string',
                                    nullable: true
                                },
                                supportedVersions: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                parameters: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            nameOnMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            jsonName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            },
                                            constraintTypes: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            bindingSourceId: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            descriptorName: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                allowAnonymous: {
                                    type: 'boolean',
                                    nullable: true
                                },
                                implementFrom: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_PropertyApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ReturnValueApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_TypeApiDescriptionModel = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isRequired: {
                        type: 'boolean'
                    },
                    minLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    maxLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    minimum: {
                        type: 'string',
                        nullable: true
                    },
                    maximum: {
                        type: 'string',
                        nullable: true
                    },
                    regex: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorInfo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: {
                        type: 'string',
                        nullable: true
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorResponse = {
    type: 'object',
    properties: {
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    nullable: true
                },
                message: {
                    type: 'string',
                    nullable: true
                },
                details: {
                    type: 'string',
                    nullable: true
                },
                data: {
                    type: 'object',
                    additionalProperties: {},
                    nullable: true
                },
                validationErrors: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            message: {
                                type: 'string',
                                nullable: true
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceValidationErrorInfo = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Localization_LanguageInfo = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_NameValue = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;