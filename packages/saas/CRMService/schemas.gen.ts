// This file is auto-generated by @hey-api/openapi-ts

export const $PagedResultDto_AffiliationListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['abpRoleId', 'individualId', 'name', 'roleName'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    roleName: {
                        type: 'string',
                        nullable: true
                    },
                    individualId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    abpRoleId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    abpUserId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    hasUserAccount: {
                        type: 'boolean',
                        nullable: true,
                        readOnly: true
                    },
                    startDate: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    endDate: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isPrimary: {
                        type: 'boolean',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CustomDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['name', 'status', 'typeCode', 'vatNumber'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    telephone: {
                        required: ['id', 'isPrimary', 'localNumber', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            ituCountryCode: {
                                maxLength: 255,
                                minLength: 0,
                                type: 'string',
                                nullable: true
                            },
                            areaCode: {
                                maxLength: 255,
                                minLength: 0,
                                type: 'string',
                                nullable: true
                            },
                            localNumber: {
                                maxLength: 255,
                                minLength: 0,
                                type: 'string',
                                nullable: true
                            },
                            normalizedPhoneNumber: {
                                type: 'string',
                                nullable: true
                            },
                            isPrimary: {
                                type: 'boolean'
                            },
                            type: {
                                enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                                type: 'string'
                            },
                            isConfirmed: {
                                type: 'boolean',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    address: {
                        required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            partyType: {
                                enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                                type: 'string'
                            },
                            partyId: {
                                type: 'string',
                                format: 'uuid'
                            },
                            countryId: {
                                type: 'string',
                                format: 'uuid'
                            },
                            adminAreaLevel1Id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            adminAreaLevel2Id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            neighborhoodId: {
                                type: 'string',
                                format: 'uuid',
                                nullable: true
                            },
                            addressLine: {
                                type: 'string',
                                nullable: true
                            },
                            postalCode: {
                                type: 'string',
                                nullable: true
                            },
                            type: {
                                enum: ['UNKNOWN', 'HOME', 'WORK'],
                                type: 'string'
                            },
                            placeId: {
                                type: 'string',
                                nullable: true
                            },
                            latitude: {
                                type: 'number',
                                format: 'float',
                                nullable: true
                            },
                            longitude: {
                                type: 'number',
                                format: 'float',
                                nullable: true
                            },
                            isPrimary: {
                                type: 'boolean'
                            }
                        },
                        additionalProperties: false
                    },
                    email: {
                        required: ['emailAddress', 'isPrimary', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            emailAddress: {
                                type: 'string',
                                nullable: true
                            },
                            type: {
                                enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                                type: 'string'
                            },
                            isPrimary: {
                                type: 'boolean'
                            }
                        },
                        additionalProperties: false
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    gateNumber: {
                        type: 'string',
                        nullable: true
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'CUSTOM'],
                        type: 'string'
                    },
                    status: {
                        enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CustomListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['name', 'status', 'typeCode'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    gateNumber: {
                        type: 'string',
                        nullable: true
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'CUSTOM'],
                        type: 'string'
                    },
                    status: {
                        enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_IndividualListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['firstname', 'gender', 'lastname'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    firstname: {
                        type: 'string',
                        nullable: true
                    },
                    lastname: {
                        type: 'string',
                        nullable: true
                    },
                    gender: {
                        enum: ['UNKNOWN', 'MALE', 'FEMALE', 'OTHER'],
                        type: 'string'
                    },
                    identificationNumber: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_MerchantListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['isPersonalCompany', 'status', 'typeCode'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    chainCodeId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    externalStoreIdentifier: {
                        type: 'string',
                        nullable: true
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
                        type: 'string'
                    },
                    isPersonalCompany: {
                        type: 'boolean'
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    status: {
                        enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_RefundPointListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['name', 'status', 'typeCode'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    externalStoreIdentifier: {
                        type: 'string',
                        nullable: true
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    status: {
                        enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
                        type: 'string'
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'REFUNDPOINT'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_TaxFreeListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['externalStoreIdentifier', 'name', 'parentName', 'status', 'storeSequence', 'typeCode', 'vatNumber'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    storeSequence: {
                        type: 'string',
                        nullable: true
                    },
                    externalStoreIdentifier: {
                        type: 'string',
                        nullable: true
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'TAXFREE'],
                        type: 'string'
                    },
                    status: {
                        enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_TaxOfficeDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    telephone: {
                        required: ['id', 'isPrimary', 'localNumber', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            ituCountryCode: {
                                maxLength: 255,
                                minLength: 0,
                                type: 'string',
                                nullable: true
                            },
                            areaCode: {
                                maxLength: 255,
                                minLength: 0,
                                type: 'string',
                                nullable: true
                            },
                            localNumber: {
                                maxLength: 255,
                                minLength: 0,
                                type: 'string',
                                nullable: true
                            },
                            normalizedPhoneNumber: {
                                type: 'string',
                                nullable: true
                            },
                            isPrimary: {
                                type: 'boolean'
                            },
                            type: {
                                enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                                type: 'string'
                            },
                            isConfirmed: {
                                type: 'boolean',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    address: {
                        required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            partyType: {
                                enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                                type: 'string'
                            },
                            partyId: {
                                type: 'string',
                                format: 'uuid'
                            },
                            countryId: {
                                type: 'string',
                                format: 'uuid'
                            },
                            adminAreaLevel1Id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            adminAreaLevel2Id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            neighborhoodId: {
                                type: 'string',
                                format: 'uuid',
                                nullable: true
                            },
                            addressLine: {
                                type: 'string',
                                nullable: true
                            },
                            postalCode: {
                                type: 'string',
                                nullable: true
                            },
                            type: {
                                enum: ['UNKNOWN', 'HOME', 'WORK'],
                                type: 'string'
                            },
                            placeId: {
                                type: 'string',
                                nullable: true
                            },
                            latitude: {
                                type: 'number',
                                format: 'float',
                                nullable: true
                            },
                            longitude: {
                                type: 'number',
                                format: 'float',
                                nullable: true
                            },
                            isPrimary: {
                                type: 'boolean'
                            }
                        },
                        additionalProperties: false
                    },
                    email: {
                        required: ['emailAddress', 'isPrimary', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            emailAddress: {
                                type: 'string',
                                nullable: true
                            },
                            type: {
                                enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                                type: 'string'
                            },
                            isPrimary: {
                                type: 'boolean'
                            }
                        },
                        additionalProperties: false
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    externalStoreIdentifier: {
                        type: 'string',
                        nullable: true
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'TAXOFFICE'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_TaxOfficeListResponseDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['name', 'status', 'typeCode'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    vatNumber: {
                        type: 'string',
                        nullable: true
                    },
                    externalStoreIdentifier: {
                        type: 'string',
                        nullable: true
                    },
                    parentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    parentName: {
                        type: 'string',
                        nullable: true
                    },
                    typeCode: {
                        enum: ['HEADQUARTER', 'TAXOFFICE'],
                        type: 'string'
                    },
                    status: {
                        enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_AddressDto = {
    required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        partyType: {
            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
            type: 'string'
        },
        partyId: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid'
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        addressLine: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK'],
            type: 'string'
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_AddressType = {
    enum: ['UNKNOWN', 'HOME', 'WORK'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Addresses_AddressUpSertDto = {
    type: 'object',
    properties: {
        addressId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        countryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        addressLine: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK'],
            type: 'string'
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        isPrimary: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_CreateAddressDto = {
    required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'type'],
    type: 'object',
    properties: {
        partyType: {
            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
            type: 'string'
        },
        partyId: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid'
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        addressLine: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK'],
            type: 'string'
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_AdminAreaLevel1_AdminAreaLevel1Dto = {
    required: ['countryId', 'name', 'plateCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        regionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        plateCode: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_AdminAreaLevel1_CreateAdminAreaLevel1Dto = {
    required: ['countryId', 'name', 'plateCode'],
    type: 'object',
    properties: {
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        regionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        plateCode: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_AdminAreaLevel1_UpdateAdminAreaLevel1Dto = {
    type: 'object',
    properties: {
        countryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        regionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        plateCode: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_AdminAreaLevel2_AdminAreaLevel2Dto = {
    required: ['adminAreaLevel1Id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_AdminAreaLevel2_CreateAdminAreaLevel2Dto = {
    required: ['adminAreaLevel1Id', 'name'],
    type: 'object',
    properties: {
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_AdminAreaLevel2_UpdateAdminAreaLevel2Dto = {
    type: 'object',
    properties: {
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Affiliations_AffiliationDto = {
    required: ['abpRoleId', 'individualId', 'isPrimary', 'partyId', 'partyType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        partyType: {
            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
            type: 'string'
        },
        partyId: {
            type: 'string',
            format: 'uuid'
        },
        individualId: {
            type: 'string',
            format: 'uuid'
        },
        abpUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        abpRoleId: {
            type: 'string',
            format: 'uuid'
        },
        startDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        endDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Affiliations_AffiliationListResponseDto = {
    required: ['abpRoleId', 'individualId', 'name', 'roleName'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        roleName: {
            type: 'string',
            nullable: true
        },
        individualId: {
            type: 'string',
            format: 'uuid'
        },
        abpRoleId: {
            type: 'string',
            format: 'uuid'
        },
        abpUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        hasUserAccount: {
            type: 'boolean',
            nullable: true,
            readOnly: true
        },
        startDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        endDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isPrimary: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Affiliations_CreatePartyAffiliationDto = {
    required: ['abpRoleId', 'individualId'],
    type: 'object',
    properties: {
        individualId: {
            type: 'string',
            format: 'uuid'
        },
        abpRoleId: {
            type: 'string',
            format: 'uuid'
        },
        startDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        endDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Affiliations_UpdateAffiliationDto = {
    type: 'object',
    properties: {
        abpRoleId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        startDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        endDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Countries_CountryDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        code2: {
            type: 'string',
            nullable: true
        },
        code3: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Countries_CreateCountryDto = {
    required: ['code2', 'code3', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        code2: {
            type: 'string',
            nullable: true
        },
        code3: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Countries_UpdateCountryDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        code2: {
            type: 'string',
            nullable: true
        },
        code3: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Customs_CreateCustomDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        gateNumber: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'CUSTOM'],
            type: 'string'
        },
        telephone: {
            type: 'object',
            properties: {
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                emailAddress: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    format: 'email',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Customs_CustomDto = {
    required: ['name', 'status', 'typeCode', 'vatNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        telephone: {
            required: ['id', 'isPrimary', 'localNumber', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                normalizedPhoneNumber: {
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                },
                isConfirmed: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                emailAddress: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        name: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        gateNumber: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'CUSTOM'],
            type: 'string'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Customs_CustomListResponseDto = {
    required: ['name', 'status', 'typeCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        gateNumber: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'CUSTOM'],
            type: 'string'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Customs_CustomStatus = {
    enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Customs_CustomTypeCode = {
    enum: ['HEADQUARTER', 'CUSTOM'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Customs_UpdateCustomDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        gateNumber: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Emails_EmailCreateDto = {
    required: ['emailAddress', 'isPrimary', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        emailAddress: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            format: 'email',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        },
        type: {
            enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Emails_EmailDto = {
    required: ['emailAddress', 'isPrimary', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        emailAddress: {
            type: 'string',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
            type: 'string'
        },
        isPrimary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Emails_EmailType = {
    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Emails_EmailUpSertDto = {
    type: 'object',
    properties: {
        emailId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        emailAddress: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            format: 'email',
            nullable: true
        },
        isPrimary: {
            type: 'boolean',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Individuals_CreateIndividualDto = {
    required: ['firstname', 'gender', 'lastname'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstname: {
            type: 'string',
            nullable: true
        },
        lastname: {
            type: 'string',
            nullable: true
        },
        gender: {
            enum: ['UNKNOWN', 'MALE', 'FEMALE', 'OTHER'],
            type: 'string'
        },
        identificationNumber: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        telephone: {
            type: 'object',
            properties: {
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        address: {
            type: 'object',
            properties: {
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                emailAddress: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    format: 'email',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        newUser: {
            required: ['password', 'username'],
            type: 'object',
            properties: {
                username: {
                    type: 'string',
                    nullable: true
                },
                password: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Individuals_IndividualDto = {
    required: ['firstname', 'gender', 'lastname'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstname: {
            type: 'string',
            nullable: true
        },
        lastname: {
            type: 'string',
            nullable: true
        },
        gender: {
            enum: ['UNKNOWN', 'MALE', 'FEMALE', 'OTHER'],
            type: 'string'
        },
        identificationNumber: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED'],
            type: 'string'
        },
        telephone: {
            required: ['id', 'isPrimary', 'localNumber', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                normalizedPhoneNumber: {
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                },
                isConfirmed: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                emailAddress: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Individuals_IndividualGender = {
    enum: ['UNKNOWN', 'MALE', 'FEMALE', 'OTHER'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Individuals_IndividualListResponseDto = {
    required: ['firstname', 'gender', 'lastname'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstname: {
            type: 'string',
            nullable: true
        },
        lastname: {
            type: 'string',
            nullable: true
        },
        gender: {
            enum: ['UNKNOWN', 'MALE', 'FEMALE', 'OTHER'],
            type: 'string'
        },
        identificationNumber: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Individuals_IndividualStatus = {
    enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Individuals_IndividualWithAbpUserDto = {
    required: ['fullname', 'individualId'],
    type: 'object',
    properties: {
        individualId: {
            type: 'string',
            format: 'uuid'
        },
        fullname: {
            type: 'string',
            nullable: true
        },
        abpUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Individuals_NewUser = {
    required: ['password', 'username'],
    type: 'object',
    properties: {
        username: {
            type: 'string',
            nullable: true
        },
        password: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Individuals_UpdateIndividualDto = {
    type: 'object',
    properties: {
        firstname: {
            type: 'string',
            nullable: true
        },
        lastname: {
            type: 'string',
            nullable: true
        },
        gender: {
            enum: ['UNKNOWN', 'MALE', 'FEMALE', 'OTHER'],
            type: 'string'
        },
        identificationNumber: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_CreateMerchantDto = {
    required: ['address', 'email', 'isPersonalCompany', 'name', 'telephone', 'typeCode'],
    type: 'object',
    properties: {
        chainCodeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
            type: 'string'
        },
        isPersonalCompany: {
            type: 'boolean'
        },
        telephone: {
            type: 'object',
            properties: {
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                emailAddress: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    format: 'email',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_MerchantDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        telephone: {
            required: ['id', 'isPrimary', 'localNumber', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                normalizedPhoneNumber: {
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                },
                isConfirmed: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                emailAddress: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        chainCodeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        taxOfficeName: {
            type: 'string',
            nullable: true
        },
        storeSequence: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
            type: 'string'
        },
        isPersonalCompany: {
            type: 'boolean'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_MerchantInfoForTagDto = {
    required: ['address', 'name', 'productGroups'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: 'The **business name** of the merchant. This is the official trading name.',
            nullable: true
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        productGroups: {
            type: 'array',
            items: {
                required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    articleCode: {
                        minLength: 1,
                        type: 'string',
                        description: 'The unique article code for the product group. This field is **required**.'
                    },
                    name: {
                        minLength: 1,
                        type: 'string',
                        description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
                    },
                    unitCode: {
                        enum: ['QNT', 'BAG', 'BOX'],
                        type: 'string'
                    },
                    companyType: {
                        enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
                        type: 'string'
                    },
                    vatId: {
                        type: 'string',
                        description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
                        format: 'uuid'
                    },
                    vatPercent: {
                        type: 'integer',
                        description: 'The percentage of VAT applied to products in this group, if applicable.',
                        format: 'int32',
                        nullable: true
                    },
                    active: {
                        type: 'boolean',
                        description: 'Indicates whether the product group is currently active. This field is **required**.'
                    },
                    food: {
                        type: 'boolean',
                        description: 'Indicates whether the product group consists of food items. This field is **required**.'
                    }
                },
                additionalProperties: false,
                description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
            },
            description: `A list of **product groups** that this merchant sells,
relevant for tax-free eligibility categorization.`,
            nullable: true
        }
    },
    additionalProperties: false,
    description: `Represents the detailed business information for a merchant within the tax-free system.
This DTO is used for transferring and displaying core merchant data.`
} as const;

export const $UniRefund_CRMService_Merchants_MerchantListResponseDto = {
    required: ['isPersonalCompany', 'status', 'typeCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        chainCodeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
            type: 'string'
        },
        isPersonalCompany: {
            type: 'boolean'
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_MerchantStatus = {
    enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Merchants_MerchantSummaryRequestDto = {
    type: 'object',
    properties: {
        vatNumber: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_MerchantSummaryResponseDto = {
    required: ['name', 'status', 'storeSequence', 'typeCode', 'vatNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        storeSequence: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
            type: 'string'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Merchants_MerchantTypeCode = {
    enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Merchants_UpdateMerchantDto = {
    required: ['name', 'typeCode'],
    type: 'object',
    properties: {
        chainCodeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'STORE', 'FRANCHISE'],
            type: 'string'
        },
        isPersonalCompany: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Neighborhoods_CreateNeighborhoodDto = {
    required: ['adminAreaLevel2Id', 'name'],
    type: 'object',
    properties: {
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Neighborhoods_NeighborhoodDto = {
    required: ['adminAreaLevel2Id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Neighborhoods_UpdateNeighborhoodDto = {
    type: 'object',
    properties: {
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_RefundPoints_CreateRefundPointDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'REFUNDPOINT'],
            type: 'string'
        },
        telephone: {
            type: 'object',
            properties: {
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                emailAddress: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    format: 'email',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_RefundPoints_RefundPointDetailForRefund = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        fullAddress: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_RefundPoints_RefundPointDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        telephone: {
            required: ['id', 'isPrimary', 'localNumber', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                normalizedPhoneNumber: {
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                },
                isConfirmed: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                emailAddress: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        taxOfficeName: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_RefundPoints_RefundPointListResponseDto = {
    required: ['name', 'status', 'typeCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        },
        typeCode: {
            enum: ['HEADQUARTER', 'REFUNDPOINT'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_RefundPoints_RefundPointStatus = {
    enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_RefundPoints_RefundPointTypeCode = {
    enum: ['HEADQUARTER', 'REFUNDPOINT'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_RefundPoints_UpdateRefundPointDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Regions_CreateRegionDto = {
    required: ['countryId', 'name'],
    type: 'object',
    properties: {
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        code: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Regions_RegionDto = {
    required: ['countryId', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        code: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Regions_UpdateRegionDto = {
    type: 'object',
    properties: {
        countryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortName: {
            type: 'string',
            nullable: true
        },
        code: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxFrees_CreateTaxFreeDto = {
    required: ['address', 'email', 'name', 'telephone', 'typeCode'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'TAXFREE'],
            type: 'string'
        },
        telephone: {
            type: 'object',
            properties: {
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                emailAddress: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    format: 'email',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxFrees_TaxFreeDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        telephone: {
            required: ['id', 'isPrimary', 'localNumber', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                normalizedPhoneNumber: {
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                },
                isConfirmed: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                emailAddress: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        taxOfficeName: {
            type: 'string',
            nullable: true
        },
        storeSequence: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'TAXFREE'],
            type: 'string'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxFrees_TaxFreeListResponseDto = {
    required: ['externalStoreIdentifier', 'name', 'parentName', 'status', 'storeSequence', 'typeCode', 'vatNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        storeSequence: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'TAXFREE'],
            type: 'string'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxFrees_TaxFreeStatus = {
    enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_TaxFrees_TaxFreeTypeCode = {
    enum: ['HEADQUARTER', 'TAXFREE'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_TaxFrees_UpdateTaxFreeDto = {
    required: ['name', 'status'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        taxOfficeId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxOffices_CreateTaxOfficeDto = {
    required: ['address', 'email', 'name', 'telephone', 'typeCode'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'TAXOFFICE'],
            type: 'string'
        },
        telephone: {
            type: 'object',
            properties: {
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                emailAddress: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    format: 'email',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxOffices_TaxOfficeDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        telephone: {
            required: ['id', 'isPrimary', 'localNumber', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                ituCountryCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                areaCode: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                localNumber: {
                    maxLength: 255,
                    minLength: 0,
                    type: 'string',
                    nullable: true
                },
                normalizedPhoneNumber: {
                    type: 'string',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
                    type: 'string'
                },
                isConfirmed: {
                    type: 'boolean',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                addressLine: {
                    type: 'string',
                    nullable: true
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        email: {
            required: ['emailAddress', 'isPrimary', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                emailAddress: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'PERSONAL', 'WORK', 'SCHOOL', 'OTHER'],
                    type: 'string'
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        name: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'TAXOFFICE'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxOffices_TaxOfficeListResponseDto = {
    required: ['name', 'status', 'typeCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        typeCode: {
            enum: ['HEADQUARTER', 'TAXOFFICE'],
            type: 'string'
        },
        status: {
            enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_TaxOffices_TaxOfficeStatus = {
    enum: ['DRAFT', 'WAITINGAPPROVAL', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', 'SUSPENDED'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_TaxOffices_TaxOfficeTypeCode = {
    enum: ['HEADQUARTER', 'TAXOFFICE'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_TaxOffices_UpdateTaxOfficeDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Telephones_TelephoneCreateDto = {
    type: 'object',
    properties: {
        ituCountryCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        areaCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        localNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Telephones_TelephoneDto = {
    required: ['id', 'isPrimary', 'localNumber', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ituCountryCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        areaCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        localNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        normalizedPhoneNumber: {
            type: 'string',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
            type: 'string'
        },
        isConfirmed: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Telephones_TelephoneUpsertDto = {
    type: 'object',
    properties: {
        telephoneId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        ituCountryCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        areaCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        localNumber: {
            maxLength: 255,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isPrimary: {
            type: 'boolean',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_UserAffiliations_SetPrimaryAffiliationDto = {
    type: 'object',
    properties: {
        partyId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_UserAffiliations_UserAffiliationDto = {
    type: 'object',
    properties: {
        affiliationId: {
            type: 'string',
            format: 'uuid'
        },
        partyId: {
            type: 'string',
            format: 'uuid'
        },
        partyType: {
            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
            type: 'string'
        },
        partyName: {
            type: 'string',
            nullable: true
        },
        vatNumber: {
            type: 'string',
            nullable: true
        },
        externalStoreIdentifier: {
            type: 'string',
            nullable: true
        },
        identificationNumber: {
            type: 'string',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_SettingService_ProductGroupMerchants_CreateProductGroupMerchantBaseDto = {
    required: ['productGroupId'],
    type: 'object',
    properties: {
        productGroupId: {
            type: 'string',
            format: 'uuid'
        },
        isDefault: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_SettingService_ProductGroupMerchants_CreateProductGroupMerchantDto = {
    required: ['productGroupId'],
    type: 'object',
    properties: {
        productGroupId: {
            type: 'string',
            format: 'uuid'
        },
        isDefault: {
            type: 'boolean'
        },
        merchantId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_SettingService_ProductGroupMerchants_ProductGroupMerchantRelationDto = {
    required: ['isActive', 'isAssign', 'isDefault', 'productGroupId', 'productGroupName', 'vatId', 'vatRate'],
    type: 'object',
    properties: {
        productGroupName: {
            minLength: 1,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        isAssign: {
            type: 'boolean'
        },
        productGroupId: {
            type: 'string',
            format: 'uuid'
        },
        vatRate: {
            type: 'number',
            format: 'float'
        },
        vatId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_SettingService_ProductGroups_CompanyTypeCode = {
    enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
    type: 'string'
} as const;

export const $UniRefund_SettingService_ProductGroups_ProductGroupDto = {
    required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        articleCode: {
            minLength: 1,
            type: 'string',
            description: 'The unique article code for the product group. This field is **required**.'
        },
        name: {
            minLength: 1,
            type: 'string',
            description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
        },
        unitCode: {
            enum: ['QNT', 'BAG', 'BOX'],
            type: 'string'
        },
        companyType: {
            enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
            type: 'string'
        },
        vatId: {
            type: 'string',
            description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
            format: 'uuid'
        },
        vatPercent: {
            type: 'integer',
            description: 'The percentage of VAT applied to products in this group, if applicable.',
            format: 'int32',
            nullable: true
        },
        active: {
            type: 'boolean',
            description: 'Indicates whether the product group is currently active. This field is **required**.'
        },
        food: {
            type: 'boolean',
            description: 'Indicates whether the product group consists of food items. This field is **required**.'
        }
    },
    additionalProperties: false,
    description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
} as const;

export const $UniRefund_SettingService_ProductGroups_UnitTypeCode = {
    enum: ['QNT', 'BAG', 'BOX'],
    type: 'string'
} as const;

export const $UniRefund_Shared_ContactInfo_Enums_TelephoneType = {
    enum: ['UNKNOWN', 'HOME', 'WORK', 'MOBILE', 'FAX', 'OTHER'],
    type: 'string'
} as const;

export const $UniRefund_Shared_Contracts_Enums_PartyType = {
    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
    type: 'string'
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationAuthConfigurationDto = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDto = {
    type: 'object',
    properties: {
        localization: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        }
                    },
                    nullable: true
                },
                resources: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            texts: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'string'
                                },
                                nullable: true
                            },
                            baseResources: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                languages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            cultureName: {
                                type: 'string',
                                nullable: true
                            },
                            uiCultureName: {
                                type: 'string',
                                nullable: true
                            },
                            displayName: {
                                type: 'string',
                                nullable: true
                            },
                            twoLetterISOLanguageName: {
                                type: 'string',
                                nullable: true,
                                readOnly: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                currentCulture: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            nullable: true
                        },
                        englishName: {
                            type: 'string',
                            nullable: true
                        },
                        threeLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        twoLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        isRightToLeft: {
                            type: 'boolean'
                        },
                        cultureName: {
                            type: 'string',
                            nullable: true
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        nativeName: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormat: {
                            type: 'object',
                            properties: {
                                calendarAlgorithmType: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateTimeFormatLong: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortDatePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                fullDateTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateSeparator: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                longTimePattern: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                },
                defaultResourceName: {
                    type: 'string',
                    nullable: true
                },
                languagesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                },
                languageFilesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        auth: {
            type: 'object',
            properties: {
                grantedPolicies: {
                    type: 'object',
                    additionalProperties: {
                        type: 'boolean'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        setting: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        currentUser: {
            type: 'object',
            properties: {
                isAuthenticated: {
                    type: 'boolean'
                },
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                tenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorTenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserName: {
                    type: 'string',
                    nullable: true
                },
                impersonatorTenantName: {
                    type: 'string',
                    nullable: true
                },
                userName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                surName: {
                    type: 'string',
                    nullable: true
                },
                email: {
                    type: 'string',
                    nullable: true
                },
                emailVerified: {
                    type: 'boolean'
                },
                phoneNumber: {
                    type: 'string',
                    nullable: true
                },
                phoneNumberVerified: {
                    type: 'boolean'
                },
                roles: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                sessionId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        features: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        globalFeatures: {
            type: 'object',
            properties: {
                enabledFeatures: {
                    uniqueItems: true,
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        multiTenancy: {
            type: 'object',
            properties: {
                isEnabled: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        currentTenant: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        timing: {
            type: 'object',
            properties: {
                timeZone: {
                    type: 'object',
                    properties: {
                        iana: {
                            type: 'object',
                            properties: {
                                timeZoneName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        windows: {
                            type: 'object',
                            properties: {
                                timeZoneId: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        clock: {
            type: 'object',
            properties: {
                kind: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        objectExtensions: {
            type: 'object',
            properties: {
                modules: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            entities: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'object',
                                    properties: {
                                        properties: {
                                            type: 'object',
                                            additionalProperties: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    displayName: {
                                                        type: 'object',
                                                        properties: {
                                                            name: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resource: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    api: {
                                                        type: 'object',
                                                        properties: {
                                                            onGet: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onUpdate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    ui: {
                                                        type: 'object',
                                                        properties: {
                                                            onTable: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreateForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onEditForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            lookup: {
                                                                type: 'object',
                                                                properties: {
                                                                    url: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    resultListPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    displayPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    valuePropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    filterParamName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    attributes: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object',
                                                            properties: {
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                config: {
                                                                    type: 'object',
                                                                    additionalProperties: {},
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        },
                                                        nullable: true
                                                    },
                                                    configuration: {
                                                        type: 'object',
                                                        additionalProperties: {},
                                                        nullable: true
                                                    },
                                                    defaultValue: {
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            nullable: true
                                        },
                                        configuration: {
                                            type: 'object',
                                            additionalProperties: {},
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            configuration: {
                                type: 'object',
                                additionalProperties: {},
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                enums: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            fields: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        value: {
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            localizationResource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationFeatureConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationGlobalFeatureConfigurationDto = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    cultureName: {
                        type: 'string',
                        nullable: true
                    },
                    uiCultureName: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    twoLetterISOLanguageName: {
                        type: 'string',
                        nullable: true,
                        readOnly: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDto = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationResourceDto = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationSettingConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ClockDto = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentCultureDto = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            type: 'object',
            properties: {
                calendarAlgorithmType: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormatLong: {
                    type: 'string',
                    nullable: true
                },
                shortDatePattern: {
                    type: 'string',
                    nullable: true
                },
                fullDateTimePattern: {
                    type: 'string',
                    nullable: true
                },
                dateSeparator: {
                    type: 'string',
                    nullable: true
                },
                shortTimePattern: {
                    type: 'string',
                    nullable: true
                },
                longTimePattern: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentUserDto = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        sessionId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_DateTimeFormatDto = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_IanaTimeZone = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_EntityExtensionDto = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            resource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    api: {
                        type: 'object',
                        properties: {
                            onGet: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onUpdate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    ui: {
                        type: 'object',
                        properties: {
                            onTable: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreateForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onEditForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            lookup: {
                                type: 'object',
                                properties: {
                                    url: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    resultListPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    displayPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    valuePropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    filterParamName: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                config: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumDto = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumFieldDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiCreateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiDto = {
    type: 'object',
    properties: {
        onGet: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onUpdate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiGetDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiUpdateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyAttributeDto = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyDto = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true
                },
                resource: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        api: {
            type: 'object',
            properties: {
                onGet: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onUpdate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        ui: {
            type: 'object',
            properties: {
                onTable: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreateForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onEditForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                lookup: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            nullable: true
                        },
                        resultListPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        displayPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        valuePropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        filterParamName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    config: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiDto = {
    type: 'object',
    properties: {
        onTable: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreateForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onEditForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        lookup: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    nullable: true
                },
                resultListPropertyName: {
                    type: 'string',
                    nullable: true
                },
                displayPropertyName: {
                    type: 'string',
                    nullable: true
                },
                valuePropertyName: {
                    type: 'string',
                    nullable: true
                },
                filterParamName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiFormDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiLookupDto = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiTableDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_LocalizableStringDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ModuleExtensionDto = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    properties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        resource: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                api: {
                                    type: 'object',
                                    properties: {
                                        onGet: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onUpdate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                ui: {
                                    type: 'object',
                                    properties: {
                                        onTable: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreateForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onEditForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        lookup: {
                                            type: 'object',
                                            properties: {
                                                url: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                resultListPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                displayPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                valuePropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                filterParamName: {
                                                    type: 'string',
                                                    nullable: true
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                attributes: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            config: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ObjectExtensionsDto = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    entities: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                properties: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            displayName: {
                                                type: 'object',
                                                properties: {
                                                    name: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    resource: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            api: {
                                                type: 'object',
                                                properties: {
                                                    onGet: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onUpdate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            ui: {
                                                type: 'object',
                                                properties: {
                                                    onTable: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreateForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onEditForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    lookup: {
                                                        type: 'object',
                                                        properties: {
                                                            url: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resultListPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            displayPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            valuePropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            filterParamName: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            attributes: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        config: {
                                                            type: 'object',
                                                            additionalProperties: {},
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            configuration: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    fields: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    localizationResource: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimeZone = {
    type: 'object',
    properties: {
        iana: {
            type: 'object',
            properties: {
                timeZoneName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        windows: {
            type: 'object',
            properties: {
                timeZoneId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimingDto = {
    type: 'object',
    properties: {
        timeZone: {
            type: 'object',
            properties: {
                iana: {
                    type: 'object',
                    properties: {
                        timeZoneName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                windows: {
                    type: 'object',
                    properties: {
                        timeZoneId: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_WindowsTimeZone = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_CurrentTenantDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_MultiTenancyInfoDto = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ActionApiDescriptionModel = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    nameOnMethod: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    },
                    constraintTypes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    bindingSourceId: {
                        type: 'string',
                        nullable: true
                    },
                    descriptorName: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ApplicationApiDescriptionModel = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    rootPath: {
                        type: 'string',
                        nullable: true
                    },
                    remoteServiceName: {
                        type: 'string',
                        nullable: true
                    },
                    controllers: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                controllerName: {
                                    type: 'string',
                                    nullable: true
                                },
                                controllerGroupName: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRemoteService: {
                                    type: 'boolean'
                                },
                                isIntegrationService: {
                                    type: 'boolean'
                                },
                                apiVersion: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                interfaces: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            methods: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        parametersOnMethod: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'object',
                                                                properties: {
                                                                    name: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeAsString: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    type: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeSimple: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    isOptional: {
                                                                        type: 'boolean'
                                                                    },
                                                                    defaultValue: {
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            nullable: true
                                                        },
                                                        returnValue: {
                                                            type: 'object',
                                                            properties: {
                                                                type: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                actions: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            uniqueName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            httpMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            url: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            supportedVersions: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            parameters: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        nameOnMethod: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        jsonName: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        },
                                                        constraintTypes: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'string'
                                                            },
                                                            nullable: true
                                                        },
                                                        bindingSourceId: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        descriptorName: {
                                                            type: 'string',
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            allowAnonymous: {
                                                type: 'boolean',
                                                nullable: true
                                            },
                                            implementFrom: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    baseType: {
                        type: 'string',
                        nullable: true
                    },
                    isEnum: {
                        type: 'boolean'
                    },
                    enumNames: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    enumValues: {
                        type: 'array',
                        items: {},
                        nullable: true
                    },
                    genericArguments: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    properties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRequired: {
                                    type: 'boolean'
                                },
                                minLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                maxLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                minimum: {
                                    type: 'string',
                                    nullable: true
                                },
                                maximum: {
                                    type: 'string',
                                    nullable: true
                                },
                                regex: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerApiDescriptionModel = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    methods: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    uniqueName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    httpMethod: {
                        type: 'string',
                        nullable: true
                    },
                    url: {
                        type: 'string',
                        nullable: true
                    },
                    supportedVersions: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    parameters: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                nameOnMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                },
                                constraintTypes: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                bindingSourceId: {
                                    type: 'string',
                                    nullable: true
                                },
                                descriptorName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    allowAnonymous: {
                        type: 'boolean',
                        nullable: true
                    },
                    implementFrom: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerInterfaceApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_InterfaceMethodApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_MethodParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ModuleApiDescriptionModel = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    controllerName: {
                        type: 'string',
                        nullable: true
                    },
                    controllerGroupName: {
                        type: 'string',
                        nullable: true
                    },
                    isRemoteService: {
                        type: 'boolean'
                    },
                    isIntegrationService: {
                        type: 'boolean'
                    },
                    apiVersion: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    interfaces: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                methods: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    actions: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                uniqueName: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                httpMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                url: {
                                    type: 'string',
                                    nullable: true
                                },
                                supportedVersions: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                parameters: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            nameOnMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            jsonName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            },
                                            constraintTypes: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            bindingSourceId: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            descriptorName: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                allowAnonymous: {
                                    type: 'boolean',
                                    nullable: true
                                },
                                implementFrom: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_PropertyApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ReturnValueApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_TypeApiDescriptionModel = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isRequired: {
                        type: 'boolean'
                    },
                    minLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    maxLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    minimum: {
                        type: 'string',
                        nullable: true
                    },
                    maximum: {
                        type: 'string',
                        nullable: true
                    },
                    regex: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorInfo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: {
                        type: 'string',
                        nullable: true
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorResponse = {
    type: 'object',
    properties: {
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    nullable: true
                },
                message: {
                    type: 'string',
                    nullable: true
                },
                details: {
                    type: 'string',
                    nullable: true
                },
                data: {
                    type: 'object',
                    additionalProperties: {},
                    nullable: true
                },
                validationErrors: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            message: {
                                type: 'string',
                                nullable: true
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceValidationErrorInfo = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Localization_LanguageInfo = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_NameValue = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;