// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { PostApiCrmServiceAdminAreaLevel1Data, PostApiCrmServiceAdminAreaLevel1Response, DeleteApiCrmServiceAdminAreaLevel1ByIdData, DeleteApiCrmServiceAdminAreaLevel1ByIdResponse, GetApiCrmServiceAdminAreaLevel1ByIdData, GetApiCrmServiceAdminAreaLevel1ByIdResponse, PutApiCrmServiceAdminAreaLevel1ByIdData, PutApiCrmServiceAdminAreaLevel1ByIdResponse, GetApiCrmServiceAdminAreaLevel1ByCountryByCountryIdData, GetApiCrmServiceAdminAreaLevel1ByCountryByCountryIdResponse, PostApiCrmServiceAdminAreaLevel2Data, PostApiCrmServiceAdminAreaLevel2Response, DeleteApiCrmServiceAdminAreaLevel2ByIdData, DeleteApiCrmServiceAdminAreaLevel2ByIdResponse, GetApiCrmServiceAdminAreaLevel2ByIdData, GetApiCrmServiceAdminAreaLevel2ByIdResponse, PutApiCrmServiceAdminAreaLevel2ByIdData, PutApiCrmServiceAdminAreaLevel2ByIdResponse, GetApiCrmServiceAdminAreaLevel2ByAdminAreaLevel1ByAdminAreaLevel1IdData, GetApiCrmServiceAdminAreaLevel2ByAdminAreaLevel1ByAdminAreaLevel1IdResponse, PostApiCrmServiceCountriesData, PostApiCrmServiceCountriesResponse, GetApiCrmServiceCountriesResponse, DeleteApiCrmServiceCountriesByIdData, DeleteApiCrmServiceCountriesByIdResponse, GetApiCrmServiceCountriesByIdData, GetApiCrmServiceCountriesByIdResponse, PutApiCrmServiceCountriesByIdData, PutApiCrmServiceCountriesByIdResponse, PostApiCrmServiceCustomsData, PostApiCrmServiceCustomsResponse, GetApiCrmServiceCustomsData, GetApiCrmServiceCustomsResponse, PostApiCrmServiceCustomsByIdAffiliationsData, PostApiCrmServiceCustomsByIdAffiliationsResponse, GetApiCrmServiceCustomsByIdAffiliationsData, GetApiCrmServiceCustomsByIdAffiliationsResponse, DeleteApiCrmServiceCustomsByIdData, DeleteApiCrmServiceCustomsByIdResponse, GetApiCrmServiceCustomsByIdData, GetApiCrmServiceCustomsByIdResponse, PutApiCrmServiceCustomsByIdData, PutApiCrmServiceCustomsByIdResponse, DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData, PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceCustomsByIdAddressesData, GetApiCrmServiceCustomsByIdAddressesResponse, PutApiCrmServiceCustomsByIdAddressesData, PutApiCrmServiceCustomsByIdAddressesResponse, GetApiCrmServiceCustomsByIdEmailsData, GetApiCrmServiceCustomsByIdEmailsResponse, PutApiCrmServiceCustomsByIdEmailsData, PutApiCrmServiceCustomsByIdEmailsResponse, GetApiCrmServiceCustomsByIdSubCustomsData, GetApiCrmServiceCustomsByIdSubCustomsResponse, GetApiCrmServiceCustomsByIdTelephonesData, GetApiCrmServiceCustomsByIdTelephonesResponse, PutApiCrmServiceCustomsByIdTelephonesData, PutApiCrmServiceCustomsByIdTelephonesResponse, PostApiCrmServiceIndividualsData, PostApiCrmServiceIndividualsResponse, GetApiCrmServiceIndividualsData, GetApiCrmServiceIndividualsResponse, GetApiCrmServiceIndividualsByIdData, GetApiCrmServiceIndividualsByIdResponse, PutApiCrmServiceIndividualsByIdData, PutApiCrmServiceIndividualsByIdResponse, DeleteApiCrmServiceIndividualsByIdData, DeleteApiCrmServiceIndividualsByIdResponse, PutApiCrmServiceIndividualsByIdTelephonesData, PutApiCrmServiceIndividualsByIdTelephonesResponse, GetApiCrmServiceIndividualsByIdTelephonesData, GetApiCrmServiceIndividualsByIdTelephonesResponse, PutApiCrmServiceIndividualsByIdEmailsData, PutApiCrmServiceIndividualsByIdEmailsResponse, GetApiCrmServiceIndividualsByIdEmailsData, GetApiCrmServiceIndividualsByIdEmailsResponse, PutApiCrmServiceIndividualsByIdAddressesData, PutApiCrmServiceIndividualsByIdAddressesResponse, GetApiCrmServiceIndividualsByIdAddressesData, GetApiCrmServiceIndividualsByIdAddressesResponse, GetApiCrmServiceIndividualsByEmailData, GetApiCrmServiceIndividualsByEmailResponse, GetApiCrmServiceIndividualsByAffiliationsData, GetApiCrmServiceIndividualsByAffiliationsResponse, GetApiCrmServiceMerchantsByIdData, GetApiCrmServiceMerchantsByIdResponse, PutApiCrmServiceMerchantsByIdData, PutApiCrmServiceMerchantsByIdResponse, DeleteApiCrmServiceMerchantsByIdData, DeleteApiCrmServiceMerchantsByIdResponse, GetApiCrmServiceMerchantsByIdSubMerchantsData, GetApiCrmServiceMerchantsByIdSubMerchantsResponse, GetApiCrmServiceMerchantsByIdAffiliationsData, GetApiCrmServiceMerchantsByIdAffiliationsResponse, PostApiCrmServiceMerchantsByIdAffiliationsData, PostApiCrmServiceMerchantsByIdAffiliationsResponse, DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData, PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse, PostApiCrmServiceMerchantsBulkProductGroupMerchantsData, PostApiCrmServiceMerchantsBulkProductGroupMerchantsResponse, GetApiCrmServiceMerchantsByIdProductGroupData, GetApiCrmServiceMerchantsByIdProductGroupResponse, PostApiCrmServiceMerchantsByIdProductGroupsData, PostApiCrmServiceMerchantsByIdProductGroupsResponse, DeleteApiCrmServiceMerchantsByIdProductGroupsData, DeleteApiCrmServiceMerchantsByIdProductGroupsResponse, PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultData, PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultResponse, PostApiCrmServiceMerchantsData, PostApiCrmServiceMerchantsResponse, GetApiCrmServiceMerchantsData, GetApiCrmServiceMerchantsResponse, PutApiCrmServiceMerchantsByIdTelephonesData, PutApiCrmServiceMerchantsByIdTelephonesResponse, GetApiCrmServiceMerchantsByIdTelephonesData, GetApiCrmServiceMerchantsByIdTelephonesResponse, PutApiCrmServiceMerchantsByIdEmailsData, PutApiCrmServiceMerchantsByIdEmailsResponse, GetApiCrmServiceMerchantsByIdEmailsData, GetApiCrmServiceMerchantsByIdEmailsResponse, PutApiCrmServiceMerchantsByIdAddressesData, PutApiCrmServiceMerchantsByIdAddressesResponse, GetApiCrmServiceMerchantsByIdAddressesData, GetApiCrmServiceMerchantsByIdAddressesResponse, PostApiCrmServiceNeighborhoodsData, PostApiCrmServiceNeighborhoodsResponse, DeleteApiCrmServiceNeighborhoodsByIdData, DeleteApiCrmServiceNeighborhoodsByIdResponse, PutApiCrmServiceNeighborhoodsByIdData, PutApiCrmServiceNeighborhoodsByIdResponse, GetApiCrmServiceNeighborhoodsByAdminAreaLevel2ByAdminAreaLevel2IdData, GetApiCrmServiceNeighborhoodsByAdminAreaLevel2ByAdminAreaLevel2IdResponse, PostApiCrmServiceRefundPointsData, PostApiCrmServiceRefundPointsResponse, GetApiCrmServiceRefundPointsData, GetApiCrmServiceRefundPointsResponse, PostApiCrmServiceRefundPointsByIdAffiliationsData, PostApiCrmServiceRefundPointsByIdAffiliationsResponse, GetApiCrmServiceRefundPointsByIdAffiliationsData, GetApiCrmServiceRefundPointsByIdAffiliationsResponse, DeleteApiCrmServiceRefundPointsByIdData, DeleteApiCrmServiceRefundPointsByIdResponse, GetApiCrmServiceRefundPointsByIdData, GetApiCrmServiceRefundPointsByIdResponse, PutApiCrmServiceRefundPointsByIdData, PutApiCrmServiceRefundPointsByIdResponse, DeleteApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdData, PutApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceRefundPointsByIdAddressesData, GetApiCrmServiceRefundPointsByIdAddressesResponse, PutApiCrmServiceRefundPointsByIdAddressesData, PutApiCrmServiceRefundPointsByIdAddressesResponse, GetApiCrmServiceRefundPointsByIdEmailsData, GetApiCrmServiceRefundPointsByIdEmailsResponse, PutApiCrmServiceRefundPointsByIdEmailsData, PutApiCrmServiceRefundPointsByIdEmailsResponse, GetApiCrmServiceRefundPointsByIdTelephonesData, GetApiCrmServiceRefundPointsByIdTelephonesResponse, PutApiCrmServiceRefundPointsByIdTelephonesData, PutApiCrmServiceRefundPointsByIdTelephonesResponse, PostApiCrmServiceRegionsData, PostApiCrmServiceRegionsResponse, DeleteApiCrmServiceRegionsByIdData, DeleteApiCrmServiceRegionsByIdResponse, GetApiCrmServiceRegionsByIdData, GetApiCrmServiceRegionsByIdResponse, PutApiCrmServiceRegionsByIdData, PutApiCrmServiceRegionsByIdResponse, GetApiCrmServiceRegionsByCountryByCountryIdData, GetApiCrmServiceRegionsByCountryByCountryIdResponse, PostApiCrmServiceTaxFreesData, PostApiCrmServiceTaxFreesResponse, GetApiCrmServiceTaxFreesData, GetApiCrmServiceTaxFreesResponse, PostApiCrmServiceTaxFreesByIdAffiliationsData, PostApiCrmServiceTaxFreesByIdAffiliationsResponse, GetApiCrmServiceTaxFreesByIdAffiliationsData, GetApiCrmServiceTaxFreesByIdAffiliationsResponse, DeleteApiCrmServiceTaxFreesByIdData, DeleteApiCrmServiceTaxFreesByIdResponse, GetApiCrmServiceTaxFreesByIdData, GetApiCrmServiceTaxFreesByIdResponse, PutApiCrmServiceTaxFreesByIdData, PutApiCrmServiceTaxFreesByIdResponse, DeleteApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdData, PutApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceTaxFreesByIdAddressesData, GetApiCrmServiceTaxFreesByIdAddressesResponse, PutApiCrmServiceTaxFreesByIdAddressesData, PutApiCrmServiceTaxFreesByIdAddressesResponse, GetApiCrmServiceTaxFreesByIdEmailsData, GetApiCrmServiceTaxFreesByIdEmailsResponse, PutApiCrmServiceTaxFreesByIdEmailsData, PutApiCrmServiceTaxFreesByIdEmailsResponse, GetApiCrmServiceTaxFreesByIdTelephonesData, GetApiCrmServiceTaxFreesByIdTelephonesResponse, PutApiCrmServiceTaxFreesByIdTelephonesData, PutApiCrmServiceTaxFreesByIdTelephonesResponse, PostApiCrmServiceTaxOfficesData, PostApiCrmServiceTaxOfficesResponse, GetApiCrmServiceTaxOfficesData, GetApiCrmServiceTaxOfficesResponse, PostApiCrmServiceTaxOfficesByIdAffiliationsData, PostApiCrmServiceTaxOfficesByIdAffiliationsResponse, GetApiCrmServiceTaxOfficesByIdAffiliationsData, GetApiCrmServiceTaxOfficesByIdAffiliationsResponse, DeleteApiCrmServiceTaxOfficesByIdData, DeleteApiCrmServiceTaxOfficesByIdResponse, GetApiCrmServiceTaxOfficesByIdData, GetApiCrmServiceTaxOfficesByIdResponse, PutApiCrmServiceTaxOfficesByIdData, PutApiCrmServiceTaxOfficesByIdResponse, DeleteApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdData, PutApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceTaxOfficesByIdExistsData, GetApiCrmServiceTaxOfficesByIdExistsResponse, GetApiCrmServiceTaxOfficesByIdAddressesData, GetApiCrmServiceTaxOfficesByIdAddressesResponse, PutApiCrmServiceTaxOfficesByIdAddressesData, PutApiCrmServiceTaxOfficesByIdAddressesResponse, GetApiCrmServiceTaxOfficesByIdEmailsData, GetApiCrmServiceTaxOfficesByIdEmailsResponse, PutApiCrmServiceTaxOfficesByIdEmailsData, PutApiCrmServiceTaxOfficesByIdEmailsResponse, GetApiCrmServiceTaxOfficesByIdSubTaxOfficesData, GetApiCrmServiceTaxOfficesByIdSubTaxOfficesResponse, GetApiCrmServiceTaxOfficesByIdTelephonesData, GetApiCrmServiceTaxOfficesByIdTelephonesResponse, PutApiCrmServiceTaxOfficesByIdTelephonesData, PutApiCrmServiceTaxOfficesByIdTelephonesResponse, GetApiCrmServiceUserAffiliationsResponse, PostApiCrmServiceUserAffiliationsSetActiveAffiliationData, PostApiCrmServiceUserAffiliationsSetActiveAffiliationResponse } from './types.gen';

export class AdminAreaLevel1Service {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceAdminAreaLevel1(data: PostApiCrmServiceAdminAreaLevel1Data = {}): CancelablePromise<PostApiCrmServiceAdminAreaLevel1Response> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/admin-area-level-1',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceAdminAreaLevel1ById(data: DeleteApiCrmServiceAdminAreaLevel1ByIdData): CancelablePromise<DeleteApiCrmServiceAdminAreaLevel1ByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/admin-area-level-1/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminAreaLevel1ById(data: GetApiCrmServiceAdminAreaLevel1ByIdData): CancelablePromise<GetApiCrmServiceAdminAreaLevel1ByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/admin-area-level-1/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceAdminAreaLevel1ById(data: PutApiCrmServiceAdminAreaLevel1ByIdData): CancelablePromise<PutApiCrmServiceAdminAreaLevel1ByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/admin-area-level-1/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.ViewList
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminAreaLevel1ByCountryByCountryId(data: GetApiCrmServiceAdminAreaLevel1ByCountryByCountryIdData): CancelablePromise<GetApiCrmServiceAdminAreaLevel1ByCountryByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/admin-area-level-1/by-country/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class AdminAreaLevel2Service {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceAdminAreaLevel2(data: PostApiCrmServiceAdminAreaLevel2Data = {}): CancelablePromise<PostApiCrmServiceAdminAreaLevel2Response> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/admin-area-level-2',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceAdminAreaLevel2ById(data: DeleteApiCrmServiceAdminAreaLevel2ByIdData): CancelablePromise<DeleteApiCrmServiceAdminAreaLevel2ByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/admin-area-level-2/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminAreaLevel2ById(data: GetApiCrmServiceAdminAreaLevel2ByIdData): CancelablePromise<GetApiCrmServiceAdminAreaLevel2ByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/admin-area-level-2/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceAdminAreaLevel2ById(data: PutApiCrmServiceAdminAreaLevel2ByIdData): CancelablePromise<PutApiCrmServiceAdminAreaLevel2ByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/admin-area-level-2/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.ViewList
     * @param data The data for the request.
     * @param data.adminAreaLevel1Id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminAreaLevel2ByAdminAreaLevel1ByAdminAreaLevel1Id(data: GetApiCrmServiceAdminAreaLevel2ByAdminAreaLevel1ByAdminAreaLevel1IdData): CancelablePromise<GetApiCrmServiceAdminAreaLevel2ByAdminAreaLevel1ByAdminAreaLevel1IdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/admin-area-level-2/by-admin-area-level-1/{adminAreaLevel1Id}',
            path: {
                adminAreaLevel1Id: data.adminAreaLevel1Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CountryService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceCountries(data: PostApiCrmServiceCountriesData = {}): CancelablePromise<PostApiCrmServiceCountriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/countries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCountries(): CancelablePromise<GetApiCrmServiceCountriesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/countries',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceCountriesById(data: DeleteApiCrmServiceCountriesByIdData): CancelablePromise<DeleteApiCrmServiceCountriesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/countries/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCountriesById(data: GetApiCrmServiceCountriesByIdData): CancelablePromise<GetApiCrmServiceCountriesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/countries/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCountriesById(data: PutApiCrmServiceCountriesByIdData): CancelablePromise<PutApiCrmServiceCountriesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/countries/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CustomService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceCustoms(data: PostApiCrmServiceCustomsData = {}): CancelablePromise<PostApiCrmServiceCustomsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/customs',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewList
     * @param data The data for the request.
     * @param data.customIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustoms(data: GetApiCrmServiceCustomsData = {}): CancelablePromise<GetApiCrmServiceCustomsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs',
            query: {
                CustomIds: data.customIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalIdentifier: data.externalIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.CreateAffiliation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceCustomsByIdAffiliations(data: PostApiCrmServiceCustomsByIdAffiliationsData): CancelablePromise<PostApiCrmServiceCustomsByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/customs/{id}/affiliations',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewAffiliationList
     * @param data The data for the request.
     * @param data.id
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByIdAffiliations(data: GetApiCrmServiceCustomsByIdAffiliationsData): CancelablePromise<GetApiCrmServiceCustomsByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{id}/affiliations',
            path: {
                id: data.id
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceCustomsById(data: DeleteApiCrmServiceCustomsByIdData): CancelablePromise<DeleteApiCrmServiceCustomsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/customs/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsById(data: GetApiCrmServiceCustomsByIdData): CancelablePromise<GetApiCrmServiceCustomsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsById(data: PutApiCrmServiceCustomsByIdData): CancelablePromise<PutApiCrmServiceCustomsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.DeleteAffiliation
     * @param data The data for the request.
     * @param data.customId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/customs/{customId}/affiliations/{affiliationId}',
            path: {
                customId: data.customId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Edit
     * @param data The data for the request.
     * @param data.customId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationId(data: PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{customId}/affiliations/{affiliationId}',
            path: {
                customId: data.customId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewAddressList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByIdAddresses(data: GetApiCrmServiceCustomsByIdAddressesData): CancelablePromise<GetApiCrmServiceCustomsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{id}/addresses',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByIdAddresses(data: PutApiCrmServiceCustomsByIdAddressesData): CancelablePromise<PutApiCrmServiceCustomsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{id}/addresses',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewEmailList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByIdEmails(data: GetApiCrmServiceCustomsByIdEmailsData): CancelablePromise<GetApiCrmServiceCustomsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{id}/emails',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.UpSertEmail
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByIdEmails(data: PutApiCrmServiceCustomsByIdEmailsData): CancelablePromise<PutApiCrmServiceCustomsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{id}/emails',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewSubCustomsList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByIdSubCustoms(data: GetApiCrmServiceCustomsByIdSubCustomsData): CancelablePromise<GetApiCrmServiceCustomsByIdSubCustomsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{id}/sub-customs',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewTelephoneList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByIdTelephones(data: GetApiCrmServiceCustomsByIdTelephonesData): CancelablePromise<GetApiCrmServiceCustomsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{id}/telephones',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByIdTelephones(data: PutApiCrmServiceCustomsByIdTelephonesData): CancelablePromise<PutApiCrmServiceCustomsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{id}/telephones',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class IndividualService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceIndividuals(data: PostApiCrmServiceIndividualsData = {}): CancelablePromise<PostApiCrmServiceIndividualsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/individuals',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewList
     * @param data The data for the request.
     * @param data.name
     * @param data.email
     * @param data.telephone
     * @param data.identificationNumber
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividuals(data: GetApiCrmServiceIndividualsData = {}): CancelablePromise<GetApiCrmServiceIndividualsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals',
            query: {
                Name: data.name,
                Email: data.email,
                Telephone: data.telephone,
                IdentificationNumber: data.identificationNumber,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsById(data: GetApiCrmServiceIndividualsByIdData): CancelablePromise<GetApiCrmServiceIndividualsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsById(data: PutApiCrmServiceIndividualsByIdData): CancelablePromise<PutApiCrmServiceIndividualsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceIndividualsById(data: DeleteApiCrmServiceIndividualsByIdData): CancelablePromise<DeleteApiCrmServiceIndividualsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/individuals/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIdTelephones(data: PutApiCrmServiceIndividualsByIdTelephonesData): CancelablePromise<PutApiCrmServiceIndividualsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{id}/telephones',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewTelephoneList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIdTelephones(data: GetApiCrmServiceIndividualsByIdTelephonesData): CancelablePromise<GetApiCrmServiceIndividualsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{id}/telephones',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.UpSertEmail
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIdEmails(data: PutApiCrmServiceIndividualsByIdEmailsData): CancelablePromise<PutApiCrmServiceIndividualsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{id}/emails',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewEmailList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIdEmails(data: GetApiCrmServiceIndividualsByIdEmailsData): CancelablePromise<GetApiCrmServiceIndividualsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{id}/emails',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIdAddresses(data: PutApiCrmServiceIndividualsByIdAddressesData): CancelablePromise<PutApiCrmServiceIndividualsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{id}/addresses',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewAddressList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIdAddresses(data: GetApiCrmServiceIndividualsByIdAddressesData): CancelablePromise<GetApiCrmServiceIndividualsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{id}/addresses',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewIdAndNameByEmail
     * @param data The data for the request.
     * @param data.email
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByEmail(data: GetApiCrmServiceIndividualsByEmailData = {}): CancelablePromise<GetApiCrmServiceIndividualsByEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/by-email',
            query: {
                email: data.email
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewAffiliated
     * @param data The data for the request.
     * @param data.name
     * @param data.email
     * @param data.telephone
     * @param data.identificationNumber
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByAffiliations(data: GetApiCrmServiceIndividualsByAffiliationsData = {}): CancelablePromise<GetApiCrmServiceIndividualsByAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/by-affiliations',
            query: {
                Name: data.name,
                Email: data.email,
                Telephone: data.telephone,
                IdentificationNumber: data.identificationNumber,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class MerchantService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsById(data: GetApiCrmServiceMerchantsByIdData): CancelablePromise<GetApiCrmServiceMerchantsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsById(data: PutApiCrmServiceMerchantsByIdData): CancelablePromise<PutApiCrmServiceMerchantsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceMerchantsById(data: DeleteApiCrmServiceMerchantsByIdData): CancelablePromise<DeleteApiCrmServiceMerchantsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/merchants/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewStoreList
     * @param data The data for the request.
     * @param data.id
     * @param data.merchantIds
     * @param data.chainCodeId
     * @param data.name
     * @param data.vatNumber
     * @param data.typeCodes
     * @param data.externalIdentifier
     * @param data.parentId
     * @param data.productGroupIds
     * @param data.statusCodes
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByIdSubMerchants(data: GetApiCrmServiceMerchantsByIdSubMerchantsData): CancelablePromise<GetApiCrmServiceMerchantsByIdSubMerchantsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}/sub-merchants',
            path: {
                id: data.id
            },
            query: {
                MerchantIds: data.merchantIds,
                ChainCodeId: data.chainCodeId,
                Name: data.name,
                VatNumber: data.vatNumber,
                TypeCodes: data.typeCodes,
                ExternalIdentifier: data.externalIdentifier,
                ParentId: data.parentId,
                ProductGroupIds: data.productGroupIds,
                StatusCodes: data.statusCodes,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewAffiliationList
     * @param data The data for the request.
     * @param data.id
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByIdAffiliations(data: GetApiCrmServiceMerchantsByIdAffiliationsData): CancelablePromise<GetApiCrmServiceMerchantsByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}/affiliations',
            path: {
                id: data.id
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.CreateAffiliation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsByIdAffiliations(data: PostApiCrmServiceMerchantsByIdAffiliationsData): CancelablePromise<PostApiCrmServiceMerchantsByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/{id}/affiliations',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/merchants/{merchantId}/affiliations/{affiliationId}',
            path: {
                merchantId: data.merchantId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.EditAffiliation
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationId(data: PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{merchantId}/affiliations/{affiliationId}',
            path: {
                merchantId: data.merchantId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.CreateBulkProductGroupMerchant
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsBulkProductGroupMerchants(data: PostApiCrmServiceMerchantsBulkProductGroupMerchantsData = {}): CancelablePromise<PostApiCrmServiceMerchantsBulkProductGroupMerchantsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/bulk-product-group-merchants',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByIdProductGroup(data: GetApiCrmServiceMerchantsByIdProductGroupData): CancelablePromise<GetApiCrmServiceMerchantsByIdProductGroupResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}/product-group',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsByIdProductGroups(data: PostApiCrmServiceMerchantsByIdProductGroupsData): CancelablePromise<PostApiCrmServiceMerchantsByIdProductGroupsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/{id}/product-groups',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceMerchantsByIdProductGroups(data: DeleteApiCrmServiceMerchantsByIdProductGroupsData): CancelablePromise<DeleteApiCrmServiceMerchantsByIdProductGroupsResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/merchants/{id}/product-groups',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.productGroupId
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefault(data: PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultData): CancelablePromise<PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/{merchantId}/product-group/{productGroupId}/default',
            path: {
                merchantId: data.merchantId,
                productGroupId: data.productGroupId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchants(data: PostApiCrmServiceMerchantsData = {}): CancelablePromise<PostApiCrmServiceMerchantsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewList
     * @param data The data for the request.
     * @param data.merchantIds
     * @param data.chainCodeId
     * @param data.name
     * @param data.vatNumber
     * @param data.typeCodes
     * @param data.externalIdentifier
     * @param data.parentId
     * @param data.productGroupIds
     * @param data.statusCodes
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchants(data: GetApiCrmServiceMerchantsData = {}): CancelablePromise<GetApiCrmServiceMerchantsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants',
            query: {
                MerchantIds: data.merchantIds,
                ChainCodeId: data.chainCodeId,
                Name: data.name,
                VatNumber: data.vatNumber,
                TypeCodes: data.typeCodes,
                ExternalIdentifier: data.externalIdentifier,
                ParentId: data.parentId,
                ProductGroupIds: data.productGroupIds,
                StatusCodes: data.statusCodes,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByIdTelephones(data: PutApiCrmServiceMerchantsByIdTelephonesData): CancelablePromise<PutApiCrmServiceMerchantsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{id}/telephones',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewTelephoneList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByIdTelephones(data: GetApiCrmServiceMerchantsByIdTelephonesData): CancelablePromise<GetApiCrmServiceMerchantsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}/telephones',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.UpSertEmail
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByIdEmails(data: PutApiCrmServiceMerchantsByIdEmailsData): CancelablePromise<PutApiCrmServiceMerchantsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{id}/emails',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewEmailList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByIdEmails(data: GetApiCrmServiceMerchantsByIdEmailsData): CancelablePromise<GetApiCrmServiceMerchantsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}/emails',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByIdAddresses(data: PutApiCrmServiceMerchantsByIdAddressesData): CancelablePromise<PutApiCrmServiceMerchantsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{id}/addresses',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewAddressList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByIdAddresses(data: GetApiCrmServiceMerchantsByIdAddressesData): CancelablePromise<GetApiCrmServiceMerchantsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{id}/addresses',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class NeighborhoodService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceNeighborhoods(data: PostApiCrmServiceNeighborhoodsData = {}): CancelablePromise<PostApiCrmServiceNeighborhoodsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/neighborhoods',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceNeighborhoodsById(data: DeleteApiCrmServiceNeighborhoodsByIdData): CancelablePromise<DeleteApiCrmServiceNeighborhoodsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/neighborhoods/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceNeighborhoodsById(data: PutApiCrmServiceNeighborhoodsByIdData): CancelablePromise<PutApiCrmServiceNeighborhoodsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/neighborhoods/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.ViewList
     * @param data The data for the request.
     * @param data.adminAreaLevel2Id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceNeighborhoodsByAdminAreaLevel2ByAdminAreaLevel2Id(data: GetApiCrmServiceNeighborhoodsByAdminAreaLevel2ByAdminAreaLevel2IdData): CancelablePromise<GetApiCrmServiceNeighborhoodsByAdminAreaLevel2ByAdminAreaLevel2IdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/neighborhoods/by-admin-area-level-2/{adminAreaLevel2Id}',
            path: {
                adminAreaLevel2Id: data.adminAreaLevel2Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RefundPointService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceRefundPoints(data: PostApiCrmServiceRefundPointsData = {}): CancelablePromise<PostApiCrmServiceRefundPointsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/refund-points',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewList
     * @param data The data for the request.
     * @param data.refundPointIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundPoints(data: GetApiCrmServiceRefundPointsData = {}): CancelablePromise<GetApiCrmServiceRefundPointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refund-points',
            query: {
                RefundPointIds: data.refundPointIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalIdentifier: data.externalIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.CreateAffiliation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceRefundPointsByIdAffiliations(data: PostApiCrmServiceRefundPointsByIdAffiliationsData): CancelablePromise<PostApiCrmServiceRefundPointsByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/refund-points/{id}/affiliations',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewAffiliationList
     * @param data The data for the request.
     * @param data.id
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundPointsByIdAffiliations(data: GetApiCrmServiceRefundPointsByIdAffiliationsData): CancelablePromise<GetApiCrmServiceRefundPointsByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refund-points/{id}/affiliations',
            path: {
                id: data.id
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceRefundPointsById(data: DeleteApiCrmServiceRefundPointsByIdData): CancelablePromise<DeleteApiCrmServiceRefundPointsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/refund-points/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundPointsById(data: GetApiCrmServiceRefundPointsByIdData): CancelablePromise<GetApiCrmServiceRefundPointsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refund-points/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundPointsById(data: PutApiCrmServiceRefundPointsByIdData): CancelablePromise<PutApiCrmServiceRefundPointsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refund-points/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.DeleteAffiliation
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/refund-points/{refundPointId}/affiliations/{affiliationId}',
            path: {
                refundPointId: data.refundPointId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.EditAffiliation
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationId(data: PutApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceRefundPointsByRefundPointIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refund-points/{refundPointId}/affiliations/{affiliationId}',
            path: {
                refundPointId: data.refundPointId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewAddressList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundPointsByIdAddresses(data: GetApiCrmServiceRefundPointsByIdAddressesData): CancelablePromise<GetApiCrmServiceRefundPointsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refund-points/{id}/addresses',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundPointsByIdAddresses(data: PutApiCrmServiceRefundPointsByIdAddressesData): CancelablePromise<PutApiCrmServiceRefundPointsByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refund-points/{id}/addresses',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewEmailList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundPointsByIdEmails(data: GetApiCrmServiceRefundPointsByIdEmailsData): CancelablePromise<GetApiCrmServiceRefundPointsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refund-points/{id}/emails',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.UpSertEmail
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundPointsByIdEmails(data: PutApiCrmServiceRefundPointsByIdEmailsData): CancelablePromise<PutApiCrmServiceRefundPointsByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refund-points/{id}/emails',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewTelephoneList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundPointsByIdTelephones(data: GetApiCrmServiceRefundPointsByIdTelephonesData): CancelablePromise<GetApiCrmServiceRefundPointsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refund-points/{id}/telephones',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundPointsByIdTelephones(data: PutApiCrmServiceRefundPointsByIdTelephonesData): CancelablePromise<PutApiCrmServiceRefundPointsByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refund-points/{id}/telephones',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RegionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceRegions(data: PostApiCrmServiceRegionsData = {}): CancelablePromise<PostApiCrmServiceRegionsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/regions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceRegionsById(data: DeleteApiCrmServiceRegionsByIdData): CancelablePromise<DeleteApiCrmServiceRegionsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/regions/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRegionsById(data: GetApiCrmServiceRegionsByIdData): CancelablePromise<GetApiCrmServiceRegionsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/regions/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRegionsById(data: PutApiCrmServiceRegionsByIdData): CancelablePromise<PutApiCrmServiceRegionsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/regions/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.ViewList
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRegionsByCountryByCountryId(data: GetApiCrmServiceRegionsByCountryByCountryIdData): CancelablePromise<GetApiCrmServiceRegionsByCountryByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/regions/by-country/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TaxFreeService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxFrees(data: PostApiCrmServiceTaxFreesData = {}): CancelablePromise<PostApiCrmServiceTaxFreesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/tax-frees',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewList
     * @param data The data for the request.
     * @param data.taxFreeIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxFrees(data: GetApiCrmServiceTaxFreesData = {}): CancelablePromise<GetApiCrmServiceTaxFreesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-frees',
            query: {
                TaxFreeIds: data.taxFreeIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalIdentifier: data.externalIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.CreateAffiliation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxFreesByIdAffiliations(data: PostApiCrmServiceTaxFreesByIdAffiliationsData): CancelablePromise<PostApiCrmServiceTaxFreesByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/tax-frees/{id}/affiliations',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewAffiliationList
     * @param data The data for the request.
     * @param data.id
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxFreesByIdAffiliations(data: GetApiCrmServiceTaxFreesByIdAffiliationsData): CancelablePromise<GetApiCrmServiceTaxFreesByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-frees/{id}/affiliations',
            path: {
                id: data.id
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxFreesById(data: DeleteApiCrmServiceTaxFreesByIdData): CancelablePromise<DeleteApiCrmServiceTaxFreesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/tax-frees/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxFreesById(data: GetApiCrmServiceTaxFreesByIdData): CancelablePromise<GetApiCrmServiceTaxFreesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-frees/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxFreesById(data: PutApiCrmServiceTaxFreesByIdData): CancelablePromise<PutApiCrmServiceTaxFreesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-frees/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/tax-frees/{taxFreeId}/affiliations/{affiliationId}',
            path: {
                taxFreeId: data.taxFreeId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.EditAffiliation
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationId(data: PutApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceTaxFreesByTaxFreeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-frees/{taxFreeId}/affiliations/{affiliationId}',
            path: {
                taxFreeId: data.taxFreeId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewAddressList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxFreesByIdAddresses(data: GetApiCrmServiceTaxFreesByIdAddressesData): CancelablePromise<GetApiCrmServiceTaxFreesByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-frees/{id}/addresses',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxFreesByIdAddresses(data: PutApiCrmServiceTaxFreesByIdAddressesData): CancelablePromise<PutApiCrmServiceTaxFreesByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-frees/{id}/addresses',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewEmailList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxFreesByIdEmails(data: GetApiCrmServiceTaxFreesByIdEmailsData): CancelablePromise<GetApiCrmServiceTaxFreesByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-frees/{id}/emails',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.UpSertEmail
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxFreesByIdEmails(data: PutApiCrmServiceTaxFreesByIdEmailsData): CancelablePromise<PutApiCrmServiceTaxFreesByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-frees/{id}/emails',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewTelephoneList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxFreesByIdTelephones(data: GetApiCrmServiceTaxFreesByIdTelephonesData): CancelablePromise<GetApiCrmServiceTaxFreesByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-frees/{id}/telephones',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxFreesByIdTelephones(data: PutApiCrmServiceTaxFreesByIdTelephonesData): CancelablePromise<PutApiCrmServiceTaxFreesByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-frees/{id}/telephones',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TaxOfficeService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxOffices(data: PostApiCrmServiceTaxOfficesData = {}): CancelablePromise<PostApiCrmServiceTaxOfficesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/tax-offices',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewList
     * @param data The data for the request.
     * @param data.taxOfficeIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOffices(data: GetApiCrmServiceTaxOfficesData = {}): CancelablePromise<GetApiCrmServiceTaxOfficesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices',
            query: {
                TaxOfficeIds: data.taxOfficeIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalIdentifier: data.externalIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.CreateAffiliation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxOfficesByIdAffiliations(data: PostApiCrmServiceTaxOfficesByIdAffiliationsData): CancelablePromise<PostApiCrmServiceTaxOfficesByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/tax-offices/{id}/affiliations',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewAffiliationList
     * @param data The data for the request.
     * @param data.id
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesByIdAffiliations(data: GetApiCrmServiceTaxOfficesByIdAffiliationsData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}/affiliations',
            path: {
                id: data.id
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxOfficesById(data: DeleteApiCrmServiceTaxOfficesByIdData): CancelablePromise<DeleteApiCrmServiceTaxOfficesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/tax-offices/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesById(data: GetApiCrmServiceTaxOfficesByIdData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxOfficesById(data: PutApiCrmServiceTaxOfficesByIdData): CancelablePromise<PutApiCrmServiceTaxOfficesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-offices/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.DeleteAffiliation
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/tax-offices/{taxOfficeId}/affiliations/{affiliationId}',
            path: {
                taxOfficeId: data.taxOfficeId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditAffiliation
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationId(data: PutApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceTaxOfficesByTaxOfficeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-offices/{taxOfficeId}/affiliations/{affiliationId}',
            path: {
                taxOfficeId: data.taxOfficeId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices
     * @param data The data for the request.
     * @param data.id
     * @returns boolean OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesByIdExists(data: GetApiCrmServiceTaxOfficesByIdExistsData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdExistsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}/exists',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesByIdAddresses(data: GetApiCrmServiceTaxOfficesByIdAddressesData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}/addresses',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.UpSertAddress
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxOfficesByIdAddresses(data: PutApiCrmServiceTaxOfficesByIdAddressesData): CancelablePromise<PutApiCrmServiceTaxOfficesByIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-offices/{id}/addresses',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewEmailList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesByIdEmails(data: GetApiCrmServiceTaxOfficesByIdEmailsData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}/emails',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.UpSertEmail
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxOfficesByIdEmails(data: PutApiCrmServiceTaxOfficesByIdEmailsData): CancelablePromise<PutApiCrmServiceTaxOfficesByIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-offices/{id}/emails',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewSubTaxOfficeList
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesByIdSubTaxOffices(data: GetApiCrmServiceTaxOfficesByIdSubTaxOfficesData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdSubTaxOfficesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}/sub-taxOffices',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxOfficesByIdTelephones(data: GetApiCrmServiceTaxOfficesByIdTelephonesData): CancelablePromise<GetApiCrmServiceTaxOfficesByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/tax-offices/{id}/telephones',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.UpSertTelephone
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxOfficesByIdTelephones(data: PutApiCrmServiceTaxOfficesByIdTelephonesData): CancelablePromise<PutApiCrmServiceTaxOfficesByIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/tax-offices/{id}/telephones',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class UserAffiliationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.UserAffiliations, CRMService.UserAffiliations.View
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceUserAffiliations(): CancelablePromise<GetApiCrmServiceUserAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/user-affiliations',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.UserAffiliations, CRMService.UserAffiliations.SetPrimary
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceUserAffiliationsSetActiveAffiliation(data: PostApiCrmServiceUserAffiliationsSetActiveAffiliationData = {}): CancelablePromise<PostApiCrmServiceUserAffiliationsSetActiveAffiliationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/user-affiliations/set-active-affiliation',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}