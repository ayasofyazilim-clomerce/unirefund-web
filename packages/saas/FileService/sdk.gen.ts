// This file is auto-generated by @hey-api/openapi-ts

import type {CancelablePromise} from "./core/CancelablePromise";
import type {BaseHttpRequest} from "./core/BaseHttpRequest";
import type {
  GetApiFileServiceFilesByIdData,
  GetApiFileServiceFilesByIdResponse,
  GetApiFileServiceFilesByIdForHumanValidationData,
  GetApiFileServiceFilesByIdForHumanValidationResponse,
  GetApiFileServiceFilesForHumanValidationData,
  GetApiFileServiceFilesForHumanValidationResponse,
  GetApiFileServiceFilesData,
  GetApiFileServiceFilesResponse,
  PostApiFileServiceFilesData,
  PostApiFileServiceFilesResponse,
  GetApiFileServiceFilesWithRelationData,
  GetApiFileServiceFilesWithRelationResponse,
  GetApiFileServiceFilesByIdDownloadData,
  PutApiFileServiceFilesByIdValidateOrInvalidateData,
  PutApiFileServiceFilesByIdValidateOrInvalidateResponse,
  PutApiFileServiceFilesByIdMetaData,
  PutApiFileServiceFilesByIdMetaResponse,
  PostApiFileServiceFilesByIdTriggerAiProcessData,
  PostApiFileServiceFilesByIdTriggerAiProcessResponse,
  GetApiFileServiceFileAiInfosByFileIdData,
  GetApiFileServiceFileAiInfosByFileIdResponse,
  GetApiFileServiceFileRelationsData,
  GetApiFileServiceFileRelationsResponse,
  PostApiFileServiceFileRelationsData,
  PostApiFileServiceFileRelationsResponse,
  PutApiFileServiceFileRelationsByIdData,
  PutApiFileServiceFileRelationsByIdResponse,
  DeleteApiFileServiceFileRelationsByIdData,
  DeleteApiFileServiceFileRelationsByIdResponse,
  GetApiFileServiceFileRelationEntitiesData,
  GetApiFileServiceFileRelationEntitiesResponse,
  PostApiFileServiceFileRelationEntitiesData,
  PostApiFileServiceFileRelationEntitiesResponse,
  PutApiFileServiceFileRelationEntitiesByIdData,
  PutApiFileServiceFileRelationEntitiesByIdResponse,
  DeleteApiFileServiceFileRelationEntitiesByIdData,
  DeleteApiFileServiceFileRelationEntitiesByIdResponse,
  GetApiFileServiceFileTypesByIdData,
  GetApiFileServiceFileTypesByIdResponse,
  PutApiFileServiceFileTypesByIdData,
  PutApiFileServiceFileTypesByIdResponse,
  DeleteApiFileServiceFileTypesByIdData,
  DeleteApiFileServiceFileTypesByIdResponse,
  GetApiFileServiceFileTypesData,
  GetApiFileServiceFileTypesResponse,
  PostApiFileServiceFileTypesData,
  PostApiFileServiceFileTypesResponse,
  GetApiFileServiceFileTypeGroupsData,
  GetApiFileServiceFileTypeGroupsResponse,
  PostApiFileServiceFileTypeGroupsData,
  PostApiFileServiceFileTypeGroupsResponse,
  GetApiFileServiceFileTypeGroupsRulesetData,
  GetApiFileServiceFileTypeGroupsRulesetResponse,
  PutApiFileServiceFileTypeGroupsByIdData,
  PutApiFileServiceFileTypeGroupsByIdResponse,
  DeleteApiFileServiceFileTypeGroupsByIdData,
  DeleteApiFileServiceFileTypeGroupsByIdResponse,
  GetApiFileServiceFileTypeMimeTypesData,
  GetApiFileServiceFileTypeMimeTypesResponse,
  PostApiFileServiceFileTypeMimeTypesData,
  PostApiFileServiceFileTypeMimeTypesResponse,
  PutApiFileServiceFileTypeMimeTypesByIdData,
  PutApiFileServiceFileTypeMimeTypesByIdResponse,
  DeleteApiFileServiceFileTypeMimeTypesByIdData,
  DeleteApiFileServiceFileTypeMimeTypesByIdResponse,
  GetApiFileServiceMimeTypesData,
  GetApiFileServiceMimeTypesResponse,
  PostApiFileServiceMimeTypesData,
  PostApiFileServiceMimeTypesResponse,
  PutApiFileServiceMimeTypesByIdData,
  PutApiFileServiceMimeTypesByIdResponse,
  DeleteApiFileServiceMimeTypesByIdData,
  DeleteApiFileServiceMimeTypesByIdResponse,
  GetApiFileServiceProvidersData,
  GetApiFileServiceProvidersResponse,
  PostApiFileServiceProvidersData,
  PostApiFileServiceProvidersResponse,
  PutApiFileServiceProvidersByIdData,
  PutApiFileServiceProvidersByIdResponse,
  DeleteApiFileServiceProvidersByIdData,
  DeleteApiFileServiceProvidersByIdResponse,
} from "./types.gen";

export class FileService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFilesById(
    data: GetApiFileServiceFilesByIdData,
  ): CancelablePromise<GetApiFileServiceFilesByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/files/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFilesByIdForHumanValidation(
    data: GetApiFileServiceFilesByIdForHumanValidationData,
  ): CancelablePromise<GetApiFileServiceFilesByIdForHumanValidationResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/files/{id}/for-human-validation",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.fileHumanValidationStatuses
   * @param data.fileTypeNamespace
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFilesForHumanValidation(
    data: GetApiFileServiceFilesForHumanValidationData = {},
  ): CancelablePromise<GetApiFileServiceFilesForHumanValidationResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/files/for-human-validation",
      query: {
        FileHumanValidationStatuses: data.fileHumanValidationStatuses,
        FileTypeNamespace: data.fileTypeNamespace,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.fileTypeGroup
   * @param data.fileType
   * @param data.relatedEntity
   * @param data.relatedId
   * @param data.isValidated
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFiles(
    data: GetApiFileServiceFilesData = {},
  ): CancelablePromise<GetApiFileServiceFilesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/files",
      query: {
        FileTypeGroup: data.fileTypeGroup,
        FileType: data.fileType,
        RelatedEntity: data.relatedEntity,
        RelatedID: data.relatedId,
        IsValidated: data.isValidated,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.formData
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFiles(
    data: PostApiFileServiceFilesData = {},
  ): CancelablePromise<PostApiFileServiceFilesResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/files",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.relatedEntity
   * @param data.relatedId
   * @param data.fileTypeGroup
   * @param data.fileType
   * @param data.isValidated
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFilesWithRelation(
    data: GetApiFileServiceFilesWithRelationData,
  ): CancelablePromise<GetApiFileServiceFilesWithRelationResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/files/with-relation",
      query: {
        FileTypeGroup: data.fileTypeGroup,
        FileType: data.fileType,
        RelatedEntity: data.relatedEntity,
        RelatedID: data.relatedId,
        IsValidated: data.isValidated,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @throws ApiError
   */
  public getApiFileServiceFilesByIdDownload(data: GetApiFileServiceFilesByIdDownloadData): CancelablePromise<void> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/files/{id}/download",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFilesByIdValidateOrInvalidate(
    data: PutApiFileServiceFilesByIdValidateOrInvalidateData,
  ): CancelablePromise<PutApiFileServiceFilesByIdValidateOrInvalidateResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/files/{id}/validate-or-invalidate",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFilesByIdMeta(
    data: PutApiFileServiceFilesByIdMetaData,
  ): CancelablePromise<PutApiFileServiceFilesByIdMetaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/files/{id}/meta",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFilesByIdTriggerAiProcess(
    data: PostApiFileServiceFilesByIdTriggerAiProcessData,
  ): CancelablePromise<PostApiFileServiceFilesByIdTriggerAiProcessResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/files/{id}/trigger-ai-process",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class FileAiInfoService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.fileId
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileAiInfosByFileId(
    data: GetApiFileServiceFileAiInfosByFileIdData,
  ): CancelablePromise<GetApiFileServiceFileAiInfosByFileIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-ai-infos/{fileId}",
      path: {
        fileId: data.fileId,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class FileRelationService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.fileId
   * @param data.relatedEntityId
   * @param data.property
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileRelations(
    data: GetApiFileServiceFileRelationsData = {},
  ): CancelablePromise<GetApiFileServiceFileRelationsResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-relations",
      query: {
        Id: data.id,
        FileId: data.fileId,
        RelatedEntityId: data.relatedEntityId,
        Property: data.property,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFileRelations(
    data: PostApiFileServiceFileRelationsData = {},
  ): CancelablePromise<PostApiFileServiceFileRelationsResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/file-relations",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFileRelationsById(
    data: PutApiFileServiceFileRelationsByIdData,
  ): CancelablePromise<PutApiFileServiceFileRelationsByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/file-relations/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceFileRelationsById(
    data: DeleteApiFileServiceFileRelationsByIdData,
  ): CancelablePromise<DeleteApiFileServiceFileRelationsByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/file-relations/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class FileRelationEntityService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.fileTypeId
   * @param data.relatedEntityName
   * @param data.relatedEntityProperty
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileRelationEntities(
    data: GetApiFileServiceFileRelationEntitiesData = {},
  ): CancelablePromise<GetApiFileServiceFileRelationEntitiesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-relation-entities",
      query: {
        Id: data.id,
        FileTypeId: data.fileTypeId,
        RelatedEntityName: data.relatedEntityName,
        RelatedEntityProperty: data.relatedEntityProperty,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFileRelationEntities(
    data: PostApiFileServiceFileRelationEntitiesData = {},
  ): CancelablePromise<PostApiFileServiceFileRelationEntitiesResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/file-relation-entities",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFileRelationEntitiesById(
    data: PutApiFileServiceFileRelationEntitiesByIdData,
  ): CancelablePromise<PutApiFileServiceFileRelationEntitiesByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/file-relation-entities/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceFileRelationEntitiesById(
    data: DeleteApiFileServiceFileRelationEntitiesByIdData,
  ): CancelablePromise<DeleteApiFileServiceFileRelationEntitiesByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/file-relation-entities/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class FileTypeService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileTypesById(
    data: GetApiFileServiceFileTypesByIdData,
  ): CancelablePromise<GetApiFileServiceFileTypesByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-types/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFileTypesById(
    data: PutApiFileServiceFileTypesByIdData,
  ): CancelablePromise<PutApiFileServiceFileTypesByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/file-types/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceFileTypesById(
    data: DeleteApiFileServiceFileTypesByIdData,
  ): CancelablePromise<DeleteApiFileServiceFileTypesByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/file-types/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.fileTypeGroupNamespace
   * @param data.providerId
   * @param data.name
   * @param data.containerName
   * @param data.filePath
   * @param data.namespace
   * @param data.isPublic
   * @param data.dateRequired
   * @param data.isMulti
   * @param data.isTenant
   * @param data.originatorRequired
   * @param data.numberRequired
   * @param data.isFileTypeRequired
   * @param data.isHumanValidationRequired
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileTypes(
    data: GetApiFileServiceFileTypesData = {},
  ): CancelablePromise<GetApiFileServiceFileTypesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-types",
      query: {
        Id: data.id,
        FileTypeGroupNamespace: data.fileTypeGroupNamespace,
        ProviderID: data.providerId,
        Name: data.name,
        ContainerName: data.containerName,
        FilePath: data.filePath,
        Namespace: data.namespace,
        IsPublic: data.isPublic,
        DateRequired: data.dateRequired,
        IsMulti: data.isMulti,
        IsTenant: data.isTenant,
        OriginatorRequired: data.originatorRequired,
        NumberRequired: data.numberRequired,
        IsFileTypeRequired: data.isFileTypeRequired,
        IsHumanValidationRequired: data.isHumanValidationRequired,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFileTypes(
    data: PostApiFileServiceFileTypesData = {},
  ): CancelablePromise<PostApiFileServiceFileTypesResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/file-types",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class FileTypeGroupService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.name
   * @param data.namespace
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileTypeGroups(
    data: GetApiFileServiceFileTypeGroupsData = {},
  ): CancelablePromise<GetApiFileServiceFileTypeGroupsResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-type-groups",
      query: {
        Id: data.id,
        Name: data.name,
        Namespace: data.namespace,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFileTypeGroups(
    data: PostApiFileServiceFileTypeGroupsData = {},
  ): CancelablePromise<PostApiFileServiceFileTypeGroupsResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/file-type-groups",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.namespace
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileTypeGroupsRuleset(
    data: GetApiFileServiceFileTypeGroupsRulesetData = {},
  ): CancelablePromise<GetApiFileServiceFileTypeGroupsRulesetResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-type-groups/ruleset",
      query: {
        _namespace: data.namespace,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFileTypeGroupsById(
    data: PutApiFileServiceFileTypeGroupsByIdData,
  ): CancelablePromise<PutApiFileServiceFileTypeGroupsByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/file-type-groups/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceFileTypeGroupsById(
    data: DeleteApiFileServiceFileTypeGroupsByIdData,
  ): CancelablePromise<DeleteApiFileServiceFileTypeGroupsByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/file-type-groups/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class FileTypeMimeTypeService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.fileTypeNamespace
   * @param data.mimeTypeId
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceFileTypeMimeTypes(
    data: GetApiFileServiceFileTypeMimeTypesData = {},
  ): CancelablePromise<GetApiFileServiceFileTypeMimeTypesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/file-type-mime-types",
      query: {
        FileTypeNamespace: data.fileTypeNamespace,
        MimeTypeId: data.mimeTypeId,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceFileTypeMimeTypes(
    data: PostApiFileServiceFileTypeMimeTypesData = {},
  ): CancelablePromise<PostApiFileServiceFileTypeMimeTypesResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/file-type-mime-types",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceFileTypeMimeTypesById(
    data: PutApiFileServiceFileTypeMimeTypesByIdData,
  ): CancelablePromise<PutApiFileServiceFileTypeMimeTypesByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/file-type-mime-types/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceFileTypeMimeTypesById(
    data: DeleteApiFileServiceFileTypeMimeTypesByIdData,
  ): CancelablePromise<DeleteApiFileServiceFileTypeMimeTypesByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/file-type-mime-types/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class MimeTypeService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.mimeTypeCode
   * @param data.mimeTypeExtension
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceMimeTypes(
    data: GetApiFileServiceMimeTypesData = {},
  ): CancelablePromise<GetApiFileServiceMimeTypesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/mime-types",
      query: {
        Id: data.id,
        MimeTypeCode: data.mimeTypeCode,
        MimeTypeExtension: data.mimeTypeExtension,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceMimeTypes(
    data: PostApiFileServiceMimeTypesData = {},
  ): CancelablePromise<PostApiFileServiceMimeTypesResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/mime-types",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceMimeTypesById(
    data: PutApiFileServiceMimeTypesByIdData,
  ): CancelablePromise<PutApiFileServiceMimeTypesByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/mime-types/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceMimeTypesById(
    data: DeleteApiFileServiceMimeTypesByIdData,
  ): CancelablePromise<DeleteApiFileServiceMimeTypesByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/mime-types/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}

export class ProviderService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.type
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiFileServiceProviders(
    data: GetApiFileServiceProvidersData = {},
  ): CancelablePromise<GetApiFileServiceProvidersResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/file-service/providers",
      query: {
        Id: data.id,
        Type: data.type,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiFileServiceProviders(
    data: PostApiFileServiceProvidersData = {},
  ): CancelablePromise<PostApiFileServiceProvidersResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/file-service/providers",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiFileServiceProvidersById(
    data: PutApiFileServiceProvidersByIdData,
  ): CancelablePromise<PutApiFileServiceProvidersByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/file-service/providers/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiFileServiceProvidersById(
    data: DeleteApiFileServiceProvidersByIdData,
  ): CancelablePromise<DeleteApiFileServiceProvidersByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/file-service/providers/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}
