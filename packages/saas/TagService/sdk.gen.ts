// This file is auto-generated by @hey-api/openapi-ts

import type {CancelablePromise} from "./core/CancelablePromise";
import type {BaseHttpRequest} from "./core/BaseHttpRequest";
import type {
  PostApiTagServiceTagData,
  PostApiTagServiceTagResponse,
  GetApiTagServiceTagData,
  GetApiTagServiceTagResponse,
  PutApiTagServiceTagByIdData,
  PutApiTagServiceTagByIdResponse,
  DeleteApiTagServiceTagByIdData,
  DeleteApiTagServiceTagByIdResponse,
  GetApiTagServiceTagByIdDetailData,
  GetApiTagServiceTagByIdDetailResponse,
  GetApiTagServiceTagTagsRefundData,
  GetApiTagServiceTagTagsRefundResponse,
  GetApiTagServiceTagSummaryData,
  GetApiTagServiceTagSummaryResponse,
  GetApiTagServiceTagTagsRefundFeesData,
  GetApiTagServiceTagTagsRefundFeesResponse,
  PutApiTagServiceTagExportValidationByIdData,
  PutApiTagServiceTagExportValidationByIdResponse,
} from "./types.gen";

export class TagService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public postApiTagServiceTag(data: PostApiTagServiceTagData = {}): CancelablePromise<PostApiTagServiceTagResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/api/tag-service/tag",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.tagNumber
   * @param data.invoiceNumber
   * @param data.travellerFullName
   * @param data.travellerDocumentNumber
   * @param data.isEarlyRefunded
   * @param data.issuedStartDate
   * @param data.issuedEndDate
   * @param data.exportStartDate
   * @param data.exportEndDate
   * @param data.paidStartDate
   * @param data.paidEndDate
   * @param data.travellerIds
   * @param data.merchantIds
   * @param data.statuses
   * @param data.refundTypes
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTagServiceTag(data: GetApiTagServiceTagData = {}): CancelablePromise<GetApiTagServiceTagResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/tag-service/tag",
      query: {
        TagNumber: data.tagNumber,
        InvoiceNumber: data.invoiceNumber,
        TravellerFullName: data.travellerFullName,
        TravellerDocumentNumber: data.travellerDocumentNumber,
        IsEarlyRefunded: data.isEarlyRefunded,
        IssuedStartDate: data.issuedStartDate,
        IssuedEndDate: data.issuedEndDate,
        ExportStartDate: data.exportStartDate,
        ExportEndDate: data.exportEndDate,
        PaidStartDate: data.paidStartDate,
        PaidEndDate: data.paidEndDate,
        TravellerIds: data.travellerIds,
        MerchantIds: data.merchantIds,
        Statuses: data.statuses,
        RefundTypes: data.refundTypes,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTagServiceTagById(
    data: PutApiTagServiceTagByIdData,
  ): CancelablePromise<PutApiTagServiceTagByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/tag-service/tag/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public deleteApiTagServiceTagById(
    data: DeleteApiTagServiceTagByIdData,
  ): CancelablePromise<DeleteApiTagServiceTagByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/api/tag-service/tag/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTagServiceTagByIdDetail(
    data: GetApiTagServiceTagByIdDetailData,
  ): CancelablePromise<GetApiTagServiceTagByIdDetailResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/tag-service/tag/{id}/detail",
      path: {
        id: data.id,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.travellerDocumentNumber
   * @param data.isExportValidated
   * @param data.refundType
   * @param data.refundPointId
   * @param data.tagIds
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTagServiceTagTagsRefund(
    data: GetApiTagServiceTagTagsRefundData,
  ): CancelablePromise<GetApiTagServiceTagTagsRefundResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/tag-service/tag/tags-refund",
      query: {
        TravellerDocumentNumber: data.travellerDocumentNumber,
        IsExportValidated: data.isExportValidated,
        RefundType: data.refundType,
        RefundPointId: data.refundPointId,
        TagIds: data.tagIds,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.tagNumber
   * @param data.invoiceNumber
   * @param data.travellerFullName
   * @param data.travellerDocumentNumber
   * @param data.isEarlyRefunded
   * @param data.issuedStartDate
   * @param data.issuedEndDate
   * @param data.exportStartDate
   * @param data.exportEndDate
   * @param data.paidStartDate
   * @param data.paidEndDate
   * @param data.travellerIds
   * @param data.merchantIds
   * @param data.statuses
   * @param data.refundTypes
   * @param data.sorting
   * @param data.skipCount
   * @param data.maxResultCount
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTagServiceTagSummary(
    data: GetApiTagServiceTagSummaryData = {},
  ): CancelablePromise<GetApiTagServiceTagSummaryResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/tag-service/tag/summary",
      query: {
        TagNumber: data.tagNumber,
        InvoiceNumber: data.invoiceNumber,
        TravellerFullName: data.travellerFullName,
        TravellerDocumentNumber: data.travellerDocumentNumber,
        IsEarlyRefunded: data.isEarlyRefunded,
        IssuedStartDate: data.issuedStartDate,
        IssuedEndDate: data.issuedEndDate,
        ExportStartDate: data.exportStartDate,
        ExportEndDate: data.exportEndDate,
        PaidStartDate: data.paidStartDate,
        PaidEndDate: data.paidEndDate,
        TravellerIds: data.travellerIds,
        MerchantIds: data.merchantIds,
        Statuses: data.statuses,
        RefundTypes: data.refundTypes,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.tagIds
   * @param data.refundPointId
   * @param data.refundDate
   * @param data.refundType
   * @returns unknown Success
   * @throws ApiError
   */
  public getApiTagServiceTagTagsRefundFees(
    data: GetApiTagServiceTagTagsRefundFeesData,
  ): CancelablePromise<GetApiTagServiceTagTagsRefundFeesResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/api/tag-service/tag/tags-refund-fees",
      query: {
        TagIds: data.tagIds,
        RefundPointId: data.refundPointId,
        RefundDate: data.refundDate,
        RefundType: data.refundType,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns unknown Success
   * @throws ApiError
   */
  public putApiTagServiceTagExportValidationById(
    data: PutApiTagServiceTagExportValidationByIdData,
  ): CancelablePromise<PutApiTagServiceTagExportValidationByIdResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/api/tag-service/tag/export-validation/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Server Error",
        501: "Server Error",
      },
    });
  }
}
