// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { PostApiRefundServiceRefundsData, PostApiRefundServiceRefundsResponse, GetApiRefundServiceRefundsData, GetApiRefundServiceRefundsResponse, GetApiRefundServiceRefundsRefundPointNamesData, GetApiRefundServiceRefundsRefundPointNamesResponse, GetApiRefundServiceRefundsUserDevicesData, GetApiRefundServiceRefundsUserDevicesResponse, GetApiRefundServiceRefundsRefundStatisticsData, GetApiRefundServiceRefundsRefundStatisticsResponse, GetApiRefundServiceRefundsByIdDetailData, GetApiRefundServiceRefundsByIdDetailResponse, GetApiRefundServiceRefundsTagByIdDetailData, GetApiRefundServiceRefundsTagByIdDetailResponse } from './types.gen';

export class RefundService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiRefundServiceRefunds(data: PostApiRefundServiceRefundsData = {}): CancelablePromise<PostApiRefundServiceRefundsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/refund-service/refunds',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timeFilterStartDate
     * @param data.timeFilterEndDate
     * @param data.textFilterTextFilterType
     * @param data.textFilterFilter
     * @param data.statusesFilterRefundTypes
     * @param data.statusesFilterStatuses
     * @param data.statusesFilterReconciliationStatuses
     * @param data.refundPointIds
     * @param data.refundUserDeviceIds
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiRefundServiceRefunds(data: GetApiRefundServiceRefundsData = {}): CancelablePromise<GetApiRefundServiceRefundsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/refund-service/refunds',
            query: {
                'TimeFilter.StartDate': data.timeFilterStartDate,
                'TimeFilter.EndDate': data.timeFilterEndDate,
                'TextFilter.TextFilterType': data.textFilterTextFilterType,
                'TextFilter.Filter': data.textFilterFilter,
                'StatusesFilter.RefundTypes': data.statusesFilterRefundTypes,
                'StatusesFilter.Statuses': data.statusesFilterStatuses,
                'StatusesFilter.ReconciliationStatuses': data.statusesFilterReconciliationStatuses,
                RefundPointIds: data.refundPointIds,
                RefundUserDeviceIds: data.refundUserDeviceIds,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timeFilterStartDate
     * @param data.timeFilterEndDate
     * @param data.textFilterTextFilterType
     * @param data.textFilterFilter
     * @param data.statusesFilterRefundTypes
     * @param data.statusesFilterStatuses
     * @param data.statusesFilterReconciliationStatuses
     * @param data.refundUserDeviceIds
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns string OK
     * @throws ApiError
     */
    public getApiRefundServiceRefundsRefundPointNames(data: GetApiRefundServiceRefundsRefundPointNamesData = {}): CancelablePromise<GetApiRefundServiceRefundsRefundPointNamesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/refund-service/refunds/refund-point-names',
            query: {
                'TimeFilter.StartDate': data.timeFilterStartDate,
                'TimeFilter.EndDate': data.timeFilterEndDate,
                'TextFilter.TextFilterType': data.textFilterTextFilterType,
                'TextFilter.Filter': data.textFilterFilter,
                'StatusesFilter.RefundTypes': data.statusesFilterRefundTypes,
                'StatusesFilter.Statuses': data.statusesFilterStatuses,
                'StatusesFilter.ReconciliationStatuses': data.statusesFilterReconciliationStatuses,
                RefundUserDeviceIds: data.refundUserDeviceIds,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timeFilterStartDate
     * @param data.timeFilterEndDate
     * @param data.textFilterTextFilterType
     * @param data.textFilterFilter
     * @param data.statusesFilterRefundTypes
     * @param data.statusesFilterStatuses
     * @param data.statusesFilterReconciliationStatuses
     * @param data.refundPointIds
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiRefundServiceRefundsUserDevices(data: GetApiRefundServiceRefundsUserDevicesData = {}): CancelablePromise<GetApiRefundServiceRefundsUserDevicesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/refund-service/refunds/user-devices',
            query: {
                'TimeFilter.StartDate': data.timeFilterStartDate,
                'TimeFilter.EndDate': data.timeFilterEndDate,
                'TextFilter.TextFilterType': data.textFilterTextFilterType,
                'TextFilter.Filter': data.textFilterFilter,
                'StatusesFilter.RefundTypes': data.statusesFilterRefundTypes,
                'StatusesFilter.Statuses': data.statusesFilterStatuses,
                'StatusesFilter.ReconciliationStatuses': data.statusesFilterReconciliationStatuses,
                RefundPointIds: data.refundPointIds,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timeFilterStartDate
     * @param data.timeFilterEndDate
     * @param data.textFilterTextFilterType
     * @param data.textFilterFilter
     * @param data.statusesFilterRefundTypes
     * @param data.statusesFilterStatuses
     * @param data.statusesFilterReconciliationStatuses
     * @param data.refundPointIds
     * @param data.refundUserDeviceIds
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiRefundServiceRefundsRefundStatistics(data: GetApiRefundServiceRefundsRefundStatisticsData = {}): CancelablePromise<GetApiRefundServiceRefundsRefundStatisticsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/refund-service/refunds/refund-statistics',
            query: {
                'TimeFilter.StartDate': data.timeFilterStartDate,
                'TimeFilter.EndDate': data.timeFilterEndDate,
                'TextFilter.TextFilterType': data.textFilterTextFilterType,
                'TextFilter.Filter': data.textFilterFilter,
                'StatusesFilter.RefundTypes': data.statusesFilterRefundTypes,
                'StatusesFilter.Statuses': data.statusesFilterStatuses,
                'StatusesFilter.ReconciliationStatuses': data.statusesFilterReconciliationStatuses,
                RefundPointIds: data.refundPointIds,
                RefundUserDeviceIds: data.refundUserDeviceIds
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiRefundServiceRefundsByIdDetail(data: GetApiRefundServiceRefundsByIdDetailData): CancelablePromise<GetApiRefundServiceRefundsByIdDetailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/refund-service/refunds/{id}/detail',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiRefundServiceRefundsTagByIdDetail(data: GetApiRefundServiceRefundsTagByIdDetailData): CancelablePromise<GetApiRefundServiceRefundsTagByIdDetailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/refund-service/refunds/tag/{id}/detail',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}